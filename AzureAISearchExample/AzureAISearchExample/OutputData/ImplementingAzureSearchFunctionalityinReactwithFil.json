{
  "Id": "149",
  "Title": "\u0022Implementing Azure Search Functionality in React with Filters\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAdd(\u0022language_code\u0022);            SearchResults\u003CSearchDocument\u003E searchResults = searchClient.Search\u003CSearchDocument\u003E(data.SearchText, options);            var facetOutput = new Dictionary\u003Cstring, IList\u003CFacetValue\u003E\u003E();            foreach (var facetResult in searchResults.Facets)            {                facetOutput[facetResult.Key] = facetResult.Value                           .Select(x =\u003E new FacetValue { value = x.Value.ToString(), count = x.Count })                           .ToList();            }            // Data to return             var output = new SearchOutput            {                Count = searchResults.\r\nTotalCount,                Results = searchResults.GetResults().ToList(),                Facets = facetOutput            };                        var response = req.CreateResponse(HttpStatusCode.Found);            // Serialize data            var serializer = new JsonObjectSerializer(                new JsonSerializerOptions(JsonSerializerDefaults.Web));            await response.WriteAsJsonAsync(output, serializer);            return response;        }        public static string CreateFilterExpression(List\u003CSearchFilter\u003E filters)        {            if (filters is null or { Count: \u003C= 0 })Call the Azure Function in the React client with the following code.\r\nJavaScript            {                return null;            }            List\u003Cstring\u003E filterExpressions = new();            List\u003CSearchFilter\u003E authorFilters = filters.Where(f =\u003E f.field == \u0022authors\u0022).ToList();            List\u003CSearchFilter\u003E languageFilters = filters.Where(f =\u003E f.field == \u0022language_code\u0022).ToList();            List\u003Cstring\u003E authorFilterValues = authorFilters. Select(f =\u003E f.value).ToList();            if (authorFilterValues.Count \u003E 0)            {                string filterStr = string.Join(\u0022,\u0022, authorFilterValues);                filterExpressions.Add($\u0022{\u0022authors\u0022}/any(t: search.in(t, \u0027{filterStr}\u0027, \u0027,\u0027))\u0022);            }            List\u003Cstring\u003E languageFilterValues = languageFilters.\n"
}