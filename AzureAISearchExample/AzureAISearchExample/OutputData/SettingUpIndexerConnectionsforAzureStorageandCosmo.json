{
  "Id": "843",
  "Title": "\u0022Setting Up Indexer Connections for Azure Storage and Cosmos DB\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfnet/indexers?api-version=2020-06-30Content-Type: application/jsonapi-key: [admin key]{    \u0022name\u0022 : \u0022blob-indexer\u0022,    \u0022dataSourceName\u0022 : \u0022blob-datasource\u0022,    \u0022targetIndexName\u0022 : \u0022my-target-index\u0022}Accessing network secured data in storageaccountsvirtual network, see Make indexer connections to Azure Storage as a trusted service.\r\nAzure Blob indexerAzure Data Lake Storage Gen2 indexerAzure Table indexerC# Example: Index Data Lake Gen2 using Microsoft Entra ID (GitHub)See alsoSet up an indexer connection to AzureCosmos DB via a managed identityArticle\u202208/16/2023This article explains how to set up an indexer connection to an Azure Cosmos DBdatabase using a managed identity instead of providing credentials in the connectionstring.\u0027You can use a system-assigned managed identity or a user-assigned managed identity(preview).\r\nManaged identities are Azure Active Directory logins and require Azure roleassignments to access data in Azure Cosmos DB.Create a managed identity for your search service.Assign the Cosmos DB Account Reader role to the search service managedidentity. This role grants the ability to read Azure Cosmos DB account data. Formore information about role assignments in Cosmos DB, see Configure role-basedaccess control to data.Data Plane Role assignment: Follow Data plane Role assignment to know more.\r\nExample for a read-only data plane role assignment:Azure PowerShellRole assignment for system-assigned identity: Azure PowerShellPrerequisites$cosmosdb_acc_name = \u003Ccosmos db account name\u003E$resource_group = \u003Cresource group name\u003E$subsciption = \u003Csubscription id\u003E$system_assigned_principal = \u003Cprincipal id for system assigned identity\u003E$readOnlyRoleDefinitionId = \u002200000000-0000-0000-0000-000000000001\u0022$scope=$(az cosmosdb show --name $cosmosdbname --resource-group $resourcegroup --query id --output tsv)\n"
}