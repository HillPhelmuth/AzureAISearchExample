{
  "Id": "150",
  "Title": "\u0022React Search Component with Filter and Pagination Functionality\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfSelect(f =\u003E f.value).ToList();            if (authorFilterValues.Count \u003E 0)            {                string filterStr = string.Join(\u0022,\u0022, authorFilterValues);                filterExpressions.Add($\u0022{\u0022authors\u0022}/any(t: search.in(t, \u0027{filterStr}\u0027, \u0027,\u0027))\u0022);            }            List\u003Cstring\u003E languageFilterValues = languageFilters.\r\nSelect(f =\u003E f.value).ToList();            foreach (var value in languageFilterValues)            {                filterExpressions.Add($\u0022language_code eq \u0027{value}\u0027\u0022);            }            return string.Join(\u0022 and \u0022, filterExpressions);        }    }}Client: Search from the catalogimport React, { useEffect, useState } from \u0027react\u0027;import axios from \u0027axios\u0027;import CircularProgress  from \u0027@mui/material/CircularProgress\u0027;import { useLocation, useNavigate } from \u0022react-router-dom\u0022;import Results from \u0027../../components/Results/Results\u0027;import Pager from \u0027../../components/Pager/Pager\u0027;import Facets from \u0027.\r\n./../components/Facets/Facets\u0027;import SearchBar from \u0027../../components/SearchBar/SearchBar\u0027;import \u0022./Search.css\u0022;export default function Search() {    let location = useLocation();  const navigate = useNavigate();    const [ results, setResults ] = useState([]);  const [ resultCount, setResultCount ] = useState(0);  const [ currentPage, setCurrentPage ] = useState(1);  const [ q, setQ ] = useState(new URLSearchParams(location.\r\nsearch).get(\u0027q\u0027) ?? \u0022*\u0022);  const [ top ] = useState(new URLSearchParams(location.search).get(\u0027top\u0027) ?? 8);  const [ skip, setSkip ] = useState(new URLSearchParams(location.search). get(\u0027skip\u0027) ?? 0);  const [ filters, setFilters ] = useState([]);  const [ facets, setFacets ] = useState({});  const [ isLoading, setIsLoading ] = useState(true);  let resultsPerPage = top;    useEffect(() =\u003E {    setIsLoading(true);    setSkip((currentPage-1) * top);    const body = {      q: q,      top: top,      skip: skip,      filters: filters    };    axios.\n"
}