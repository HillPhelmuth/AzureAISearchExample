{
  "Id": "639",
  "Title": "\u0022Implementing Optimistic Concurrency in Azure AI Search REST API\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfapi-version=2021-04-01-preview{  \u0022location\u0022: \u0022{{region}}\u0022,  \u0022sku\u0022: {    \u0022name\u0022: \u0022basic\u0022  },  \u0022properties\u0022: {    \u0022replicaCount\u0022: 3,    \u0022partitionCount\u0022: 1,    \u0022hostingMode\u0022:\r\n\u0022default\u0022  }}See alsoManage using the REST APIsManagement REST API overviewManagement REST API versionsHow to manage concurrency in Azure AISearchArticle\u202211/15/2023When managing Azure AI Search resources such as indexes and data sources, it\u0027simportant to update resources safely, especially if resources are accessed concurrentlyby different components of your application.\r\nWhen two clients concurrently update aresource without coordination, race conditions are possible. To prevent this, Azure AISearch offers an optimistic concurrency model. There are no locks on a resource.\r\nInstead,there is an ETag for every resource that identifies the resource version so that you canformulate requests that avoid accidental overwrites.Optimistic concurrency is implemented through access condition checks in API callswriting to indexes, indexers, data sources, skillsets, and synonymMap resources.All resources have an entity tag (ETag) that provides object version information.\r\nBychecking the ETag first, you can avoid concurrent updates in a typical workflow (get,modify locally, update) by ensuring the resource\u0027s ETag matches your local copy.The REST API uses an ETag on the request header.The .NET SDK sets the ETag through an accessCondition object, setting the If-Match | If-Match-None header on the resource. Objects that use ETags, such asSynonymMap.ETag and SearchIndex.ETag, have an accessCondition object.Every time you update a resource, its ETag changes automatically. When you implementconcurrency management, all you\u0027re doing is putting a precondition on the updaterequest that requires the remote resource to have the same ETag as the copy of the\uEA80 TipConceptual code in a sample C# solution explains how concurrency controlworks in Azure AI Search.\n"
}