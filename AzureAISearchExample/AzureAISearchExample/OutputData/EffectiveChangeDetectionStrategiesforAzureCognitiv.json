{
  "Id": "796",
  "Title": "\u0022Effective Change Detection Strategies for Azure Cognitive Search Indexers\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBe sure to check both successful and failed status notifications fordetails about the job.For content verification, run queries on the populated index that return entiredocuments or selected fields.If your data source supports change detection, an indexer can detect underlyingchanges in the data and process just the new or updated documents on each indexerrun, leaving unchanged content as-is. If indexer execution history says that a run wassuccessful with 0/0 documents processed, it means that the indexer didn\u0027t find any newor changed rows or blobs in the underlying data source.Change detection logic is built into the data platforms.\r\nHow an indexer supports changedetection varies by data source:Azure Storage has built-in change detection, which means an indexer canrecognize new and updated documents automatically. Blob Storage, Azure TableStorage, and Azure Data Lake Storage Gen2 stamp each blob or row update with adate and time. An indexer automatically uses this information to determine whichdocuments to update in the index. For more information about deletion detection,see Delete detection using indexers for Azure Storage in Azure Cognitive Search.Cloud database technologies provide optional change detection features in theirplatforms. For these data sources, change detection isn\u0027t automatic.\r\nYou need tospecify in the data source definition which policy is used:Azure SQL (change detection)Azure DB for MySQL (change detection)Azure Cosmos DB for NoSQL (change detection)Check resultsChange detection and internal stateAzure Cosmos DB for MongoDB (change detection)Azure CosmosDB for Apache Gremlin (change detection)Indexers keep track of the last document it processed from the data source through aninternal high water mark. The marker is never exposed in the API, but internally theindexer keeps track of where it stopped. When indexing resumes, either through ascheduled run or an on-demand invocation, the indexer references the high water markso that it can pick up where it left off.\n"
}