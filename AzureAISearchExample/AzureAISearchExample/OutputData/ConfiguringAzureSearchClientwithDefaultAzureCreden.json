{
  "Id": "1498",
  "Title": "\u0022Configuring Azure SearchClient with DefaultAzureCredential in ASP.NET Core\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBefore you can use the DefaultAzureCredential, or any credential type fromAzure.Identity, you\u0027ll first need to install the Azure.Identity package.To use DefaultAzureCredential with a client ID and secret, you\u0027ll need to set theAZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET environment variables;alternatively, you can pass those values to the ClientSecretCredential also inAzure.Identity.\r\nCreate a SearchClientstring indexName = \u0022nycjobs\u0022;// Get the service endpoint and API key from the environmentUri endpoint = new Uri(Environment.GetEnvironmentVariable(\u0022SEARCH_ENDPOINT\u0022));string key = Environment.\r\nGetEnvironmentVariable(\u0022SEARCH_API_KEY\u0022);// Create a clientAzureKeyCredential credential = new AzureKeyCredential(key);SearchClient client = new SearchClient(endpoint, indexName, credential);Create a client using Azure Active Directory authenticationMake sure you use the right namespace for DefaultAzureCredential at the top of yoursource file:C#Then you can create an instance of DefaultAzureCredential and pass it to a newinstance of your client:C#To inject SearchClient as a dependency in an ASP.\r\nNET Core app, first install the packageMicrosoft.Extensions.Azure. Then register the client in the Startup.ConfigureServicesmethod:C#To use the preceding code, add this to your configuration:JSONusing Azure.Identity;string indexName = \u0022nycjobs\u0022;// Get the service endpoint from the environmentUri endpoint = new Uri(Environment.GetEnvironmentVariable(\u0022SEARCH_ENDPOINT\u0022));DefaultAzureCredential credential = new DefaultAzureCredential();// Create a clientSearchClient client = new SearchClient(endpoint, indexName, credential);ASP.NET Corepublic void ConfigureServices(IServiceCollection services){    services.AddAzureClients(builder =\u003E    {        builder. AddSearchClient(Configuration.GetSection(\u0022SearchClient\u0022));    });    services.AddControllers();}{    \u0022SearchClient\u0022: {You\u0027ll also need to provide your resource key to authenticate the client, but youshouldn\u0027t be putting that information in the configuration. Instead, when indevelopment, use User-Secrets. Add the following to secrets.json:JSONWhen running in production, it\u0027s preferable to use environment variables:Or use other secure ways of storing secrets like Azure Key Vault.For more details about Dependency Injection in ASP.NET Core apps, see Dependencyinjection with the Azure SDK for .NET.\n"
}