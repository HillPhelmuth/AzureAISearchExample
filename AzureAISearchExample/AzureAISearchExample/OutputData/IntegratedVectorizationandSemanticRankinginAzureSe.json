{
  "Id": "1159",
  "Title": "\u0022Integrated Vectorization and Semantic Ranking in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf013770515,            . . .            ],            \u0022fields\u0022: \u0022mytextvector\u0022,            \u0022k\u0022: 5        }    ]}Query with integrated vectorization (preview)POST https://{{search-service}}.search.windows.\r\nnet/indexes/{{index}}/docs/search?api-version=2023-10-01-preview{    \u0022select\u0022: \u0022title, genre, description\u0022,    \u0022vectorQueries\u0022: [        {            \u0022kind\u0022: \u0022text\u0022            \u0022text\u0022: \u0022mystery novel set in London\u0022,            \u0022fields\u0022: \u0022descriptionVector\u0022,            \u0022k\u0022: 5        }Here\u0027s a hybrid query, with multiple vector fields and queries and semantic ranking.Again, the differences are the kind of vector query and the text string instead of avector.\r\nIn this example, the search engine makes three vectorization calls to the vectorizersassigned to descriptionVector, synopsisVector, and authorBioVector in the index. Theresulting vectors are used to retrieve documents against their respective fields. Thesearch engine also executes the search query.HTTPThe scored results from all four queries are fused using RRF ranking. Secondarysemantic ranking is invoked over the fused search results, but on the searchFields only,boosting results that are the most semantically aligned to \u0022search\u0022:\u0022mystery novel setin London\u0022.    ]}POST https://{{search-service}}.search.windows.\r\nnet/indexes/{{index}}/docs/search? api-version=2023-10-01-previewContent-Type: application/jsonapi-key: {{admin-api-key}}{\u202F\u202F\u202F\u202F\u0022search\u0022:\u0022mystery novel set in London\u0022, \u202F\u202F\u202F\u202F\u0022searchFields\u0022:\u0022description, synopsis\u0022, \u202F\u202F\u202F\u202F\u0022semanticConfiguration\u0022:\u0022my-semantic-config\u0022, \u202F\u202F\u202F\u202F\u0022queryType\u0022:\u0022semantic\u0022,    \u0022select\u0022: \u0022title, author, synopsis\u0022,    \u0022filter\u0022: \u0022genre eq \u0027mystery\u0027\u0022,    \u0022vectorFilterMode\u0022: \u0022postFilter\u0022,    \u0022vectorQueries\u0022:\n"
}