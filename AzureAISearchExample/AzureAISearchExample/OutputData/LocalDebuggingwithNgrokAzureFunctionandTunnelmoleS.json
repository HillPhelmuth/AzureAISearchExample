{
  "Id": "1034",
  "Title": "\u0022Local Debugging with Ngrok: Azure Function and Tunnelmole Setup\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfOr if you don\u0027t have NodeJS installed,download the precompiled .exe file for Windows and put it somewhere inyour PATH.2. Run this command to create a new tunnel:ConsoleIn the preceding example, https://m5hdpb-ip-49-183-170-144.tunnelmole.net forwardsto port 7071 on your local machine, which is the default port where Azure functions areexposed.\r\nngrok is a popular, closed source, cross-platform application that can create atunneling or forwarding URL, so that internet requests reach your local machine. Usengrok to forward requests from an enrichment pipeline in your search service to yourmachine to allow local debugging.1. Install ngrok.2.\r\nOpen a terminal and go to the folder with the ngrok executable.3. Run ngrok with the following command to create a new tunnel:Console4. When ngrok starts, copy and save the public forwarding URL for the next step. Theforwarding URL is randomly generated.\u279C  ~ tmole 7071http://m5hdpb-ip-49-183-170-144.tunnelmole.net is forwarding to localhost:7071https://m5hdpb-ip-49-183-170-144.\r\ntunnelmole.net is forwarding to localhost:7071Using ngrokngrok http 7071 \uFF17 NoteBy default, Azure functions are exposed on 7071. Other tools andconfigurations might require that you provide a different port.Within the debug session, modify your Custom Web API Skill URI to call the Tunnelmoleor ngrok forwarding URL. Ensure that you append \u0022/api/FunctionName\u0022 when usingAzure Function for executing the skillset code.You can edit the skill definition in the portal.At this point, new requests from your debug session should now be sent to your localAzure Function. You can use breakpoints in your Visual Studio code to debug your codeor run step by step.\n"
}