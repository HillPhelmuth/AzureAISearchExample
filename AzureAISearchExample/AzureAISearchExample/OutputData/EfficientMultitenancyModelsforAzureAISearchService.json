{
  "Id": "631",
  "Title": "\u0022Efficient Multitenancy Models for Azure AI Search Services\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIn a service-per-tenant architecture, each tenant has its own search service.In this model, the application achieves the maximum level of isolation for its tenants.Each service has dedicated storage and throughput for handling search requests. Eachtenant has individual ownership of API keys.For applications where each tenant has a large footprint or the workload has littlevariability from tenant to tenant, the service-per-tenant model is an effective choice asresources aren\u0027t shared across various tenants\u2019 workloads.A service per tenant model also offers the benefit of a predictable, fixed cost model.\r\nThere\u0027s no up-front investment in an entire search service until there\u0027s a tenant to fill it,however the cost-per-tenant is higher than an index-per-tenant model.Model 2: One service per tenantThe service-per-tenant model is an efficient choice for applications with a globalfootprint. With geographically distributed tenants, it\u0027s easy to have each tenant\u0027s servicein the appropriate region.The challenges in scaling this pattern arise when individual tenants outgrow theirservice. Azure AI Search doesn\u0027t currently support upgrading the pricing tier of a searchservice, so all data would have to be manually copied to a new service.\r\nAnother pattern for modeling multitenancy is mixing both index-per-tenant and service-per-tenant strategies.By mixing the two patterns, an application\u0027s largest tenants can occupy dedicatedservices while the long tail of less active, smaller tenants can occupy indexes in a sharedservice. This model ensures that the largest tenants have consistently high performancefrom the service while helping to protect the smaller tenants from any noisy neighbors.However, implementing this strategy relies on foresight in predicting which tenants willrequire a dedicated service versus an index in a shared service. Application complexityincreases with the need to manage both of these multitenancy models. The above design patterns to model multitenant scenarios in Azure AI Search assume auniform scope where each tenant is a whole instance of an application. However,applications can sometimes handle many smaller scopes.If service-per-tenant and index-per-tenant models aren\u0027t sufficiently small scopes, it\u0027spossible to model an index to achieve an even finer degree of granularity.\n"
}