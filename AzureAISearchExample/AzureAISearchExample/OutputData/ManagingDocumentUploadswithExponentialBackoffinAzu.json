{
  "Id": "237",
  "Title": "\u0022Managing Document Uploads with Exponential Backoff in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfWriteLine(\u0022[Batch starting at doc {0} had partial failure]\u0022, id);                Console.WriteLine(\u0022[Retrying {0} failed documents] \\n\u0022, failedDocuments.Count);                // creating a batch of failed documents to retry                var failedDocumentKeys = failedDocuments.\r\nSelect(doc =\u003E doc.Key).ToList();                hotels = hotels.Where(h =\u003E failedDocumentKeys.Contains(h.HotelId)).ToList();                batch = IndexDocumentsBatch.Upload(hotels);                Task.Delay(delay).Wait();                delay = delay * 2;                continue;            }        }        return result;    }    catch (RequestFailedException ex)    {        Console.\r\nWriteLine(\u0022[Batch starting at doc {0} failed]\u0022, id);        Console.WriteLine(\u0022[Retrying entire batch] \\n\u0022);        if (attempts == maxRetryAttempts)        {            Console.WriteLine(\u0022[MAX RETRIES HIT] - Giving up on the batch starting at {0}\u0022, id);            break;        }        Task.\r\nDelay(delay).Wait();        delay = delay * 2;    }} while (true);From here, we wrap the exponential backoff code into a function so it can be easilycalled.Another function is then created to manage the active threads. For simplicity, thatfunction isn\u0027t included here but can be found in ExponentialBackoff.cs.\r\nThe function canbe called with the following command where hotels is the data we want to upload,1000 is the batch size, and 8 is the number of concurrent threads:C#When you run the function, you should see an output like below:When a batch of documents fails, an error is printed out indicating the failure and thatthe batch is being retried:await ExponentialBackoff. IndexData(indexClient, hotels, 1000, 8);[Batch starting at doc 6000 had partial failure][Retrying 560 failed documents]After the function is finished running, you can verify that all of the documents wereadded to the index.You can explore the populated search index after the program has run programaticallyor using the Search explorer in the portal.There are two main options for checking the number of documents in an index: theCount Documents API and the Get Index Statistics API. Both paths may require someadditional time to update so don\u0027t be alarmed if the number of documents returned islower than you expected initially.\n"
}