{
  "Id": "152",
  "Title": "\u0022Building an Azure Search Function for Catalog Suggestions\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdflog(searchTerm);    setQ(searchTerm);  }  var body;  if (isLoading) {    body = (      \u003Cdiv className=\u0022col-md-9\u0022\u003E        \u003CCircularProgress /\u003E      \u003C/div\u003E);\r\n} else {    body = (      \u003Cdiv className=\u0022col-md-9\u0022\u003E        \u003CResults documents={results} top={top} skip={skip} count={resultCount}\u003E\u003C/Results\u003E        \u003CPager className=\u0022pager-style\u0022 currentPage={currentPage} resultCount={resultCount} resultsPerPage={resultsPerPage} setCurrentPage={setCurrentPage}\u003E\u003C/Pager\u003E      \u003C/div\u003E    )  }\r\nreturn (    \u003Cmain className=\u0022main main--search container-fluid\u0022\u003E            \u003Cdiv className=\u0022row\u0022\u003E        \u003Cdiv className=\u0022col-md-3\u0022\u003E          \u003Cdiv className=\u0022search-bar\u0022\u003E            \u003CSearchBar postSearchHandler={postSearchHandler} q={q}\u003E\u003C/SearchBar\u003E          \u003C/div\u003E          \u003CFacets facets={facets} filters={filters} setFilters={setFilters}\u003E\u003C/Facets\u003E        \u003C/div\u003E        {body}      \u003C/div\u003E    \u003C/main\u003E  );\r\n}Azure Function: Suggestions from the catalogusing Azure;using Azure.\r\nCore.Serialization;using Azure.Search.Documents;using Azure.Search.Documents.Models;using Microsoft.Azure.Functions.Worker;using Microsoft.Azure.Functions.Worker.Http;using Microsoft.Extensions.Logging;using System.Net;using System.Text.Json;using WebSearch.Models;namespace WebSearch.Function{    public class Suggest    {        private static string searchApiKey = Environment.GetEnvironmentVariable(\u0022SearchApiKey\u0022, EnvironmentVariableTarget.Process);        private static string searchServiceName = Environment.GetEnvironmentVariable(\u0022SearchServiceName\u0022, EnvironmentVariableTarget. Process);        private static string searchIndexName = Environment.GetEnvironmentVariable(\u0022SearchIndexName\u0022, EnvironmentVariableTarget.Process) ?? \u0022good-books\u0022;        private readonly ILogger\u003CLookup\u003E _logger;        public Suggest(ILogger\u003CLookup\u003E logger)        {            _logger = logger;        }        [Function(\u0022suggest\u0022)]        public async Task\u003CHttpResponseData\u003E RunAsync(            [HttpTrigger(AuthorizationLevel.Anonymous, \u0022post\u0022)] HttpRequestData req,             FunctionContext executionContext)        {            // Get Document Id            string requestBody = await new StreamReader(req.\n"
}