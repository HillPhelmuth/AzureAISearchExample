{
  "Id": "1270",
  "Title": "\u0022Optimizing Search Queries with Analyzers and Pattern Matching Techniques\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThe solution is to invoke an analyzer during indexing that preserves a complete string,including spaces and special characters if necessary, so that you can include the spacesand characters in your query string. Having a whole, un-tokenized string enables patternmatching for \u0022starts with\u0022 or \u0022ends with\u0022 queries, where the pattern you provide can beevaluated against a term that isn\u0027t transformed by lexical analysis.If you need to support search scenarios that call for analyzed and non-analyzed content,consider creating two fields in your index, one for each scenario. One field undergoeslexical analysis.\r\nThe second field stores an intact string, using a content-preservinganalyzer that emits whole-string tokens for pattern matching.\uEA80 TipIf you are familiar with Postman and REST APIs, download the query examplescollection to query partial terms and special characters described in this article.About partial term searchAzure Cognitive Search scans for whole tokenized terms in the index and won\u0027t find amatch on a partial term unless you include wildcard placeholder operators (* and ?) ,or format the query as a regular expression.Partial terms are specified using these techniques:Regular expression queries can be any regular expression that is valid underApache Lucene.\r\nWildcard operators with prefix matching refers to a generally recognized patternthat includes the beginning of a term, followed by * or ? suffix operators, such assearch=cap* matching on \u0022Cap\u0027n Jack\u0027s Waterfront Inn\u0022 or \u0022Gacc Capital\u0022. Prefixingmatching is supported in both simple and full Lucene query syntax. Wildcard with infix and suffix matching places the * and ? operators inside or atthe beginning of a term, and requires regular expression syntax (where theexpression is enclosed with forward slashes). For example, the query string(search=/.*numeric.*/) returns results on \u0022alphanumeric\u0022 and \u0022alphanumerical\u0022 assuffix and infix matches.\n"
}