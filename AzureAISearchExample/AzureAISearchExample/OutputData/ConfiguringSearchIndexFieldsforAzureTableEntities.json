{
  "Id": "934",
  "Title": "\u0022Configuring Search Index Fields for Azure Table Entities\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfWith this approach, if you need to trigger a full reindex, reset the data sourcequery in addition to resetting the indexer.In a search index, add fields to accept the content and metadata of your table entities.1. Create or update an index to define search fields that will store content fromentities:HTTP2.\r\nCreate a document key field (\u0022key\u0022: true), but allow the indexer to populate itautomatically. A table indexer populates the key field with concatenated partitionand row keys from the table. For example, if a row\u2019s PartitionKey is 1 and RowKeyAdd search fields to an indexPOST https://[service name].search.windows.\r\nnet/indexes?api-version=2020-06-30  {   \u0022name\u0022 : \u0022my-search-index\u0022,   \u0022fields\u0022: [     { \u0022name\u0022: \u0022Key\u0022, \u0022type\u0022: \u0022Edm.String\u0022, \u0022key\u0022: true, \u0022searchable\u0022: false },     { \u0022name\u0022: \u0022SomeColumnInMyTable\u0022, \u0022type\u0022: \u0022Edm.String\u0022, \u0022searchable\u0022: true }   ] } is 1_123, then the key value is 11_123.\r\nIf the partition key is null, just the row key isused.If you\u0027re using the Import data wizard to create the index, the portal infers a \u0022Key\u0022field for the search index and uses an implicit field mapping to connect the sourceand destination fields. You don\u0027t have to add the field yourself, and you don\u0027t needto set up a field mapping. If you\u0027re using the REST APIs and you want implicit field mappings, create andname the document key field \u0022Key\u0022 in the search index definition as shown in theprevious step ({ \u0022name\u0022: \u0022Key\u0022, \u0022type\u0022: \u0022Edm.String\u0022, \u0022key\u0022: true,\u0022searchable\u0022: false }). The indexer populates the Key field automatically, with nofield mappings required.\n"
}