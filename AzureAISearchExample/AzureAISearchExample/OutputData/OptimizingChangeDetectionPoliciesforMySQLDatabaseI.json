{
  "Id": "977",
  "Title": "\u0022Optimizing Change Detection Policies for MySQL Database Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAn indexer\u0027s change detection policy relies on having a high water mark column thatcaptures the row version, or the date and time when a row was last updated. It\u0027s often aDATE, DATETIME, or TIMESTAMP column at a granularity sufficient for meeting therequirements of a high water mark column.In your MySQL database, the high water mark column must meet the followingrequirements:All data inserts must specify a value for the column.\r\n\u0022errors\u0022:[],             \u0022itemsProcessed\u0022:1599501,             \u0022itemsFailed\u0022:0,             \u0022initialTrackingState\u0022:null,             \u0022finalTrackingState\u0022:null         },         \u0022executionHistory\u0022:         [             {                 \u0022status\u0022:\u0022success\u0022,                 \u0022errorMessage\u0022:null,                 \u0022startTime\u0022:\u00222022-02-21T00:23:24.\r\n957Z\u0022,                 \u0022endTime\u0022:\u00222022-02-21T00:36:47.752Z\u0022,                 \u0022errors\u0022:[],                 \u0022itemsProcessed\u0022:1599501,                 \u0022itemsFailed\u0022:0,                 \u0022initialTrackingState\u0022:null,                 \u0022finalTrackingState\u0022:null             },             .\r\n.. earlier history items         ]     } Indexing new and changed rowsAll updates to an item also change the value of the column.The value of this column increases with each insert or update.\r\nQueries with the following WHERE and ORDER BY clauses can be executed efficiently:WHERE [High Water Mark Column] \u003E [Current High Water Mark Value] ORDER BY[High Water Mark Column]The following example shows a data source definition with a change detection policy:HTTPWhen rows are deleted from the table or view, you normally want to delete those rowsfrom the search index as well. However, if the rows are physically removed from thetable, an indexer has no way to infer the presence of records that no longer exist. Thesolution is to use a soft-delete technique to logically delete rows without removing themfrom the table. Add a column to your table or view and mark rows as deleted using thatcolumn.POST https://[search service name].search.windows.\n"
}