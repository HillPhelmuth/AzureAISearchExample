{
  "Id": "356",
  "Title": "\u0022Building Custom Analyzers for Azure Search: Step-by-Step Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfWe\u0027llfix this in step 7 by building out a separate analyzer for searches that doesn\u0027t include then-gram token filter.InputOutput[12345][123, 1234, 12345, 234, 2345, 345][3215550199][321, 3215, 32155, 321555, 3215550, 32155501, 321555019, 3215550199, 215,2155, 21555, 215550, ... ]Token filters\u0022tokenFilters\u0022: [  {    \u0022@odata.type\u0022: \u0022#Microsoft.Azure.Search.\r\nNGramTokenFilterV2\u0022,    \u0022name\u0022: \u0022custom_ngram_filter\u0022,    \u0022minGram\u0022: 3,    \u0022maxGram\u0022: 20  }]NGramTokenFilterV2\uFF89Expand tableAnalyzerWith our character filters, tokenizer, and token filters in place, we\u0027re ready to define ouranalyzer.\r\nJSONInputOutput12345[123, 1234, 12345, 234, 2345, 345](321) 555-0199[321, 3215, 32155, 321555, 3215550, 32155501, 321555019, 3215550199, 215,2155, 21555, 215550, .\r\n.. ]Notice that any of the tokens in the output can now be searched. If our query includesany of those tokens, the phone number will be returned.With the custom analyzer defined, recreate the index so that the custom analyzer will beavailable for testing in the next step. For simplicity, the Postman collection creates a newindex named tutorial-first-analyzer with the analyzer we defined.After creating the index, you can now test out the analyzer we created using thefollowing request:HTTP\u0022analyzers\u0022: [  {    \u0022@odata.type\u0022: \u0022#Microsoft.Azure.Search.\n"
}