{
  "Id": "827",
  "Title": "\u0022Optimizing Blob Indexing with Azure AI Search: Key Field Mapping\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfRather, the value of the idfield will be mapped to the key field\uFF17 NoteThe approach used by AzureSearch_DocumentKey of ensuring uniqueness perextracted entity is subject to change and therefore you should not rely on it\u0027s valuefor your application\u0027s needs.\r\nSpecify the index key field in your dataid, temperature, pressure, timestamp1, 100, 100,\u00222019-02-13T00:00:00Z\u0022 2, 33, 30,\u00222019-02-14T00:00:00Z\u0022id, temperature, pressure, timestamp1, 1, 1,\u00222018-01-12T00:\r\n00:00Z\u0022 2, 120, 3,\u00222013-05-11T00:00:00Z\u0022 Similar to the previous example, this mapping won\u0027t result in four documents showingup in the index because the id field isn\u0027t unique across blobs.\r\nWhen this is the case, anyjson entry that specifies an id will result in a merge on the existing document instead ofan upload of a new document, and the state of the index will reflect the latest read entrywith the specified id.If you aren\u0027t already familiar with the basic structure and workflow of blob indexing, youshould review Indexing Azure Blob Storage with Azure AI Search first. For moreinformation about parsing modes for different blob content types, review the followingarticles. Next stepsIndexing CSV blobsIndexing JSON blobsHow to index plain text blobs and filesin Azure Cognitive SearchArticle\u202209/15/2022Applies to: Blob indexers, File indexersWhen using an indexer to extract searchable blob text or file content for full text search,you can assign a parsing mode to get better indexing outcomes. By default, the indexerparses the content as a single chunk of text.\n"
}