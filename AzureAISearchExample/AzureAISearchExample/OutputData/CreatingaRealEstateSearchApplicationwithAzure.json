{
  "Id": "80",
  "Title": "\u0022Creating a Real Estate Search Application with Azure\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfYou can use a free service for this quickstart.Microsoft Edge (latest version) or Google Chrome.A search index to use as the basis of your generated application.This quickstart uses the built-in Real Estate sample data and index because it hasthumbnail images (the wizard supports adding images to the results page).\r\nTocreate the index used in this exercise, run the Import data wizard, choosing therealestate-us-sample data source.PrerequisitesWhen the index is ready to use, move on to the next step.1. Sign in to the Azure portal with your Azure account.2. Find your search service and on the Overview page, from the links on the middleof the page, select Indexes.\r\n3. Choose realestate-us-sample-index from the list of existing indexes.4. On the index page, at the top, select Create demo app (preview) to start thewizard.5. On the first wizard page, select Enable Cross Origin Resource Sharing (CORS) toadd CORS support to your index definition. This step is optional, but your localweb app won\u0027t connect to the remote index without it.\r\nThe wizard provides a basic layout for rendered search results that includes space for athumbnail image, a title, and description. Backing each of these elements is a field inyour index that provides the data.1. In Thumbnail, choose the thumbnail field in the realestate-us-sample index.\r\nThissample happens to include image thumbnails in the form of URL-addressedimages stored in a field called thumbnail. If your index doesn\u0027t have images, leavethis field blank.2. In Title, choose a field that conveys the uniqueness of each document. In thissample, the listing ID is a reasonable selection.Start the wizardConfigure search results3. In Description, choose a field that provides details that might help someone decidewhether to click through to that particular document.The search service supports faceted navigation, which is often rendered as a sidebar.Facets are based on filterable and facetable fields, as expressed in the index schema.\n"
}