{
  "Id": "199",
  "Title": "\u0022Automated Bulk Upload and Search Index Management Tutorial\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfupload_documents(documents=batch_array)        batch_counter \u002B= 1        print(f\u0022Final batch sent! - #{batch_counter}\u0022)    print(\u0022Done!\u0022)if __name__ == \u0022__main__\u0022:    start_client = CreateClient(endpoint, key, index_name)    admin_client = start_client.create_admin_client()    search_client = start_client.\r\ncreate_search_client()    schema = create_schema_from_json_and_upload(        index_schema, index_name, admin_client, url=False    )    books_data = convert_csv_to_json(books_url)    batch_upload = batch_upload_json_data_to_index(books_data, search_client)    print(\u0022Upload complete\u0022)macOS/Linuxpython3 -m pip install -r requirements.txt 1.\r\nContinue using the integrated terminal in Visual Studio for the project directory\u0027ssubdirectory, search-website-functions-v4/bulk-upload, to run the following bashcommand to run the bulk_upload.py script:Bash2. As the code runs, the console displays progress.3. When the upload is complete, the last statement printed to the console is \u0022Done!Upload complete\u0022.\r\nOnce the upload completes, the search index is ready to use. Review your new index inAzure portal.1. In Azure portal, find the search service you created in the previous step.2. On the left, select Indexes, and then select the good-books index.3. By default, the index opens in the Search explorer tab. Select Search to returndocuments from the index.Run the bulk import script for SearchmacOS/Linuxpython3 bulk-upload.pyReview the new Search Index\uF80AUse the following git command in the Visual Studio Code integrated terminal at thebulk-insert directory, to roll back the changes. They aren\u0027t needed to continue thetutorial and you shouldn\u0027t save or push these secrets to your repo.\n"
}