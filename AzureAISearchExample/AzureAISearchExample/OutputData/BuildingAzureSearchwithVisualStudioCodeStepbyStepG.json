{
  "Id": "136",
  "Title": "\u0022Building Azure Search with Visual Studio Code: Step-by-Step Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfTheremaining tasks are accomplished from Visual Studio Code, unless specified.Bash1. In Visual Studio Code, open the Activity bar, and select the Azure icon.2. Sign in to Azure, if you aren\u0027t already signed in.3. In the Resources section, select Add (\u002B), and then select Create Resource Group.git clone https://github.\r\ncom/YOUR-GITHUB-ALIAS/azure-search-dotnet-samplescd azure-search-dotnet-samplescode .Create a resource group for your Azureresources4. Enter a resource group name, such as cognitive-search-demo-rg.5. Enter a region:For Node.js, select West US 2. This is the recommended region for the AzureFunction programming model (PM) v4 preview.\r\nFor C# and Python, we recommend the following regions, supported byAzure Static Web Apps as of this writing: West US 2, East US 2, West Europe,Central US, East AsiaUse this resource group for all resources created during this tutorial. A resource groupgives you a logical unit to manage the resources, including deleting them when you\u0027refinished.\r\nCreate a Search Index and load with documentsDeploy your Static Web AppNext steps2 - Create and load Search Index with.NETArticle\u202211/15/2023Continue to build your search-enabled website by following these steps:Create a search resourceCreate a new indexImport data with .NET using the sample script and Azure SDKAzure.Search.Documents. Create a new search resource from the command line using either the Azure CLI orAzure PowerShell. You also retrieve a query key used for read-access to the index, andget the built-in admin key used for adding objects.You must have Azure CLI or Azure PowerShell installed on your device. If you aren\u0027t alocal admin on your device, choose Azure PowerShell and use the Scope parameter torun as the current user.\n"
}