{
  "Id": "207",
  "Title": "\u0022Configuring Azure Function App for Cognitive Search API in Python\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfms/azs-good-booksThe Function app uses the Azure SDK for Cognitive Search:PYPI package azure-search-documentsReference DocumentationThe Function app authenticates through the SDK to the cloud-based Cognitive SearchAPI using your resource name, API key, and index name. The secrets are stored in theStatic Web App settings and pulled in to the Function as environment variables.\r\nThe Azure Function app settings environment variables are pulled in from a file,__init__.py, shared between the three API functions.PythonAzure SDK azure-search-documentsConfigure secrets in a configuration fileimport osdef azure_config():    configs = {}    configs[\u0022search_facets\u0022] = os.\r\nenviron.get(\u0022SearchFacets\u0022, \u0022\u0022)    configs[\u0022search_index_name\u0022] = os.environ.get(\u0022SearchIndexName\u0022, \u0022\u0022)    configs[\u0022search_service_name\u0022] = os.environ.get(\u0022SearchServiceName\u0022, \u0022\u0022)    configs[\u0022search_api_key\u0022] = os.environ.get(\u0022SearchApiKey\u0022, \u0022\u0022)    return configsThe Search API takes a search term and searches across the documents in the SearchIndex, returning a list of matches.The Azure Function pulls in the search configuration information, and fulfills the query.PythonAzure Function: Search the catalogimport loggingimport azure.functions as funcfrom azure.core.credentials import AzureKeyCredentialfrom azure.search.\r\ndocuments import SearchClientfrom shared_code import azure_configimport jsonenvironment_vars = azure_config()# Set Azure Search endpoint and keyendpoint = f\u0027https://{environment_vars[\u0022search_service_name\u0022]}.search.windows. net\u0027key = environment_vars[\u0022search_api_key\u0022]# Your index nameindex_name = \u0022good-books\u0022# Create Azure SDK clientsearch_client = SearchClient(endpoint, index_name, AzureKeyCredential(key))# returns obj like {authors: \u0027array\u0027, language_code:\u0027string\u0027}def read_facets(facetsString):    facets = facetsString.split(\u0022,\u0022)    output = {}    for x in facets:        if x.find(\u0022*\u0022) != -1:            newVal = x.\n"
}