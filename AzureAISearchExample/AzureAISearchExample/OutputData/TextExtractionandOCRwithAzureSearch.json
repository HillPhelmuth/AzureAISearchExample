{
  "Id": "1711",
  "Title": "\u0022Text Extraction and OCR with Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIfthe language is explicitly set to unk, all languages found are auto-detected and returned.lineEndingThe value to use as a line separator. Possible values: \u0022Space\u0022,\u0022CarriageReturn\u0022, \u0022LineFeed\u0022. The default is \u0022Space\u0022.In previous versions, there was a parameter called \u0022textExtractionAlgorithm\u0022 to specifyextraction of \u0022printed\u0022 or \u0022handwritten\u0022 text. This parameter is deprecated because thecurrent Read API algorithm extracts both types of text at once. If your skill includes thisparameter, you don\u0027t need to remove it, but it won\u0027t be used during skill execution.InputnameDescriptionimageComplex Type.\r\nCurrently only works with \u0022/document/normalized_images\u0022 field,produced by the Azure Blob indexer when imageAction is set to a value other thannone.OutputnameDescriptiontextPlain text extracted from the image.layoutTextComplex type that describes the extracted text and the location where the textwas found.\r\nIf you call OCR on images embedded in PDFs or other application files, the OCR outputwill be located at the bottom of the page, after any text that was extracted andprocessed.JSONSkill inputsSkill outputsSample definition{  \u0022skills\u0022: [JSON    {      \u0022description\u0022: \u0022Extracts text (plain and structured) from image.\u0022,      \u0022@odata.type\u0022: \u0022#Microsoft.Skills.Vision. OcrSkill\u0022,      \u0022context\u0022: \u0022/document/normalized_images/*\u0022,      \u0022defaultLanguageCode\u0022: null,      \u0022detectOrientation\u0022: true,      \u0022inputs\u0022: [        {          \u0022name\u0022: \u0022image\u0022,          \u0022source\u0022: \u0022/document/normalized_images/*\u0022        }      ],      \u0022outputs\u0022: [        {          \u0022name\u0022: \u0022text\u0022,          \u0022targetName\u0022: \u0022myText\u0022        },        {          \u0022name\u0022: \u0022layoutText\u0022,          \u0022targetName\u0022: \u0022myLayoutText\u0022        }      ]    }  ]}Sample text and layoutText output{  \u0022text\u0022: \u0022Hello World.\n"
}