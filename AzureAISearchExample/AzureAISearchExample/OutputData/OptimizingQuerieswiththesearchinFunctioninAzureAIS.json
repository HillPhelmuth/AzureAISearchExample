{
  "Id": "1635",
  "Title": "\u0022Optimizing Queries with the search.in Function in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfOneway to write a query like this is to use the eq and or operators:odata-filter-exprHowever, there is a shorter way to write this, using the search.in function:odata-filter-expr    group_ids/any(g: g eq \u0027123\u0027 or g eq \u0027456\u0027 or g eq \u0027789\u0027)    group_ids/any(g: search.in(g, \u0027123, 456, 789\u0027))\uFF09 ImportantBesides being shorter and easier to read, using search.\r\nin also providesperformance benefits and avoids certain size limitations of filters when there arehundreds or even thousands of values to include in the filter. For this reason, westrongly recommend using search.in instead of a more complex disjunction ofequality expressions.\uFF17 NoteVersion 4.\r\n01 of the OData standard has recently introduced the in operator,which has similar behavior as the search.in function in Azure AI Search. However,Azure AI Search does not support this operator, so you must use the search.infunction instead.SyntaxThe following EBNF (Extended Backus-Naur Form) defines the grammar of thesearch.\r\nin function:An interactive syntax diagram is also available:The search.in function tests whether a given string field or range variable is equal toone of a given list of values. Equality between the variable and each value in the list isdetermined in a case-sensitive fashion, the same way as for the eq operator. Thereforean expression like search. in(myfield, \u0027a, b, c\u0027) is equivalent to myfield eq \u0027a\u0027 ormyfield eq \u0027b\u0027 or myfield eq \u0027c\u0027, except that search.in will yield much betterperformance.There are two overloads of the search.in function:search.in(variable, valueList)search.in(variable, valueList, delimiters)The parameters are defined in the following table:ParameternameTypeDescriptionvariableEdm.\n"
}