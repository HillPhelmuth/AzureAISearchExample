{
  "Id": "700",
  "Title": "\u0022Utilizing Azure AI Search for Vector Queries and Results\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBecause Azure AI Search can\u0027t convert a vector to human-readabletext, try to return fields from the same document that provide evidence of the match.For example, if the vector query targets the \u0022titleVector\u0022 field, you could select \u0022title\u0022 forthe search results.Fields must be attributed as \u0022retrievable\u0022 to be included in the results.\r\nYou can use Search Explorer to query an index. Search explorer has two views:Query view (default) and JSON view.Use the JSON view for vector queries, pasting in a JSON definition of thevector query you want to execute.Use the default Query view for a quick confirmation that the index containsvectors. The query view is for full text search.\r\nAlthough you can\u0027t use it for            \u0022id\u0022: \u00222\u0022,            \u0022title\u0022: \u0022Azure Functions\u0022,            \u0022content\u0022: \u0022Azure Functions is a serverless compute service that enables you to run code on-demand without having to manage infrastructure. It allows you to build and deploy event-driven applications that automatically scale with your workload.\r\nFunctions support various languages, including C#, F#, Node.js, Python, and Java. It offers a variety of triggers and bindings to integrate with other Azure services and external services. You only pay for the compute time you consume.\u0022,            \u0022category\u0022: \u0022Compute\u0022,            \u0022titleVector\u0022: [                -0.\r\n020159931853413582,                . . .            ],            \u0022contentVector\u0022: [                -0.02780858241021633,,                 . . .            ],            \u0022@search.action\u0022: \u0022upload\u0022        }        . . .    ]}Check your index for vector contentAzure portalvector queries, you can send an empty search (search=*) to check for content. The content of all fields, including vector fields, is returned as plain text.As a next step, we recommend Query vector data in a search index.Code samples in the azure-search-vector repository demonstrate end-to-endworkflows that include schema definition, vectorization, indexing, and queries.\nThere\u0027s demo code for Python, C#, and JavaScript.Next stepsConfigure a vectorizer in a search indexArticle\u202211/15/2023A vectorizer is a component of a search index that specifies a vectorization agent, suchas a deployed embedding model on Azure OpenAI that converts text to vectors.\n"
}