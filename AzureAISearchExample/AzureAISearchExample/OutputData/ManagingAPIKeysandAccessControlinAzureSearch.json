{
  "Id": "1497",
  "Title": "\u0022Managing API Keys and Access Control in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfYou can get the endpoint and an API key from the Search service in the Azure Portal.Please refer the documentation for instructions on how to get an API key.Alternatively, you can use the following Azure CLI command to retrieve the API key fromthe Search service:Powershelldotnet add package Azure.Search.\r\nDocumentsPrerequisitesaz search service create --name \u003Cmysearch\u003E --resource-group \u003Cmysearch-rg\u003E --sku free --location westusAuthenticate the clientGet an API Keyaz search admin-key show --service-name \u003Cmysearch\u003E --resource-group \u003Cmysearch-rg\u003EThere are two types of keys used to access your search service: admin (read-write) andquery (read-only) keys.\r\nRestricting access and operations in client apps is essential tosafeguarding the search assets on your service. Always use a query key rather than anadmin key for any query originating from a client app.Note: The example Azure CLI snippet above retrieves an admin key so it\u0027s easier to getstarted exploring APIs, but it should be managed carefully.\r\nTo instantiate the SearchClient, you\u0027ll need the endpoint, API key and index name:C#You can also create a SearchClient, SearchIndexClient, or SearchIndexerClient usingAzure Active Directory (AAD) authentication. Your user or service principal must beassigned the \u0022Search Index Data Reader\u0022 role.\r\nUsing the DefaultAzureCredential youcan authenticate a service using Managed Identity or a service principal, authenticate asa developer working on an application, and more all without changing code. Please referthe documentation for instructions on how to connect to Azure Cognitive Search usingAzure role-based access control (Azure RBAC). Before you can use the DefaultAzureCredential, or any credential type fromAzure.Identity, you\u0027ll first need to install the Azure.Identity package.To use DefaultAzureCredential with a client ID and secret, you\u0027ll need to set theAZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET environment variables;alternatively, you can pass those values to the ClientSecretCredential also inAzure.Identity.\nCreate a SearchClientstring indexName = \u0022nycjobs\u0022;// Get the service endpoint and API key from the environmentUri endpoint = new Uri(Environment.GetEnvironmentVariable(\u0022SEARCH_ENDPOINT\u0022));string key = Environment.\n"
}