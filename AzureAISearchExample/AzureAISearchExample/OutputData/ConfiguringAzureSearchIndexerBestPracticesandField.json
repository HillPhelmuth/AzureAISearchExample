{
  "Id": "903",
  "Title": "\u0022Configuring Azure Search Indexer: Best Practices and Field Mapping\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfString\u0022, \u0022searchable\u0022: true, \u0022filterable\u0022: false },         { \u0022name\u0022: \u0022metadata_storage_name\u0022, \u0022type\u0022: \u0022Edm.String\u0022, \u0022searchable\u0022: false, \u0022filterable\u0022: true, \u0022sortable\u0022: true  },         { \u0022name\u0022: \u0022metadata_storage_size\u0022, \u0022type\u0022: \u0022Edm.Int64\u0022, \u0022searchable\u0022: false, \u0022filterable\u0022: true, \u0022sortable\u0022: true  }, 2.\r\nCreate a document key field (\u0022key\u0022: true). For blob content, the best candidates aremetadata properties.metadata_storage_path (default) full path to the object or file. The key field(\u0022ID\u0022 in this example) will be populated with values frommetadata_storage_path because it\u0027s the default.metadata_storage_name, usable only if names are unique.\r\nIf you want this fieldas the key, move \u0022key\u0022: true to this field definition.A custom metadata property that you add to blobs. This option requires thatyour blob upload process adds that metadata property to all blobs. Since thekey is a required property, any blobs that are missing a value will fail to beindexed.\r\nIf you use a custom metadata property as a key, avoid makingchanges to that property. Indexers will add duplicate documents for the sameblob if the key property changes.Metadata properties often include characters, such as / and -, that are invalid fordocument keys.\r\nBecause the indexer has a \u0022base64EncodeKeys\u0022 property (true bydefault), it automatically encodes the metadata property, with no configuration orfield mapping required.3. Add a \u0022content\u0022 field to store extracted text from each file through the blob\u0027s\u0022content\u0022 property. You aren\u0027t required to use this name, but doing so lets youtake advantage of implicit field mappings.4. Add fields for standard metadata properties. The indexer can read custommetadata properties, standard metadata properties, and content-specific metadataproperties.Once the index and data source have been created, you\u0027re ready to create the indexer.Indexer configuration specifies the inputs, parameters, and properties controlling runtime behaviors.\n"
}