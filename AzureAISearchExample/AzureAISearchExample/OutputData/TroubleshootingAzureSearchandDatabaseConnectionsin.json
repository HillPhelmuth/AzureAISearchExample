{
  "Id": "253",
  "Title": "\u0022Troubleshooting Azure Search and Database Connections in Visual Studio\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfA consolewindow reports the status of each operation.Your code runs locally in Visual Studio, connecting to your search service on Azure,which in turn connects to Azure SQL Database and retrieves the dataset. With this manyoperations, there are several potential points of failure. If you get an error, check thefollowing conditions first:Search service connection information that you provide is the full URL.\r\nIf youentered just the service name, operations stop at index creation, with a failure toconnect error.Database connection information in appsettings.json. It should be the ADO.NETconnection string obtained from the portal, modified to include a username andpassword that are valid for your database.\r\nThe user account must have permissionto retrieve data. Your local client IP address must be allowed inbound accessthrough the firewall.Resource limits. Recall that the Free tier has limits of three indexes, indexers, anddata sources. A service at the maximum limit can\u0027t create new objects.\r\nUse Azure portal to verify object creation, and then use Search explorer to query theindex.1. Sign in to the Azure portal, and in your search service Overview page, open eachlist in turn to verify the object is created. Indexes, Indexers, and Data Sources willhave \u0022hotels\u0022, \u0022azure-sql-indexer\u0022, and \u0022azure-sql\u0022, respectively.\r\n4 - Build the solution5 - Search2. On the Indexes tab, select the hotels index. On the hotels page, Search explorer isthe first tab.3. Select Search to issue an empty query.The three entries in your index are returned as JSON documents. Search explorerreturns documents in JSON so that you can view the entire structure. 4. Next, enter a search string: search=river\u0026$count=true.This query invokes full text search on the term river, and the result includes acount of the matching documents. Returning the count of matching documents ishelpful in testing scenarios when you have a large index with thousands or millionsof documents.\nIn this case, only one document matches the query.5. Lastly, enter a search string that limits the JSON output to fields of interest:search=river\u0026$count=true\u0026$select=hotelId, baseRate, description.The query response is reduced to selected fields, resulting in more concise output.\n"
}