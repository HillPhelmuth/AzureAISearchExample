{
  "Id": "1229",
  "Title": "\u0022Limitations and Examples of Geo-Spatial Expressions in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfdistance function dependson the type of lambda expression. For any, you can use only lt or le. For all,you can use only gt or ge. You can negate expressions involving geo.distance,but you\u0027ll have to change the comparison operator (geo.distance(...) lt xbecomes not (geo.distance(...) ge x) and geo.distance(...\r\n) le x becomes not(geo.distance(...) gt x)).In the body of an all, the geo.intersects function must be negated. Conversely,in the body of an any, the geo.intersects function must not be negated.In the body of an any, geo-spatial expressions can be combined using or. In thebody of an all, such expressions can be combined using and.\r\nThe above limitations exist for similar reasons as the equality/inequality limitation onstring collections. See Understanding OData collection filters in Azure AI Search for adeeper look at these reasons.Here are some examples of filters on Edm.GeographyPoint collections that are allowed:locations/any(l: geo.\r\ndistance(l, geography\u0027POINT(-122 49)\u0027) lt 10)locations/any(l: not (geo.distance(l, geography\u0027POINT(-122 49)\u0027) ge 10) orgeo.intersects(l, geography\u0027POLYGON((-122.031577 47.578581, -122.03157747.678581, -122.131577 47.678581, -122.031577 47.578581))\u0027))locations/all(l: geo.distance(l, geography\u0027POINT(-122 49)\u0027) ge 10 and notgeo. intersects(l, geography\u0027POLYGON((-122.031577 47.578581, -122.03157747.678581, -122.131577 47.678581, -122.031577 47.578581))\u0027))Expressions such as the following aren\u0027t allowed for Edm.GeographyPoint collections:locations/any(l: l eq geography\u0027POINT(-122 49)\u0027)locations/any(l: not geo.intersects(l, geography\u0027POLYGON((-122.\n"
}