{
  "Id": "666",
  "Title": "\u0022JSON Serialization and Naming Policies in Azure Search Libraries\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfJson for JSON serialization, relying on thecapabilities of those APIs to handle text transformations previously implementedData importQuery requests and responsesJSON serializationthrough a native SerializePropertyNamesAsCamelCaseAttribute class, which has nocounterpart in the new library.To serialize property names into camelCase, you can use the JsonPropertyNameAttribute(similar to this example).\r\nAlternatively, you can set a JsonNamingPolicy provided in JsonSerializerOptions. Thefollowing System.Text.Json code example, taken from the Microsoft.Azure.Core.Spatialreadme demonstrates the use of camelCase without having to attribute everyproperty:C#If you\u0027re using Newtonsoft.Json for JSON serialization, you can pass in global namingpolicies using similar attributes, or by using properties on JsonSerializerSettings. Foran example equivalent to the previous one, see the Deserializing documents examplein the Newtonsoft.Json readme.// Get the Azure Cognitive Search service endpoint and read-only API key.Uri endpoint = new Uri(Environment.\r\nGetEnvironmentVariable(\u0022SEARCH_ENDPOINT\u0022));AzureKeyCredential credential = new AzureKeyCredential(Environment.GetEnvironmentVariable(\u0022SEARCH_API_KEY\u0022));// Create serializer options with our converter to deserialize geographic points.JsonSerializerOptions serializerOptions = new JsonSerializerOptions{    Converters =    {        new MicrosoftSpatialGeoJsonConverter()    },    PropertyNamingPolicy = JsonNamingPolicy.CamelCase};SearchClientOptions clientOptions = new SearchClientOptions{    Serializer = new JsonObjectSerializer(serializerOptions)};SearchClient client = new SearchClient(endpoint, \u0022mountains\u0022, credential, clientOptions);Response\u003CSearchResults\u003CMountain\u003E\u003E results = client. Search\u003CMountain\u003E(\u0022Rainier\u0022);Inside v11Each version of an Azure Cognitive Search client library targets a corresponding versionof the REST API. The REST API is considered foundational to the service, with individualSDKs wrapping a version of the REST API. As a .NET developer, it can be helpful toreview the more verbose REST API documentation for more in depth coverage ofspecific objects or operations.\n"
}