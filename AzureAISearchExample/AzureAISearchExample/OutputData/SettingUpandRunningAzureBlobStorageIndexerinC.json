{
  "Id": "275",
  "Title": "\u0022Setting Up and Running Azure Blob Storage Indexer in C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf}await indexerClient.CreateOrUpdateIndexerAsync(cosmosDbIndexer);Console.WriteLine(\u0022Running Azure Cosmos DB indexer...\\n\u0022);try{    // Run the indexer.    await indexerClient.RunIndexerAsync(cosmosDbIndexer.Name);}catch (RequestFailedException ex) when (ex.Status == 429){    Console.WriteLine(\u0022Failed to run indexer: {0}\u0022, ex.\r\nMessage);}Create Blob storage data source and indexerTo get the room details, the program first sets up a Blob storage data source toreference a set of individual JSON blob files.C#After the data source is created, the program sets up a blob indexer named hotel-rooms-blob-indexer, as shown below.The JSON blobs contain a key field named Id instead of HotelId.\r\nThe code uses theFieldMapping class to tell the indexer to direct the Id field value to the HotelIddocument key in the index.Blob storage indexers can use IndexingParameters to specify a parsing mode. Youshould set different parsing modes depending on whether blobs represent a singledocument, or multiple documents within the same blob. In this example, each blobrepresents a single JSON document, so the code uses the json parsing mode. For moreinformation about indexer parsing parameters for JSON blobs, see Index JSON blobs.This example defines a schedule for the indexer, so that it will run once per day.\r\nYou canremove the schedule property from this call if you don\u0027t want the indexer toautomatically run again in the future.C#private static async Task CreateAndRunBlobIndexerAsync(string indexName, SearchIndexerClient indexerClient){    SearchIndexerDataSourceConnection blobDataSource = new SearchIndexerDataSourceConnection(        name: configuration[\u0022BlobStorageAccountName\u0022],        type: SearchIndexerDataSourceType. AzureBlob,        connectionString: configuration[\u0022BlobStorageConnectionString\u0022],        container: new SearchIndexerDataContainer(\u0022hotel-rooms\u0022));    // The blob data source does not need to be deleted if it already exists,    // but the connection string might need to be updated if it has changed.\n"
}