{
  "Id": "1634",
  "Title": "\u0022Mastering OData Filter Expressions in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfodata-filter-exprExamples    rating ge 3 and rating le 5    ratings/all(r: r lt 3 or r gt 5)    geo.intersects(location, geography\u0027POLYGON((-122.031577 47.578581, -122.031577 47.678581, -122.131577 47.678581, -122.031577 47.578581))\u0027) and not search.\r\nismatch(\u0027public\u0027)Match documents for hotels in Vancouver, Canada where there is a deluxe room with abase rate less than 160:odata-filter-exprFilters in Azure AI SearchOData expression language overview for Azure AI SearchOData expression syntax reference for Azure AI SearchSearch Documents (Azure AI Search REST API)    Address/City eq \u0027Vancouver\u0027 and Address/Country eq \u0027Canada\u0027 and Rooms/any(room: room/Type eq \u0027Deluxe Room\u0027 and room/BaseRate lt 160)Next stepsOData search.\r\nin function in Azure AISearchArticle\u202211/15/2023A common scenario in OData filter expressions is to check whether a single field in eachdocument is equal to one of many possible values. For example, this is how someapplications implement security trimming -- by checking a field containing one or moreprincipal IDs against a list of principal IDs representing the user issuing the query. Oneway to write a query like this is to use the eq and or operators:odata-filter-exprHowever, there is a shorter way to write this, using the search.in function:odata-filter-expr    group_ids/any(g: g eq \u0027123\u0027 or g eq \u0027456\u0027 or g eq \u0027789\u0027)    group_ids/any(g: search.in(g, \u0027123, 456, 789\u0027))\uFF09 ImportantBesides being shorter and easier to read, using search.\n"
}