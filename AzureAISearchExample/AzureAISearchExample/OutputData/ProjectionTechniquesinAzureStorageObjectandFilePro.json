{
  "Id": "1135",
  "Title": "\u0022Projection Techniques in Azure Storage: Object and File Projections\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfObject projections are limited toa single projection in a container and can\u0027t be sliced.To define an object projection, use the objects array in the projections property.The source is the path to a node of the enrichment tree that is the root of theprojection. Although it isn\u0027t required, the node path is usually the output of a Shaperskill.\r\nThis is because most skills don\u0027t output valid JSON objects on their own, whichmeans that some form of shaping is necessary. In many cases, the same Shaper skill thatcreates a table projection can be used to generate an object projection. Alternatively,the source can also be set to a node with an inline shaping to provide the structure.\r\nThe destination is always a blob container.The following example projects individual hotel documents, one hotel document perblob, into a container called hotels.JSONThe source is the output of a Shaper skill, named \u0022objectprojection\u0022. Each blob will havea JSON representation of each field input.\r\nJSON\u0022knowledgeStore\u0022: {   \u0022storageConnectionString\u0022: \u0022an Azure storage connection string\u0022,   \u0022projections\u0022 : [     {       \u0022tables\u0022: [ ]     },     {       \u0022objects\u0022: [         {         \u0022storageContainer\u0022: \u0022hotels\u0022,         \u0022source\u0022: \u0022/document/objectprojection\u0022,         }       ]     },     {         \u0022files\u0022: [ ]     }   ] }     {       \u0022@odata.\r\ntype\u0022: \u0022#Microsoft.Skills.Util.ShaperSkill\u0022, File projections are always binary, normalized images, where normalization refers topotential resizing and rotation for use in skillset execution. File projections, similar toobject projections, are created as blobs in Azure Storage, and contain the image.To define a file projection, use the files array in the projections property.The source is always /document/normalized_images/*. File projections only act on thenormalized_images collection. Neither indexers nor a skillset will pass through theoriginal non-normalized image.The destination is always a blob container, with a folder prefix of the base64 encodedvalue of the document ID. File projections can\u0027t share the same container as objectprojections and need to be projected into a different container.The following example projects all normalized images extracted from the documentnode of an enriched document, into a container called myImages.\n"
}