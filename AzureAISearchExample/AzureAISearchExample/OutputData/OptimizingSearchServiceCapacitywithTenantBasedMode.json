{
  "Id": "630",
  "Title": "\u0022Optimizing Search Service Capacity with Tenant-Based Models in Azure AI\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfA key attribute of the index-per-tenant model is the ability for the application developerto oversubscribe the capacity of a search service among the application\u2019s tenants. If thetenants have an uneven distribution of workload, the optimal combination of tenantscan be distributed across a search service\u2019s indexes to accommodate a number of highlyactive, resource-intensive tenants while simultaneously serving a long tail of less activetenants.\r\nThe trade-off is the inability of the model to handle situations where eachtenant is concurrently highly active.The index-per-tenant model provides the basis for a variable cost model, where anentire Azure AI Search service is bought up-front and then subsequently filled withtenants. This allows for unused capacity to be designated for trials and free accounts.Model 1: One index per tenantFor applications with a global footprint, the index-per-tenant model may not be themost efficient. If an application\u0027s tenants are distributed across the globe, a separateservice may be necessary for each region, which may duplicate costs across each ofthem.\r\nAzure AI Search allows for the scale of both the individual indexes and the total numberof indexes to grow. If an appropriate pricing tier is chosen, partitions and replicas can beadded to the entire search service when an individual index within the service grows toolarge in terms of storage or traffic.\r\nIf the total number of indexes grows too large for a single service, another service has tobe provisioned to accommodate the new tenants. If indexes have to be moved betweensearch services as new services are added, the data from the index has to be manuallycopied from one index to the other as Azure AI Search doesn\u0027t allow for an index to bemoved. In a service-per-tenant architecture, each tenant has its own search service.In this model, the application achieves the maximum level of isolation for its tenants.Each service has dedicated storage and throughput for handling search requests. Eachtenant has individual ownership of API keys.For applications where each tenant has a large footprint or the workload has littlevariability from tenant to tenant, the service-per-tenant model is an effective choice asresources aren\u0027t shared across various tenants\u2019 workloads.A service per tenant model also offers the benefit of a predictable, fixed cost model.\n"
}