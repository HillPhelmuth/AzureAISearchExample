{
  "Id": "273",
  "Title": "\u0022Creating Azure Cosmos DB Data Source and Indexer in C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf. .private static async Task CreateIndexAsync(string indexName, SearchIndexClient indexClient){    // Create a new search index structure that matches the properties of the Hotel class.    // The Address and Room classes are referenced from the Hotel class. The FieldBuilder    // will enumerate these to create a complex data structure for the index.Next the main program includes logic to create the Azure Cosmos DB data source forthe hotels data.First it concatenates the Azure Cosmos DB database name to the connection string.Then it defines a SearchIndexerDataSourceConnection object.\r\nC#After the data source is created, the program sets up an Azure Cosmos DB indexernamed hotel-rooms-cosmos-indexer.The program will update any existing indexers with the same name, overwriting theexisting indexer with the content of the above code. It also includes reset and runactions, in case you want to run this example more than once.\r\nThe following example defines a schedule for the indexer, so that it will run once perday. You can remove the schedule property from this call if you don\u0027t want the indexer    FieldBuilder builder = new FieldBuilder();    var definition = new SearchIndex(indexName, builder.Build(typeof(Hotel)));    await indexClient.\r\nCreateIndexAsync(definition);}Create Azure Cosmos DB data source and indexerprivate static async Task CreateAndRunCosmosDbIndexerAsync(string indexName, SearchIndexerClient indexerClient){    // Append the database name to the connection string    string cosmosConnectString =        configuration[\u0022CosmosDBConnectionString\u0022]        \u002B \u0022;Database=\u0022        \u002B configuration[\u0022CosmosDBDatabaseName\u0022];    SearchIndexerDataSourceConnection cosmosDbDataSource = new SearchIndexerDataSourceConnection(        name: configuration[\u0022CosmosDBDatabaseName\u0022],        type: SearchIndexerDataSourceType. CosmosDb,        connectionString: cosmosConnectString,        container: new SearchIndexerDataContainer(\u0022hotels\u0022));    // The Azure Cosmos DB data source does not need to be deleted if it already exists,    // but the connection string might need to be updated if it has changed.    await indexerClient.CreateOrUpdateDataSourceConnectionAsync(cosmosDbDataSource);to automatically run again in the future.\n"
}