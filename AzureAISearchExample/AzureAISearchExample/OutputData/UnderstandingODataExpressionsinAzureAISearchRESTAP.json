{
  "Id": "1639",
  "Title": "\u0022Understanding OData Expressions in Azure AI Search REST API\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfHowever, even simple OData expressions like property paths are used inmany parts of the Azure AI Search REST API. For example, path expressions are used torefer to subfields of complex fields everywhere in the API, such as when listing subfieldsin a suggester, a scoring function, the $select parameter, or even fielded search inLucene queries.\r\nThis article describes all these forms of OData expressions using a formal grammar.There is also an interactive diagram to help visually explore the grammar.We can describe the subset of the OData language supported by Azure AI Search usingan EBNF (Extended Backus-Naur Form) grammar. Rules are listed \u0022top-down\u0022, startingwith the most complex expressions, and breaking them down into more primitiveexpressions.\r\nAt the top are the grammar rules that correspond to specific parameters ofthe Azure AI Search REST API:$filter, defined by the filter_expression rule.$orderby, defined by the order_by_expression rule.$select, defined by the select_expression rule.Field paths, defined by the field_path rule. Field paths are used throughout theAPI. They can refer to either top-level fields of an index, or subfields with one ormore complex field ancestors.After the EBNF is a browsable syntax diagram that allows you to interactively explorethe grammar and the relationships between its rules.\r\nFormal grammar/* Top-level rules */filter_expression ::= boolean_expressionorder_by_expression ::= order_by_clause(\u0027,\u0027 order_by_clause)*select_expression ::= \u0027*\u0027 | field_path(\u0027,\u0027 field_path)*field_path ::= identifier(\u0027/\u0027identifier)*/* Shared base rules */identifier ::= [a-zA-Z_][a-zA-Z_0-9]*/* Rules for $orderby */order_by_clause ::= (field_path | sortable_function) (\u0027asc\u0027 | \u0027desc\u0027)?sortable_function ::= geo_distance_call | \u0027search. score()\u0027/* Rules for $filter */boolean_expression ::=    collection_filter_expression    | logical_expression    | comparison_expression    | boolean_literal    | boolean_function_call    | \u0027(\u0027 boolean_expression \u0027)\u0027    | variable/* This can be a range variable in the case of a lambda, or a field path.\n"
}