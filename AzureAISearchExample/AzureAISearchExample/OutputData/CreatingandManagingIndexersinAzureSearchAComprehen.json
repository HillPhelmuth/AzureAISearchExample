{
  "Id": "795",
  "Title": "\u0022Creating and Managing Indexers in Azure Search: A Comprehensive Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfPrepare an indexCreate an indexerWhen you\u0027re ready to create an indexer on a remote search service, you need a searchclient. A search client can be the Azure portal, Postman or another REST client, or codethat instantiates an indexer client. We recommend the Azure portal or REST APIs forearly development and proof-of-concept testing.\r\n1. Sign in to the Azure portal.2. On the search service Overview page, choose from two options:Import data wizard. The wizard is unique in that it creates all of therequired elements. Other approaches require a predefined data sourceand index.New Indexer, a visual editor for specifying an indexer definition.\r\nThe following screenshot shows where you can find these features in theportal.By default, an indexer runs immediately when you create it on the search service. Youcan override this behavior by setting \u0022disabled\u0022 to true in the indexer definition.Indexer execution is the moment of truth where you find out if there are problems withconnections, field mappings, or skillset construction.\r\nThere are several ways to run an indexer:Run on indexer creation or update (default).Azure portalRun the indexerRun on demand when there are no changes to the definition, or precede with resetfor full indexing. For more information, see Run or reset indexers.Schedule indexer processing to invoke execution at regular intervals.Scheduled execution is usually implemented when you have a need for incrementalindexing so that you can pick up the latest changes. As such, scheduling has adependency on change detection.Monitor indexer status to check for status. Successful execution can still include warningand notifications. Be sure to check both successful and failed status notifications fordetails about the job.For content verification, run queries on the populated index that return entiredocuments or selected fields.If your data source supports change detection, an indexer can detect underlyingchanges in the data and process just the new or updated documents on each indexerrun, leaving unchanged content as-is. If indexer execution history says that a run wassuccessful with 0/0 documents processed, it means that the indexer didn\u0027t find any newor changed rows or blobs in the underlying data source.Change detection logic is built into the data platforms.\n"
}