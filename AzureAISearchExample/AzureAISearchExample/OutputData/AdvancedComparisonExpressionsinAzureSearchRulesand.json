{
  "Id": "1232",
  "Title": "\u0022Advanced Comparison Expressions in Azure Search: Rules and Syntax\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor example:ratings/any(r: r gt 2 and r le 5)ratings/any(r: r le 5 or r gt 7)Comparison expressions combined with and (conjunctions) can be furthercombined using or. This form is known in Boolean logic as \u0022Disjunctive NormalForm\u0022 (DNF). For example:ratings/any(r: (r gt 2 and r le 5) or (r gt 7 and r lt 10))Rules for all:Simple equality expressions can\u0027t be usefully combined with any otherexpressions.\r\nFor example, this expression is allowed:ratings/all(r: r eq 5)but this expression isn\u0027t:ratings/all(r: r eq 5 or r le 2)and while this expression is allowed, it isn\u0027t useful because the conditionsoverlap:ratings/all(r: r eq 5 and r le 7)Simple comparison expressions involving ne, lt, le, gt, or ge can becombined with and/or.\r\nFor example:ratings/all(r: r gt 2 and r le 5)ratings/all(r: r le 5 or r gt 7)Comparison expressions combined with or (disjunctions) can be furthercombined using and. This form is known in Boolean logic as \u0022ConjunctiveNormal Form\u0022 (CNF).\r\nFor example:ratings/all(r: (r le 2 or gt 5) and (r lt 7 or r ge 10))Lambda expressions over complex collections support a much more flexible syntax thanlambda expressions over collections of primitive types. You can use any filter constructinside such a lambda expression that you can use outside one, with only two exceptions.Rules for filtering complex collectionsFirst, the functions search. ismatch and search.ismatchscoring aren\u0027t supported insidelambda expressions. For more information, see Understanding OData collection filters inAzure AI Search.Second, referencing fields that aren\u0027t bound to the range variable (so-called freevariables) isn\u0027t allowed. For example, consider the following two equivalent OData filterexpressions:1.\n"
}