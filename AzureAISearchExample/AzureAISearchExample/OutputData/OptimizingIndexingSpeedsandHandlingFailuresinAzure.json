{
  "Id": "717",
  "Title": "\u0022Optimizing Indexing Speeds and Handling Failures in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThese limitsapply whether you\u0027re using the Add Documents REST API or the IndexDocuments\uFF17 NoteThe strategies described in this article assume a single large data source. If yoursolution requires indexing from multiple data sources, see Index multiple datasources in Azure AI Search for a recommended approach.\r\nIndex large data using the push APIsBatch multiple documents per requestmethod in the .NET SDK. For either API, you would package 1000 documents in thebody of each request.Batching documents will significantly shorten the amount of time it takes to workthrough a large data volume. Determining the optimal batch size for your data is a keycomponent of optimizing indexing speeds.\r\nThe two primary factors influencing theoptimal batch size are:The schema of your indexThe size of your dataBecause the optimal batch size depends on your index and your data, the best approachis to test different batch sizes to determine which one results in the fastest indexingspeeds for your scenario.\r\nTutorial: Optimize indexing with the push API provides samplecode for testing batch sizes using the .NET SDK.Indexers have built-in thread management, but when you\u0027re using the push APIs, yourapplication code will have to manage threads. Make sure there are sufficient threads tomake full use of the available capacity, especially if you\u0027ve recently increased partitionsor have upgraded to a higher tier search service.1. Increase the number of concurrent threads in your client code.2. As you ramp up the requests hitting the search service, you might encounter HTTPstatus codes indicating the request didn\u0027t fully succeed. During indexing, twocommon HTTP status codes are:503 Service Unavailable - This error means that the system is under heavyload and your request can\u0027t be processed at this time.207 Multi-Status - This error means that some documents succeeded, but atleast one failed.3. To handle failures, requests should be retried using an exponential backoff retrystrategy.The Azure .NET SDK automatically retries 503s and other failed requests, but you\u0027ll needto implement your own logic to retry 207s. Open-source tools such as Polly can alsobe used to implement a retry strategy.\n"
}