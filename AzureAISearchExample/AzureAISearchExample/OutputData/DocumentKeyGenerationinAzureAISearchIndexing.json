{
  "Id": "824",
  "Title": "\u0022Document Key Generation in Azure AI Search Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThis mapping ensures that eachblob appears as a distinct search document, and it saves you the step of having tocreate this field mapping yourself (normally, only fields having identical names andtypes are automatically mapped).When using any of the parsing modes, one blob maps to \u0022many\u0022 search documents,making a document key solely based on blob metadata unsuitable.\r\nTo overcome thisconstraint, Azure AI Search is capable of generating a \u0022one-to-many\u0022 document key foreach individual entity extracted from a blob. This property is namedAzureSearch_DocumentKey and is added to each individual entity extracted from theOne-to-many document keyblob. The value of this property is guaranteed to be unique for each individual entityacross blobs and the entities will show up as separate search documents.\r\nBy default, when no explicit field mappings for the key index field are specified, theAzureSearch_DocumentKey is mapped to it, using the base64Encode field-mappingfunction.Assume you\u0027ve an index definition with the following fields:idtemperaturepressuretimestampAnd your blob container has blobs with the following structure:Blob1.\r\njsonJSONBlob2.jsonJSONWhen you create an indexer and set the parsingMode to jsonLines - without specifyingany explicit field mappings for the key field, the following mapping will be appliedimplicitly. HTTPExample{ \u0022temperature\u0022: 100, \u0022pressure\u0022: 100, \u0022timestamp\u0022: \u00222020-02-13T00:00:00Z\u0022 }{ \u0022temperature\u0022 : 33, \u0022pressure\u0022 : 30, \u0022timestamp\u0022: \u00222020-02-14T00:00:00Z\u0022 }{ \u0022temperature\u0022: 1, \u0022pressure\u0022: 1, \u0022timestamp\u0022: \u00222019-01-12T00:00:00Z\u0022 }{ \u0022temperature\u0022 : 120, \u0022pressure\u0022 : 3, \u0022timestamp\u0022:\n"
}