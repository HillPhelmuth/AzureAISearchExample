{
  "Id": "1484",
  "Title": "\u0022Implementing Group-Based Security in Azure AI Search Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIn the hypothetical example, the body of the PUT request on an Azure AI Search indexwould include an applicant\u0027s college essay or transcript along with the group identifierhaving permission to view that content.In the generic example used in the code sample for this walkthrough, the index actionmight look as follows:C#Step 4: Cache the groups identifiersIndex document with their permitted groupsprivate static void IndexDocuments(string indexName, List\u003Cstring\u003E groups){    IndexDocumentsBatch\u003CSecuredFiles\u003E batch = IndexDocumentsBatch.\r\nCreate(        IndexDocumentsAction.Upload(            new SecuredFiles()            {                FileId = \u00221\u0022,                Name = \u0022secured_file_a\u0022,                GroupIds = new[] { groups[0] }            }),              .\r\n..            };IndexDocumentsResult result = searchClient.IndexDocuments(batch);For security trimming purposes, the values in your security field in the index are staticvalues used for including or excluding documents in search results. For example, if thegroup identifier for Admissions is \u0022A11B22C33D44-E55F66G77-H88I99JKK\u0022, anydocuments in an Azure AI Search index having that identifier in the security field areincluded (or excluded) in the search results sent back to the caller.To filter documents returned in search results based on groups of the user issuing therequest, review the following steps.\r\nIf the user\u0027s groups weren\u0027t already cached, or the cache has expired, issue the groupsrequest.C#Assuming you have the user\u0027s groups membership, you can issue the search requestwith the appropriate filter values.C#Issue a search requestStep 1: Retrieve user\u0027s group identifiersprivate static async void RefreshCache(IEnumerable\u003CUser\u003E users){    HttpClient client = new HttpClient();    var userGroups = await _microsoftGraphHelper. GetGroupsForUsers(client, users);    _groupsCache = new ConcurrentDictionary\u003Cstring, List\u003Cstring\u003E\u003E(userGroups);}Step 2: Compose the search requestprivate static void SearchQueryWithFilter(string user){    // Using the filter below, the search result will contain all documents that their GroupIds field       // contain any one of the Ids in the groups list    string filter = String.\n"
}