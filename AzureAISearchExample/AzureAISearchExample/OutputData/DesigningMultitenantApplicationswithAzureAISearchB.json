{
  "Id": "629",
  "Title": "\u0022Designing Multitenant Applications with Azure AI Search: Best Practices\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAzure AISearch has a 99.9% SLA.Global footprint: Multitenant applications may need to effectively serve tenants,which are distributed across the globe.Scalability: Application developers need to consider how they reconcile betweenmaintaining a sufficiently low level of application complexity and designing theapplication to scale with number of tenants and the size of tenants\u0027 data andworkload.Azure AI Search offers a few boundaries that can be used to isolate tenants\u2019 data andworkload.In the case of a multitenant scenario, the application developer consumes one or moresearch services and divides their tenants among services, indexes, or both.\r\nAzure AISearch has a few common patterns when modeling a multitenant scenario:Considerations for multitenant applicationsModeling multitenancy with Azure AI SearchOne index per tenant: Each tenant has its own index within a search service that isshared with other tenants.One service per tenant: Each tenant has its own dedicated Azure AI Search service,offering highest level of data and workload separation.Mix of both: Larger, more-active tenants are assigned dedicated services whilesmaller tenants are assigned individual indexes within shared services.In an index-per-tenant model, multiple tenants occupy a single Azure AI Search servicewhere each tenant has their own index.\r\nTenants achieve data isolation because all search requests and document operations areissued at an index level in Azure AI Search. In the application layer, there\u0027s the needawareness to direct the various tenants\u2019 traffic to the proper indexes while alsomanaging resources at the service level across all tenants. A key attribute of the index-per-tenant model is the ability for the application developerto oversubscribe the capacity of a search service among the application\u2019s tenants. If thetenants have an uneven distribution of workload, the optimal combination of tenantscan be distributed across a search service\u2019s indexes to accommodate a number of highlyactive, resource-intensive tenants while simultaneously serving a long tail of less activetenants.\n"
}