{
  "Id": "1259",
  "Title": "\u0022Advanced Query Formulation and Processing in Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfQuery strings must not be null (search=*) and the string should have thecharacteristics of a question, such as \u0022what is\u0022 or \u0022how to\u0022, as opposed to akeyword search consisting of terms or phrases in arbitrary order. If the query stringdoesn\u0027t appear to be a question, answer processing is skipped, even if the requestspecifies \u0022answers\u0022 as a query parameter.\r\nSemantic extraction and summarization have limits over how many tokens perdocument can be analyzed in a timely fashion. In practical terms, if you have largedocuments that run into hundreds of pages, try to break up the content intosmaller documents first.\r\nSemantic ranking overviewConfigure BM25 rankingConfigure semantic rankingTips for producing high-quality answersNext stepsUse the \u0022full\u0022 Lucene search syntax(advanced queries in Azure CognitiveSearch)Article\u202206/11/2023When constructing queries for Azure Cognitive Search, you can replace the defaultsimple query parser with the more powerful Lucene query parser to formulatespecialized and advanced query expressions.\r\nThe Lucene parser supports complex query formats, such as field-scoped queries, fuzzysearch, infix and suffix wildcard search, proximity search, term boosting, and regularexpression search. The extra power comes with more processing requirements so youshould expect a slightly longer execution time. In this article, you can step throughexamples demonstrating query operations based on full syntax.The following queries are based on the hotels-sample-index, which you can create byfollowing the instructions in this quickstart.Example queries are articulated using the REST API and POST requests. You can pasteand run them in Postman or another web client.Request headers must have the following values:KeyValueContent-Typeapplication/json\uFF17 NoteMany of the specialized query constructions enabled through the full Lucene querysyntax are not text-analyzed, which can be surprising if you expect stemming orlemmatization. Lexical analysis is only performed on complete terms (a term queryor phrase query). Query types with incomplete terms (prefix query, wildcard query,regex query, fuzzy query) are added directly to the query tree, bypassing theanalysis stage. The only transformation performed on partial query terms islowercasing.\n"
}