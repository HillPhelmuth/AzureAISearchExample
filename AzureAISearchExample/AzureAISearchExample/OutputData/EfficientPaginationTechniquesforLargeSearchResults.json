{
  "Id": "1245",
  "Title": "\u0022Efficient Pagination Techniques for Large Search Results in Azure\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfShortly thereafter, you execute a query to fetch the secondpage: $top=2\u0026$skip=2\u0026$orderby=rating desc, and get these results:JSONNotice that document 2 is fetched twice. This is because the new document 5 has agreater value for rating, so it sorts before document 2 and lands on the first page.\r\nWhilethis behavior might be unexpected, it\u0027s typical of how a search engine behaves.Using $top and $skip allows a search query to page through 100,000 results, but whatif results are larger than 100,000? To page through a response this large, use a sortorder and range filter as a workaround for $skip.\r\nIn this workaround, sort and filter are applied to a document ID field or another fieldthat is unique for each document. The unique field must have filterable and sortableattribution in the search index.1. Issue a query to return a full page of sorted results.\r\nHTTP{ \u0022id\u0022: \u00221\u0022, \u0022rating\u0022: 5 }{ \u0022id\u0022: \u00222\u0022, \u0022rating\u0022: 3 }{ \u0022id\u0022: \u00223\u0022, \u0022rating\u0022: 2 }{ \u0022id\u0022: \u00224\u0022, \u0022rating\u0022: 1 }{ \u0022id\u0022: \u00221\u0022, \u0022rating\u0022: 5 }{ \u0022id\u0022: \u00222\u0022, \u0022rating\u0022: 3 }{ \u0022id\u0022: \u00222\u0022, \u0022rating\u0022: 3 }{ \u0022id\u0022: \u00223\u0022, \u0022rating\u0022: 2 }Paging through a large number of results2.\r\nChoose the last result returned by the search query. An example result with only an\u0022id\u0022 value is shown here.JSON3. Use that \u0022id\u0022 value in a range query to fetch the next page of results. This \u0022id\u0022 fieldshould have unique values, otherwise pagination may include duplicate results.HTTP4. Pagination ends when the query returns zero results.\nIn a full text search query, results can be ranked by:a search scorea semantic reranker scorea sort order on a \u0022sortable\u0022 fieldPOST /indexes/good-books/docs/search?api-version=2020-06-30    {        \u0022search\u0022: \u0022divine secrets\u0022,      \u0022top\u0022: 50,      \u0022orderby\u0022: \u0022id asc\u0022    }{    \u0022id\u0022: \u002250\u0022}POST /indexes/good-books/docs/search?\n"
}