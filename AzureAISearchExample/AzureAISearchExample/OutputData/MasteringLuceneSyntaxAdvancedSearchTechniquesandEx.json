{
  "Id": "1650",
  "Title": "\u0022Mastering Lucene Syntax: Advanced Search Techniques and Examples\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfTo use full Lucene syntax, set the queryType to \u0022full\u0022 and pass in a query expressionpatterned for wildcard, fuzzy search, or one of the other query forms supported by thefull syntax. In REST, query expressions are provided in the search parameter of a SearchDocuments (REST API) request.The following example is a search request constructed using the full syntax. Thisparticular example shows in-field search and term boosting.\r\nIt looks for hotels where thecategory field contains the term budget. Any documents containing the phrase\u0022recently renovated\u0022 are ranked higher as a result of the term boost value (3).HTTPWhile not specific to any query type, the searchMode parameter is relevant in thisexample. Whenever operators are on the query, you should generally setsearchMode=all to ensure that all of the criteria are matched.For more examples, see Lucene query syntax examples.\r\nFor details about the queryrequest and parameters, including searchMode, see Search Documents (REST API).Example (full syntax)POST /indexes/hotels-sample-index/docs/search?api-version=2020-06-30{  \u0022queryType\u0022: \u0022full\u0022,  \u0022search\u0022: \u0022category:budget AND \\\u0022recently renovated\\\u0022^3\u0022,  \u0022searchMode\u0022: \u0022all\u0022}Syntax fundamentalsThe following syntax fundamentals apply to all queries that use the Lucene syntax.\r\nPlacement determines whether a symbol is interpreted as an operator or just anothercharacter in a string.For example, in Lucene full syntax, the tilde (~) is used for both fuzzy search andproximity search. When placed after a quoted phrase, ~ invokes proximity search. Whenplaced at the end of a term, ~ invokes fuzzy search.Within a term, such as business~analyst, the character isn\u0027t evaluated as an operator. Inthis case, assuming the query is a term or phrase query, full text search with lexicalanalysis strips out the ~ and breaks the term business~analyst in two: business ORanalyst.\n"
}