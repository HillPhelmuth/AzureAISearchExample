{
  "Id": "823",
  "Title": "\u0022Extracting Text and Indexing Documents in Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfsheet)metadata_content_type metadata_author metadata_creation_date metadata_last_modifiedExtract text, includingembedded documentsXML (application/xml)metadata_content_type metadata_content_encoding metadata_language Strip XML markup andextract textZIP (application/zip)metadata_content_typeExtract text from alldocuments in the archiveIndexers in Azure Cognitive SearchAI enrichment overviewBlob indexing overviewSharePoint indexingSee alsoIndexing blobs and files to producemultiple search documentsArticle\u202211/15/2023Applies to: Blob indexers, File indexersBy default, an indexer will treat the contents of a blob or file as a single searchdocument.\r\nIf you want a more granular representation in a search index, you can setparsingMode values to create multiple search documents from one blob or file.\r\nTheparsingMode values that result in many search documents include delimitedText (forCSV), and jsonArray or jsonLines (for JSON).When you use any of these parsing modes, the new search documents that emergemust have unique document keys, and a problem arises in determining where that valuecomes from.\r\nThe parent blob has at least one unique value in the form ofmetadata_storage_path property, but if it contributes that value to more than onesearch document, the key is no longer unique in the index.To address this problem, the blob indexer generates an AzureSearch_DocumentKey thatuniquely identifies each child search document created from the single blob parent. Thisarticle explains how this feature works.\r\nEach document that shows up in an Azure AI Search index is uniquely identified by adocument key.When no parsing mode is specified, and if there\u0027s no explicit field mapping in theindexer definition for the search document key, the blob indexer automatically maps themetadata_storage_path property as the document key. This mapping ensures that eachblob appears as a distinct search document, and it saves you the step of having tocreate this field mapping yourself (normally, only fields having identical names andtypes are automatically mapped).When using any of the parsing modes, one blob maps to \u0022many\u0022 search documents,making a document key solely based on blob metadata unsuitable.\n"
}