{
  "Id": "179",
  "Title": "\u0022Building a Dynamic Search Interface with React and Azure\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfborder-right: 1px solid #f0f0f0;  padding: 0 16px 0 16px;\u0060;const RightColumn = styled(Container)\u0060\u0060;export default function Search() {  const location = useLocation();  const navigate = useNavigate();  const [currentPage, setCurrentPage] = useState(    new URLSearchParams(location.\r\nsearch).get(\u0022p\u0022) ?? 1  );  const [searchTerm, setSearchTerm] = useState(    new URLSearchParams(location.search).get(\u0022q\u0022) ?? \u0022*\u0022  );  const [top] = useState(new URLSearchParams(location.search).get(\u0022top\u0022) ?? 8);  const [skip, setSkip] = useState(    new URLSearchParams(location.search).\r\nget(\u0022skip\u0022) ?? 0  );  const [filters, setFilters] = useState([]);  const [facets, setFacets] = useState({});  let resultsPerPage = top;  function setNavigation(q, p) {    navigate(\u0060/search?\r\nq=${q}\u0026p=${p}\u0060);  }  function changeCurrentPage(newPage) {    const newSkip = (newPage - 1) * top;    setNavigation(searchTerm, newPage);    setCurrentPage(newPage);    setSkip(newSkip);  }  const fiveMinutes = 1000 * 60 * 5;\r\n/* eslint-disable no-unused-vars */  const { data, isLoading, dataUpdatedAt, error } = useQuery({    queryKey: [\u0022search\u0022, searchTerm, top, skip, currentPage, filters, facets],    //refetchOnMount: false,    //refetchOnWindowFocus: false,    //refetchOnReconnect: false,    enabled: searchTerm ! == undefined,    staleTime: fiveMinutes, // time in milliseconds    cacheTime: fiveMinutes,    queryFn: async () =\u003E {      setSkip((currentPage - 1) * top);      return request(\u0022/api/search\u0022, \u0022POST\u0022, {        q: searchTerm,        top: top,        skip: (currentPage - 1) * top,        filters: filters,      }).\n"
}