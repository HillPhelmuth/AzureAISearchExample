{
  "Id": "226",
  "Title": "\u0022Implementing Azure Search in ASP.NET Core Application: A Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf\u003C/p\u003E    \u003Cform asp-controller=\u0022Home\u0022 asp-action=\u0022Index\u0022\u003E        \u003Cp\u003E            \u003Cinput type=\u0022text\u0022 name=\u0022searchText\u0022 /\u003E            \u003Cinput type=\u0022submit\u0022 value=\u0022Search\u0022 /\u003E        \u003C/p\u003E    \u003C/form\u003E\u003C/div\u003E\u003Cdiv\u003E    @using (Html.BeginForm(\u0022Index\u0022, \u0022Home\u0022, FormMethod.Post))    {        @if (Model != null)        {            // Show the result count.            \u003Cp\u003E@Model.resultList.TotalCount Results\u003C/p\u003E            // Get search results.            var results = Model.resultList.GetResults().\r\nToList();            {                \u003Ctable class=\u0022table\u0022\u003E                    \u003Cthead\u003E                        \u003Ctr\u003E                            \u003Cth\u003EName\u003C/th\u003E                            \u003Cth\u003ECategory\u003C/th\u003E                            \u003Cth\u003ERating\u003C/th\u003E                            \u003Cth\u003ETags\u003C/th\u003E                            \u003Cth\u003ECity\u003C/th\u003E                            \u003Cth\u003EState\u003C/th\u003E                            \u003Cth\u003EDescription\u003C/th\u003E                        \u003C/tr\u003E                    \u003C/thead\u003E                    \u003Ctbody\u003E1.\r\nPress F5 to compile and run the project. The app runs on local host and opens inyour default browser.2. Select Search to return all results.3. This code uses the default search configuration, supporting the simple syntax andsearchMode=Any. You can enter keywords, augment with Boolean operators, or runa prefix search (pool*).\r\nIn the next several sections, modify the RunQueryAsync method in the HomeControllerto add filters and sorting.Index field attributes determine which fields are searchable, filterable, sortable,facetable, and retrievable. In the hotels-sample-index, filterable fields include\u0022Category\u0022, \u0022Address/City\u0022, and \u0022Address/StateProvince\u0022. This example adds a $Filterexpression on \u0022Category\u0022. A filter always executes first, followed by a query assuming one is specified.1. Open the HomeController and find the RunQueryAsync method. Add Filter to varoptions = new SearchOptions():                        @foreach (var d in results)                        {                            \u003Ctr\u003E                                \u003Ctd\u003E@d.\n"
}