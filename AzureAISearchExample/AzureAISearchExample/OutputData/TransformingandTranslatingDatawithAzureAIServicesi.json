{
  "Id": "244",
  "Title": "\u0022Transforming and Translating Data with Azure AI Services in Python\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfPythonNotice how this transformation recasts the nested fields into a table, which enables thenext two transformations. This screenshot is trimmed for brevity. If you\u0027re followingalong in your own notebook, you\u0027ll have 19 columns and 26 rows.Paste the following code into the fifth cell.\r\nNo modifications are required, so run thecode when you\u0027re ready.This code loads Translate, a transformer that calls the Azure AI Translator service inAzure AI services. The original text, which is in English in the \u0022Description\u0022 column, ismachine-translated into various languages. All of the output is consolidated into\u0022output.\r\ntranslations\u0022 array.Pythonfrom synapse.ml.cognitive import FormOntologyLearneritemized_df = (FormOntologyLearner()    .setInputCol(\u0022invoices\u0022)    .setOutputCol(\u0022extracted\u0022)    .fit(analyzed_df)    .transform(analyzed_df)    .select(\u0022url\u0022, \u0022extracted.*\u0022).select(\u0022*\u0022, explode(col(\u0022Items\u0022)).alias(\u0022Item\u0022))    .drop(\u0022Items\u0022).select(\u0022Item.*\u0022, \u0022*\u0022).\r\ndrop(\u0022Item\u0022))display(itemized_df)6 - Add translationsfrom synapse.ml.cognitive import Translatetranslated_df = (Translate()    .setSubscriptionKey(cognitive_services_key)    .setLocation(cognitive_services_region)    .setTextCol(\u0022Description\u0022)Paste the following code in the sixth cell and then run it. No modifications are required.This code loads AzureSearchWriter. It consumes a tabular dataset and infers a searchindex schema that defines one field for each column. The translations structure is anarray, so it\u0027s articulated in the index as a complex collection with subfields for eachlanguage translation. The generated index will have a document key and use the defaultvalues for fields created using the Create Index REST API.Python    .setErrorCol(\u0022TranslationError\u0022)    .setOutputCol(\u0022output\u0022)    .setToLanguage([\u0022zh-Hans\u0022, \u0022fr\u0022, \u0022ru\u0022, \u0022cy\u0022])    .setConcurrency(5)    .transform(itemized_df)    .withColumn(\u0022Translations\u0022, col(\u0022output.translations\u0022)[0])    .\n"
}