{
  "Id": "1629",
  "Title": "\u0022Understanding Geo-Spatial Queries in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf*/geo_polygon ::=    \u0022geography\u0027POLYGON((\u0022 lon_lat \u0027,\u0027 lon_lat \u0027,\u0027 lon_lat \u0027,\u0027 lon_lat_list \u0022))\u0027\u0022lon_lat_list ::= lon_lat(\u0027,\u0027 lon_lat)*OData syntax diagram for Azure AI Search\uFF17 NoteSee OData expression syntax reference for Azure AI Search for the completeEBNF.geo.distance\uFF17 NoteWhen using geo.distance in a filter, you must compare the distance returned bythe function with a constant using lt, le, gt, or ge.\r\nThe operators eq and ne arenot supported when comparing distances. For example, this is a correct usage ofgeo.distance: $filter=geo.distance(location, geography\u0027POINT(-122.13157747.678581)\u0027) le 5.The geo.intersects function takes a variable of type Edm.GeographyPoint and a constantEdm.GeographyPolygon and returns an Edm.\r\nBoolean -- true if the point is within thebounds of the polygon, false otherwise.The polygon is a two-dimensional surface stored as a sequence of points defining abounding ring (see the examples below). The polygon needs to be closed, meaning thefirst and last point sets must be the same. Points in a polygon must be incounterclockwise order.\r\nFor many geo-spatial query libraries formulating a query that includes the 180thmeridian (near the dateline) is either off-limits or requires a workaround, such assplitting the polygon into two, one on either side of the meridian.In Azure AI Search, geo-spatial queries that include 180-degree longitude will work asexpected if the query shape is rectangular and your coordinates align to a grid layoutalong longitude and latitude (for example, geo. intersects(location,geography\u0027POLYGON((179 65, 179 66, -179 66, -179 65, 179 65))\u0027). Otherwise, for non-rectangular or unaligned shapes, consider the split polygon approach.Like all other non-collection fields in Azure AI Search, fields of type Edm.\n"
}