{
  "Id": "227",
  "Title": "\u0022Implementing Filters and Sorting in Azure AI Search with C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfA filter always executes first, followed by a query assuming one is specified.1. Open the HomeController and find the RunQueryAsync method. Add Filter to varoptions = new SearchOptions():                        @foreach (var d in results)                        {                            \u003Ctr\u003E                                \u003Ctd\u003E@d.\r\nDocument.HotelName\u003C/td\u003E                                \u003Ctd\u003E@d.Document.Category\u003C/td\u003E                                \u003Ctd\u003E@d.Document.Rating\u003C/td\u003E                                \u003Ctd\u003E@d.Document.Tags[0]\u003C/td\u003E                                \u003Ctd\u003E@d.Document.Address.City\u003C/td\u003E                                \u003Ctd\u003E@d.Document.Address.StateProvince\u003C/td\u003E                                \u003Ctd\u003E@d.Document.Description\u003C/td\u003E                            \u003C/tr\u003E                        }                    \u003C/tbody\u003E                  \u003C/table\u003E            }        }    }\u003C/div\u003ERun the sampleFilter resultsC#2. Run the application.\r\n3. Select Search to run an empty query. The filter criteria returns 18 documentsinstead of the original 50.For more information about filter expressions, see Filters in Azure AI Search and OData$filter syntax in Azure AI Search.In the hotels-sample-index, sortable fields include \u0022Rating\u0022 and \u0022LastRenovated\u0022.\r\nThisexample adds an $OrderBy expression to the \u0022Rating\u0022 field.1. Open the HomeController and replace RunQueryAsync method with the followingversion:C# private async Task\u003CActionResult\u003E RunQueryAsync(SearchData model) {     InitSearch();     var options = new SearchOptions()     {         IncludeTotalCount = true,         Filter = \u0022search.\r\nin(Category,\u0027Budget,Suite\u0027)\u0022     };     options.Select.Add(\u0022HotelName\u0022);     options.Select.Add(\u0022Category\u0022);     options.Select.Add(\u0022Rating\u0022);     options.Select.Add(\u0022Tags\u0022);     options.Select.Add(\u0022Address/City\u0022);     options.Select.Add(\u0022Address/StateProvince\u0022);     options.Select.Add(\u0022Description\u0022);     model. resultList = await _searchClient.SearchAsync\u003CHotel\u003E(model.searchText, options).ConfigureAwait(false);     return View(\u0022Index\u0022, model); }Sort results private async Task\u003CActionResult\u003E RunQueryAsync(SearchData model) {     InitSearch();     var options = new SearchOptions()2. Run the application. Results are sorted by \u0022Rating\u0022 in descending order.\n"
}