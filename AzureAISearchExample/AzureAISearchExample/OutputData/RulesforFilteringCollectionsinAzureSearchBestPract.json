{
  "Id": "1226",
  "Title": "\u0022Rules for Filtering Collections in Azure Search: Best Practices\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfintersects() isn\u0027t negated. For \u0027all\u0027,make sure you compare geo.distance()using the \u0027gt\u0027 or \u0027ge\u0027 operators and makesure that any usage of geo.intersects() isnegated.Filtering on a field of typeCollection(Edm.GeographyPoint)Rules forfilteringGeographyPointcollectionsInvalid lambda expression.\r\nComplexBoolean expressions aren\u0027t supported inlambda expressions that iterate overfields of typeCollection(Edm.GeographyPoint). For\u0027any\u0027, join sub-expressions with \u0027or\u0027; \u0027and\u0027isn\u0027t supported. For \u0027all\u0027, oin sub-expressions with \u0027and\u0027; \u0027or\u0027 isn\u0027tsupported.Filtering on fields of typeCollection(Edm.String) orCollection(Edm.\r\nGeographyPoint)Rules forfiltering stringcollectionsRules forfilteringGeographyPointcollectionsInvalid lambda expression. Found acomparison operator (one of \u0027lt\u0027, \u0027le\u0027, \u0027gt\u0027,or \u0027ge\u0027). Only equality operators areallowed in lambda expressions thatiterate over fields of typeCollection(Edm.String). For \u0027any\u0027, seexpressions of the form \u0027x eq y\u0027.\r\nFor \u0027all\u0027,Filtering on a field of typeCollection(Edm.String)Rules forfiltering stringcollectionsError messageSituationDetailsuse expressions of the form \u0027x ne y\u0027 or\u0027not (x eq y)\u0027.The rules for writing valid collection filters are different for each data type. The followingsections describe the rules by showing examples of which filter features are supportedand which aren\u0027t:Rules for filtering string collectionsRules for filtering Boolean collectionsRules for filtering GeographyPoint collectionsRules for filtering comparable collectionsRules for filtering complex collectionsInside lambda expressions for string collections, the only comparison operators that canbe used are eq and ne. The body of an any can only test for equality while the body of an all can only test forinequality.It\u0027s also possible to combine multiple expressions via or in the body of an any, and viaand in the body of an all. Since the search.in function is equivalent to combiningequality checks with or, it\u0027s also allowed in the body of an any. Conversely, notsearch.in is allowed in the body of an all.For example, these expressions are allowed:tags/any(t: t eq \u0027books\u0027)tags/any(t: search.\n"
}