{
  "Id": "225",
  "Title": "\u0022Building a Hotel Search App with Azure\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf// If Select is empty, all \u0022retrievable\u0022 fields are returned.             options.Select.Add(\u0022HotelName\u0022);             options.Select.Add(\u0022Category\u0022);             options.Select.Add(\u0022Rating\u0022);             options.Select.Add(\u0022Tags\u0022);             options.Select.Add(\u0022Address/City\u0022);             options.Select.Add(\u0022Address/StateProvince\u0022);             options.Select.Add(\u0022Description\u0022);             // For efficiency, the search call should be asynchronous, so use SearchAsync rather than Search.             model.resultList = await _searchClient.SearchAsync\u003CHotel\u003E(model.searchText, options).ConfigureAwait(false);             // Display the results.\r\nreturn View(\u0022Index\u0022, model);         }         public IActionResult Privacy()         {             return View();         }     } }Modify the view1. In Solution explorer under Views \u003E Home, open index.cshtml.2. Replace the default with the following content:razor@model HotelDemoApp.Models.\r\nSearchData;@{    ViewData[\u0022Title\u0022] = \u0022Index\u0022;}\u003Cdiv\u003E    \u003Cimg src=\u0022~/images/azure-logo.png\u0022 width=\u002280\u0022 /\u003E    \u003Ch2\u003ESearch for Hotels\u003C/h2\u003E    \u003Cp\u003EUse this demo app to test server-side sorting and filtering. Modify the RunQueryAsync method to change the operation. The app uses the default search configuration (simple search syntax, with searchMode=Any). \u003C/p\u003E    \u003Cform asp-controller=\u0022Home\u0022 asp-action=\u0022Index\u0022\u003E        \u003Cp\u003E            \u003Cinput type=\u0022text\u0022 name=\u0022searchText\u0022 /\u003E            \u003Cinput type=\u0022submit\u0022 value=\u0022Search\u0022 /\u003E        \u003C/p\u003E    \u003C/form\u003E\u003C/div\u003E\u003Cdiv\u003E    @using (Html.BeginForm(\u0022Index\u0022, \u0022Home\u0022, FormMethod.Post))    {        @if (Model != null)        {            // Show the result count.            \u003Cp\u003E@Model.resultList.TotalCount Results\u003C/p\u003E            // Get search results.            var results = Model.resultList.GetResults().\n"
}