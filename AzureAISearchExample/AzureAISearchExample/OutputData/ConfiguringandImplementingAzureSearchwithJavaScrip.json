{
  "Id": "176",
  "Title": "\u0022Configuring and Implementing Azure Search with JavaScript and Azure SDK\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThe secrets are stored in thestatic web app settings and pulled in to the function as environment variables.JavaScriptThe Search API takes a search term and searches across the documents in the searchindex, returning a list of matches.Azure SDK @azure/search-documentsConfigure secrets in a configuration fileconst CONFIG = {    SearchIndexName: process.\r\nenv[\u0022SearchIndexName\u0022] || \u0022good-books\u0022,    SearchApiQueryKey: process.env[\u0022SearchApiKey\u0022] || \u0022\u0022,    SearchServiceName: process.env[\u0022SearchServiceName\u0022] || \u0022\u0022,    SearchFacets: process.env[\u0022SearchFacets\u0022] || \u0022authors*,language_code\u0022, }console.log(CONFIG);if (!CONFIG.SearchIndexName || !CONFIG.SearchApiQueryKey || !CONFIG.\r\nSearchServiceName) throw Error(\u0022./config.js::Cognitive Services key is missing\u0022);module.exports = { CONFIG };Azure Function: Search the catalogThe Azure Function pulls in the search configuration information, and fulfills the query.JavaScriptconst { app } = require(\u0027@azure/functions\u0027);const { CONFIG } = require(\u0022.\r\n./lib/config\u0022);const { readFacets, createFilterExpression } = require(\u0027../lib/azure-cognitive-search\u0027);const { SearchClient, AzureKeyCredential } = require(\u0022@azure/search-documents\u0022);// Create a SearchClient to send queriesconst client = new SearchClient(    \u0060https://\u0060 \u002B CONFIG.SearchServiceName \u002B \u0060.search.windows.\r\nnet/\u0060,    CONFIG.SearchIndexName,    new AzureKeyCredential(CONFIG.SearchApiQueryKey));app.http(\u0027search\u0027, {    methods: [\u0027POST\u0027],    authLevel: \u0027anonymous\u0027,    handler: async (request, context) =\u003E {        context.log(\u0060Search request for url \u0022${request.url}\u0022\u0060);        try {            const body = await request. json();            console.log(body);            let q = body.q || \u0022*\u0022;            const top = body.top || 5;            const skip = parseInt(body.skip || 0);            const filters = body.filters || undefined;            const facets = readFacets(CONFIG.SearchFacets);            const facetNames = Object.keys(facets);            console.log(facetNames);            const filtersExpression = (filters \u0026\u0026 facets) ? createFilterExpression(filters, facets) : undefined;            console.\n"
}