{
  "Id": "757",
  "Title": "\u0022Custom Analyzers: Tailoring Text Analysis for Effective Searching\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfA custom analyzer gives you control over the process of converting text into indexableand searchable tokens by allowing you to choose which types of analysis or filtering toinvoke, and the order in which they occur.Create and assign a custom analyzer if none of default (Standard Lucence), built-in, orlanguage analyzers are sufficient for your needs. You might also create a customanalyzer if you want to use a built-in analyzer with custom options. For example, if youwanted to change the maxTokenLength on Standard, you would create a customanalyzer, with a user-defined name, to set that option.\r\nScenarios where custom analyzers can be helpful include:Using character filters to remove HTML markup before text inputs are tokenized, orreplace certain characters or symbols.Phonetic search. Add a phonetic filter to enable searching based on how a wordsounds, not how it\u2019s spelled.Disable lexical analysis. Use the Keyword analyzer to create searchable fields thataren\u0027t analyzed.\r\nFast prefix/suffix search. Add the Edge N-gram token filter to index prefixes ofwords to enable fast prefix matching. Combine it with the Reverse token filter to dosuffix matching.Why use a custom analyzer?Custom tokenization. For example, use the Whitespace tokenizer to breaksentences into tokens using whitespace as a delimiterASCII folding. Add the Standard ASCII folding filter to normalize diacritics like \u00F6 or\u00EA in search terms.To create a custom analyzer, specify it in the analyzers section of an index at designtime, and then reference it on searchable, Edm.String fields using either the analyzerproperty, or the indexAnalyzer and searchAnalyzer pair.An analyzer definition includes a name, type, one or more character filters, a maximumof one tokenizer, and one or more token filters for post-tokenization processing.Character filters are applied before tokenization. Token filters and character filters areapplied from left to right.\n"
}