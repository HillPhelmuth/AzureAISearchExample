{
  "Id": "1324",
  "Title": "\u0022Optimizing Azure Search Index Size and Schema for Efficiency\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThis is partly a function of having fewer fields toscan, but it\u0027s also due to how the system caches content for future queries. After the firstquery, some content remains in memory where it\u0027s searched more efficiently. Becauseindex size tends to grow over time, one best practice is to periodically revisit indexcomposition, both schema and documents, to look for content reduction opportunities.\r\nHowever, if the index is right-sized, the only other calibration you can make is toincrease capacity: either by adding replicas or upgrading the service tier. The section\u0022Tip: Upgrade to a Standard S2 tier\u0022 discusses the scale up versus scale out decision.Schema complexity can also adversely affect indexing and query performance. Excessivefield attribution builds in limitations and processing requirements. Complex types takelonger to index and query. The next few sections explore each condition.A common mistake that administrators and developers make when creating a searchindex is selecting all available properties for the fields, as opposed to only selecting justthe properties that are needed.\r\nFor example, if a field doesn\u0027t need to be full textsearchable, skip that field when setting the searchable attribute.\uFF17 NoteLooking for strategies on high volume indexing? See Index large data sets in AzureCognitive Search.Index size and schemaTip: Be selective in field attributionSupport for filters, facets, and sorting can quadruple storage requirements. If you addsuggesters, storage requirements go up even more.\r\nFor an illustration on the impact ofattributes on storage, see Attributes and index size.Summarized, the ramifications of over-attribution include:Degradation of indexing performance due to the extra work required to processthe content in the field, and then store it within the search inverted index (set the\u0022searchable\u0022 attribute only on fields that contain searchable content). Creates a larger surface that each query has to cover. All fields marked assearchable are scanned in a full text search.Increases operational costs due to extra storage. Filtering and sorting requiresadditional space for storing original (non-analyzed) strings. Avoid setting filterableor sortable on fields that don\u0027t need it.In many cases, over attribution limits the capabilities of the field. For example, if afield is facetable, filterable, and searchable, you can only store 16 KB of text withina field, whereas a searchable field can hold up to 16 MB of text.\n"
}