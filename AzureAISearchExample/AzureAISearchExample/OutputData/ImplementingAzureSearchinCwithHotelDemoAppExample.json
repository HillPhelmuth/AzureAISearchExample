{
  "Id": "223",
  "Title": "\u0022Implementing Azure Search in C# with HotelDemoApp Example\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfReplace the default with the following content:C#         [SimpleField(IsFilterable = true, IsFacetable = true)]         public double? BaseRate { get; set; }         [SearchableField(IsFilterable = true, IsFacetable = true)]         public string BedOptions { get; set; }         [SimpleField(IsFilterable = true, IsFacetable = true)]         public int SleepsCount { get; set; }         [SimpleField(IsFilterable = true, IsFacetable = true)]         public bool?\r\nSmokingAllowed { get; set; }         [SearchableField(IsFilterable = true, IsFacetable = true)]         public string[] Tags { get; set; }     } } using Azure.\r\nSearch.Documents.Models; namespace HotelDemoApp.Models {     public class SearchData     {         // The text to search for.         public string searchText { get; set; }         // The list of results.         public SearchResults\u003CHotel\u003E resultList;     } }Modify the controllerusing Azure; using Azure.Search.Documents; using Azure.Search.Documents.Indexes; using HotelDemoApp.Models; using Microsoft.\r\nAspNetCore.Mvc; using System.Diagnostics; namespace HotelDemoApp.Controllers {     public class HomeController : Controller     {         public IActionResult Index()         {             return View();         }         [HttpPost]         public async Task\u003CActionResult\u003E Index(SearchData model)         {             try             {                 // Check for a search string                 if (model. searchText == null)                 {                     model.searchText = \u0022\u0022;                 }                 // Send the query to Search.                 await RunQueryAsync(model);             }             catch             {                 return View(\u0022Error\u0022, new ErrorViewModel { RequestId = \u00221\u0022 });             }             return View(model);         }         [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]         public IActionResult Error()         {             return View(new ErrorViewModel { RequestId = Activity.\n"
}