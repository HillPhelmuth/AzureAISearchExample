{
  "Id": "1221",
  "Title": "\u0022Efficient Querying with Azure AI Search: Inverted Indexes and Collections\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThere\u0027s no concept of individual roomswhose fields can be correlated in the latter case.You may have noticed that there are far fewer restrictions on lambda expressions overcomplex collections than there are for simple collections like Collection(Edm.\r\nInt32),Collection(Edm.GeographyPoint), and so on. This is because Azure AI Search storescomplex collections as actual collections of sub-documents, while simple collectionsaren\u0027t stored as collections at all.Inverted indexes and collectionsFor example, consider a filterable string collection field like seasons in an index for anonline retailer.\r\nSome documents uploaded to this index might look like this:JSONThe values of the seasons field are stored in a structure called an inverted index, whichlooks something like this:TermDocument IDsspring1, 2summer1fall1, 2winter2, 3This data structure is designed to answer one question with great speed: In whichdocuments does a given term appear? Answering this question works more like a plainequality check than a loop over a collection.\r\nIn fact, this is why for string collections,Azure AI Search only allows eq as a comparison operator inside a lambda expression forany.Building up from equality, next we\u0027ll look at how it\u0027s possible to combine multipleequality checks on the same range variable with or. It works thanks to algebra and thedistributive property of quantifiers.\r\nThis expression:{  \u0022value\u0022: [    {      \u0022id\u0022: \u00221\u0022,      \u0022name\u0022: \u0022Hiking boots\u0022,      \u0022seasons\u0022: [\u0022spring\u0022, \u0022summer\u0022, \u0022fall\u0022]    },    {      \u0022id\u0022: \u00222\u0022,      \u0022name\u0022: \u0022Rain jacket\u0022,      \u0022seasons\u0022: [\u0022spring\u0022, \u0022fall\u0022, \u0022winter\u0022]    },    {      \u0022id\u0022: \u00223\u0022,      \u0022name\u0022: \u0022Parka\u0022,      \u0022seasons\u0022: [\u0022winter\u0022]    }  ]}odata-filter-expris equivalent to:odata-filter-exprand each of the two any sub-expressions can be efficiently executed using the invertedindex.\n"
}