{
  "Id": "1355",
  "Title": "\u0022Implementing Search ID Correlation in Azure Search SDKs\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfC#private static TelemetryClient _telemetryClient; // Add a constructor that accepts a telemetry client: public HomeController(TelemetryClient telemetry) {     _telemetryClient = telemetry;} Step 2: Request a Search ID for correlation// Create a custom policy to add the correct headers public class SearchIdPipelinePolicy : HttpPipelineSynchronousPolicy {     public override void OnSendingRequest(HttpMessage message)     {         message.\r\nRequest.Headers.SetValue(\u0022x-ms-azs-return-searchid\u0022, \u0022true\u0022);     } } C#Use C# (older v10 SDK)C#Use JavaScript (calling REST APIs)JavaScript// This sample uses the .NET SDK https://www.nuget.org/packages/Azure.Search.\r\nDocuments SearchClientOptions clientOptions = new SearchClientOptions(); clientOptions.AddPolicy(new SearchIdPipelinePolicy(), HttpPipelinePosition.PerCall); var client = new SearchClient(\u0022\u003CSearchServiceName\u003E\u0022, \u0022\u003CIndexName\u003E\u0022, new AzureKeyCredential(\u0022\u003CQueryKey\u003E\u0022), options: clientOptions); Response\u003CSearchResults\u003CSearchDocument\u003E\u003E response = await client.\r\nSearchAsync\u003CSearchDocument\u003E(searchText: searchText, searchOptions: options); string searchId = string.Empty; if (response.GetRawResponse().Headers.TryGetValues(\u0022x-ms-azs-searchid\u0022, out IEnumerable\u003Cstring\u003E headerValues)) {     searchId = headerValues.FirstOrDefault(); } // This sample uses the .NET SDK https://www.nuget.org/packages/Microsoft.Azure. Search var client = new SearchIndexClient(\u003CSearchServiceName\u003E, \u003CIndexName\u003E, new SearchCredentials(\u003CQueryKey\u003E)); // Use HTTP headers so that you can get the search ID from the response var headers = new Dictionary\u003Cstring, List\u003Cstring\u003E\u003E() { { \u0022x-ms-azs-return-searchid\u0022, new List\u003Cstring\u003E() { \u0022true\u0022 } } }; var response = await client.Documents.\n"
}