{
  "Id": "1247",
  "Title": "\u0022Optimizing Search Results: Sorting and Ranking Strategies in Azure\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf0 score is uniform across all results. Unscored results occur whenthe query form is fuzzy search, wildcard or regex queries, or an empty search (search=*).If you need to impose a ranking structure over unscored results, consider an $orderbyexpression to achieve that objective.If you\u0027re using semantic search, the \u0022@search.rerankerScore\u0022 determines the sort orderof your results.The \u0022@search.rerankerScore\u0022 range is 1 to 4.00, where a higher score indicates astronger semantic match.If consistent ordering is an application requirement, you can define an $orderbyexpression on a field.\r\nOnly fields that are indexed as \u0022sortable\u0022 can be used to orderresults.Fields commonly used in an $orderby include rating, date, and location. Filtering bylocation requires that the filter expression calls the geo.distance() function, in additionto the field name.Numeric fields (Edm.Double, Edm.Int32, Edm.Int64) are sorted in numeric order (forexample, 1, 2, 10, 11, 20).\r\nString fields (Edm.String, Edm.ComplexType subfields) are sorted in either ASCII sortorder or Unicode sort order, depending on the language. You can\u0027t sort collectionsof any type.Order by search scoreOrder by the semantic rerankerOrder with $orderbyNumeric content in string fields is sorted alphabetically (1, 10, 11, 2, 20). Upper case strings are sorted ahead of lower case (APPLE, Apple, BANANA,Banana, apple, banana). You can assign a text normalizer to preprocess the textbefore sorting to change this behavior. Using the lowercase tokenizer on a fieldwill have no effect on sorting behavior because Cognitive Search sorts on a non-analyzed copy of the field.\n"
}