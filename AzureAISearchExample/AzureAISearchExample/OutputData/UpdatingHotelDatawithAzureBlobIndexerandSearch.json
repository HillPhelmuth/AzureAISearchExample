{
  "Id": "276",
  "Title": "\u0022Updating Hotel Data with Azure Blob Indexer and Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAzureBlob,        connectionString: configuration[\u0022BlobStorageConnectionString\u0022],        container: new SearchIndexerDataContainer(\u0022hotel-rooms\u0022));    // The blob data source does not need to be deleted if it already exists,    // but the connection string might need to be updated if it has changed.\r\nawait indexerClient.CreateOrUpdateDataSourceConnectionAsync(blobDataSource);IndexingParameters parameters = new IndexingParameters();parameters.Configuration.Add(\u0022parsingMode\u0022, \u0022json\u0022);SearchIndexer blobIndexer = new SearchIndexer(    name: \u0022hotel-rooms-blob-indexer\u0022,    dataSourceName: blobDataSource.Name,    targetIndexName: indexName){Because the index has already been populated with hotel data from the Azure CosmosDB database, the blob indexer updates the existing documents in the index and addsthe room details.You can explore the populated search index after the program has run, using the Searchexplorer in the portal.\r\nParameters = parameters,    Schedule = new IndexingSchedule(TimeSpan.FromDays(1))};// Map the Id field in the Room documents to the HotelId key field in the indexblobIndexer.FieldMappings.Add(new FieldMapping(\u0022Id\u0022) { TargetFieldName = \u0022HotelId\u0022 });// Reset the indexer if it already existstry{    await indexerClient.GetIndexerAsync(blobIndexer.\r\nName);    await indexerClient.ResetIndexerAsync(blobIndexer.Name);}catch (RequestFailedException ex) when (ex.Status == 404) { }await indexerClient.CreateOrUpdateIndexerAsync(blobIndexer);try{    // Run the indexer.    await searchService.Indexers.RunAsync(blobIndexer.Name);}catch (CloudException e) when (e.Response. StatusCode == (HttpStatusCode)429){    Console.WriteLine(\u0022Failed to run indexer: {0}\u0022, e.Response.Content);}\uFF17 NoteIf you have the same non-key fields in both of your data sources, and the datawithin those fields does not match, then the index will contain the values fromwhichever indexer ran most recently. In our example, both data sources contain aHotelName field.\n"
}