{
  "Id": "423",
  "Title": "\u0022Customizing Relevance Scoring in Azure Cognitive Search: BM25 and Beyond\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBM25 offers advanced customization options, such as allowing the user to decide howthe relevance score scales with the term frequency of matched terms. For moreinformation, see Configure the scoring algorithm.Scoring algorithms used in full text search\uFF17 NoteIf you\u0027re using a search service that was created before July 2020, the scoringalgorithm is most likely the previous default, ClassicSimilarity, which you canupgrade on a per-index basis. See Enable BM25 scoring on older services fordetails.The following video segment fast-forwards to an explanation of the generally availableranking algorithms used in Azure Cognitive Search.\r\nYou can watch the full video formore background.Relevance scoring refers to the computation of a search score (@search.score) thatserves as an indicator of an item\u0027s relevance in the context of the current query. Therange is unbounded. However, the higher the score, the more relevant the item.\r\nThe search score is computed based on statistical properties of the string input and thequery itself. Azure Cognitive Search finds documents that match on search terms (someor all, depending on searchMode), favoring documents that contain many instances ofthe search term. The search score goes up even higher if the term is rare across the dataindex, but common within the document.\r\nThe basis for this approach to computingrelevance is known as TF-IDF or term frequency-inverse document frequency.Search scores can be repeated throughout a result set. When multiple hits have thesame search score, the ordering of the same scored items is undefined and not stable. Run the query again, and you might see items shift position, especially if you\u0027re usingthe free service or a billable service with multiple replicas. Given two items with anidentical score, there\u0027s no guarantee that one appears first.To break the tie among repeating scores, you can add an $orderby clause to first orderby score, then order by another sortable field (for example, $orderby=search.score()desc,Rating desc).\n"
}