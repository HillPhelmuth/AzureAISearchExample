{
  "Id": "694",
  "Title": "\u0022Optimizing Search Indexes for Hybrid Query Scenarios: A Comprehensive Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfProvide other fields with human-readable alphanumeric content for the queryresponse, and for hybrid query scenarios that include full text search or semanticranking in the same request.Your search index should include fields and content for all of the query scenarios youwant to support. Suppose you want to search or filter over product names, versions,metadata, or addresses.\r\nIn this case, similarity search isn\u0027t especially helpful. Keywordsearch, geo-search, or filters would be a better choice. A search index that includes acomprehensive field collection of vector and non-vector data provides maximumflexibility for query construction and response composition.A short example of a documents payload that includes vector and non-vector fields is inthe load vector data section of this article.\r\nA vector configuration specifies the vector search algorithm and parameters used duringindexing to create \u0022nearest neighbor\u0022 information among the vector nodes:Hierarchical Navigable Small World (HNSW)Exhaustive KNNPrepare documents for indexingAdd a vector search configurationIf you choose HNSW on a field, you can opt in for exhaustive KNN at query time.\r\nBut theother direction won\u2019t work: if you choose exhaustive, you can\u2019t later request HNSWsearch because the extra data structures that enable approximate search don\u2019t exist.Looking for preview-to-stable version migration guidance? See Upgrade REST APIs forsteps.\r\nREST API version 2023-11-01 supports a vector configuration having:vectorSearch algorithms, hnsw and exhaustiveKnn nearest neighbors, withparameters for indexing and scoring.vectorProfiles for multiple combinations of algorithm configurations.Be sure to have a strategy for vectorizing your content. The stable version doesn\u0027tprovide vectorizers for built-in embedding.1. Use the Create or Update Index API to create the index.2. Add a vectorSearch section in the index that specifies the search algorithmsused to create the embedding space.\nJSON2023-11-01 \u0022vectorSearch\u0022: {     \u0022algorithms\u0022: [         {             \u0022name\u0022: \u0022my-hnsw-config-1\u0022,             \u0022kind\u0022: \u0022hnsw\u0022,             \u0022hnswParameters\u0022: {                 \u0022m\u0022: 4,                 \u0022efConstruction\u0022: 400,                 \u0022efSearch\u0022: 500,                 \u0022metric\u0022: \u0022cosine\u0022             }         },         {             \u0022name\u0022:\n"
}