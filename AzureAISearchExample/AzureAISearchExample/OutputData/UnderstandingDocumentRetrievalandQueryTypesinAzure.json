{
  "Id": "386",
  "Title": "\u0022Understanding Document Retrieval and Query Types in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIt doesn\u2019t apply to query types with incomplete terms \u2013 prefixquery, wildcard query, regex query \u2013 or to a fuzzy query. Those query types, includingthe prefix query with term air-condition* in our example, are added directly to thequery tree, bypassing the analysis stage. The only transformation performed on queryterms of those types is lowercasing.\r\nDocument retrieval refers to finding documents with matching terms in the index. Thisstage is understood best through an example. Let\u0027s start with a hotels index having thefollowing simple schema:JSONFurther assume that this index contains the following four documents:JSONStage 3: Document retrieval{    \u0022name\u0022: \u0022hotels\u0022,    \u0022fields\u0022: [        { \u0022name\u0022: \u0022id\u0022, \u0022type\u0022: \u0022Edm.\r\nString\u0022, \u0022key\u0022: true, \u0022searchable\u0022: false },        { \u0022name\u0022: \u0022title\u0022, \u0022type\u0022: \u0022Edm.String\u0022, \u0022searchable\u0022: true },        { \u0022name\u0022: \u0022description\u0022, \u0022type\u0022: \u0022Edm.String\u0022, \u0022searchable\u0022: true }    ] } {    \u0022value\u0022: [        {            \u0022id\u0022: \u00221\u0022,            \u0022title\u0022: \u0022Hotel Atman\u0022,            \u0022description\u0022: \u0022Spacious rooms, ocean view, walking distance to the beach.\r\n\u0022        },        {            \u0022id\u0022: \u00222\u0022,            \u0022title\u0022: \u0022Beach Resort\u0022,            \u0022description\u0022: \u0022Located on the north shore of the island of Kaua\u02BBi. Ocean view.\u0022        },        {            \u0022id\u0022: \u00223\u0022,            \u0022title\u0022: \u0022Playa Hotel\u0022,            \u0022description\u0022: \u0022Comfortable, air-conditioned rooms with ocean view. \u0022How terms are indexedTo understand retrieval, it helps to know a few basics about indexing. The unit of storageis an inverted index, one for each searchable field. Within an inverted index is a sortedlist of all terms from all documents. Each term maps to the list of documents in which itoccurs, as evident in the example below.\n"
}