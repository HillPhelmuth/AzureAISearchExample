{
  "Id": "1092",
  "Title": "\u0022Implementing Bing Entity Search API in C# with Azure Functions\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfOutputRecordData                     {                         Description = entity.Description,                         Name = entity.Name                     };                     if (entity.ContractualRules != null)                     {                         foreach (var rule in entity.ContractualRules)                         {                             switch (rule._type)                             { Make sure to enter your own key value in the key constant based on the key you gotwhen signing up for the Bing entity search API.This sample includes all necessary code in a single file for convenience. You can find aslightly more structured version of that same skill in the power skills repository.\r\nOf course, you may rename the file from Function1.cs to BingEntitySearch.cs.Press F5 to run the program and test function behaviors. In this case, we\u0027ll use thefunction below to look up two entities. Use Postman or Fiddler to issue a call like theone shown below:HTTPJSON                                case \u0022ContractualRules/LicenseAttribution\u0022:                                     rootObject.\r\nLicenseAttribution = rule.LicenseNotice;                                     rootObject.LicenseUrl = rule.License.Url;                                     break;                                 case \u0022ContractualRules/LinkAttribution\u0022:                                     rootObject.Source = rule.Text;                                     rootObject.SourceUrl = rule.\r\nUrl;                                     break;                             }                         }                     }                     return rootObject;                 }             }             return new OutputRecord.\r\nOutputRecordData();\r\n}         #endregion     } } Test the function from Visual StudioPOST https://localhost:7071/api/EntitySearch Request bodyYou should see a response similar to the following example:JSON{     \u0022values\u0022: [         {             \u0022recordId\u0022: \u0022e1\u0022,             \u0022data\u0022:             {                 \u0022name\u0022:  \u0022Pablo Picasso\u0022             }         },         {             \u0022recordId\u0022: \u0022e2\u0022,             \u0022data\u0022:             {                 \u0022name\u0022:  \u0022Microsoft\u0022             }         }     ] } Response{     \u0022values\u0022: [         {             \u0022recordId\u0022: \u0022e1\u0022,             \u0022data\u0022: {                 \u0022name\u0022: \u0022Pablo Picasso\u0022,                 \u0022description\u0022: \u0022Pablo Ruiz Picasso was a Spanish painter [.\n"
}