{
  "Id": "251",
  "Title": "\u0022Configuring Azure Cognitive Search for Hotel Data Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfcsin the following field definition for HotelName. A SearchableField is full-text searchableby definition. Other attributes are assigned explicitly.C#A schema can also include other elements, including scoring profiles for boosting asearch score, custom analyzers, and other constructs. However, for our purposes, theschema is sparsely defined, consisting only of fields found in the sample datasets.The main program includes logic for creating an indexer client, an index, a data source,and an indexer. The code checks for and deletes existing resources of the same name,under the assumption that you might run this program multiple times.\r\nThe data source object is configured with settings that are specific to Azure SQLDatabase resources, including partial or incremental indexing for using the built-inchange detection features of Azure SQL. The source demo hotels database in Azure SQLhas a \u0022soft delete\u0022 column named IsDeleted.\r\nWhen this column is set to true in thedatabase, the indexer removes the corresponding document from the Azure CognitiveSearch index.C#An indexer object is platform-agnostic, where configuration, scheduling, and invocationare the same regardless of the source. This example indexer includes a schedule, a resetoption that clears indexer history, and calls a method to create and run the indexerimmediately.\r\nTo create or update an indexer, use CreateOrUpdateIndexerAsync.. . .  [SearchableField(IsFilterable = true, IsSortable = true)] [JsonPropertyName(\u0022hotelName\u0022)] public string HotelName { get; set; } . . . In Program.csConsole.WriteLine(\u0022Creating data source...\u0022); var dataSource =       new SearchIndexerDataSourceConnection(          \u0022hotels-sql-ds\u0022,          SearchIndexerDataSourceType. AzureSql,          configuration[\u0022AzureSQLConnectionString\u0022],          new SearchIndexerDataContainer(\u0022hotels\u0022)); indexerClient.CreateOrUpdateDataSourceConnection(dataSource); C#Indexer runs are usually scheduled, but during development you might want to run theindexer immediately using RunIndexerAsync.\n"
}