{
  "Id": "391",
  "Title": "\u0022Relevance Tuning and Scoring in Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor this reason, weignore term frequencies when scoring results in queries of types wildcard, prefix andregex. In a multi-part search request that includes partial and complete terms, resultsfrom the partial input are incorporated with a constant score to avoid bias towardspotentially unexpected matches.There are two ways to tune relevance scores in Azure Cognitive Search:1.\r\nScoring profiles promote documents in the ranked list of results based on a set ofrules. In our example, we could consider documents that matched in the title fieldmore relevant than documents that matched in the description field. Additionally,if our index had a price field for each hotel, we could promote documents withlower price.\r\nLearn more about adding scoring profiles to a search index.2. Term boosting (available only in the Full Lucene query syntax) provides a boostingoperator ^ that can be applied to any part of the query tree. In our example,      \u0022id\u0022: \u00222\u0022,      \u0022title\u0022: \u0022Ocean Resort\u0022,      \u0022description\u0022: \u0022Located on a cliff on the north shore of the island of Kauai. Ocean view.\r\n\u0022    }  ]}Relevance tuninginstead of searching on the prefix air-condition*, one could search for either theexact term air-condition or the prefix, but documents that match on the exact termare ranked higher by applying boost to the term query: air-condition^2||air-condition*. Learn more about term boosting in a query.\r\nAll indexes in Azure Cognitive Search are automatically split into multiple shards,allowing us to quickly distribute the index among multiple nodes during service scale upor scale down. When a search request is issued, it\u2019s issued against each shardindependently. The results from each shard are then merged and ordered by score (if noother ordering is defined). It\u0027s important to know that the scoring function weightsquery term frequency against its inverse document frequency in all documents withinthe shard, not across all shards!This means a relevance score could be different for identical documents if they reside ondifferent shards. Fortunately, such differences tend to disappear as the number ofdocuments in the index grows due to more even term distribution. It\u2019s not possible toassume on which shard any given document will be placed. However, assuming adocument key doesn\u0027t change, it will always be assigned to the same shard.In general, document score isn\u0027t the best attribute for ordering documents if orderstability is important.\n"
}