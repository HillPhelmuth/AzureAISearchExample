{
  "Id": "946",
  "Title": "\u0022Optimizing Azure Cosmos DB for Azure AI Search Integration\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfname FROM c ORDER BY c.nameAlthough Azure Cosmos DB has a workaround to support SQL query pagination with theDISTINCT keyword by using the ORDER BY clause, it isn\u0027t compatible with Azure AISearch. The query will return a single JSON value, whereas Azure AI Search expects aJSON object.\r\nSQLIn a search index, add fields to accept the source JSON documents or the output of yourcustom query projection. Ensure that the search index schema is compatible with sourcedata. For content in Azure Cosmos DB, your search index schema should correspond tothe Azure Cosmos DB items in your data source.1.\r\nCreate or update an index to define search fields that will store data:HTTPSELECT TOP 4 COUNT(1) AS foodGroupCount, f.foodGroup FROM Food f GROUP BY f.foodGroup-- The following query returns a single JSON value and isn\u0027t supported by Azure AI SearchSELECT DISTINCT VALUE c.name FROM c ORDER BY c.nameAdd search fields to an indexPOST https://[service name].search.windows.\r\nnet/indexes?api-version=2020-06-30Content-Type: application/jsonapi-key: [Search service admin key]{    \u0022name\u0022: \u0022mysearchindex\u0022,    \u0022fields\u0022: [{        \u0022name\u0022: \u0022rid\u0022,        \u0022type\u0022: \u0022Edm.String\u0022,        \u0022key\u0022: true,        \u0022searchable\u0022: false    },     {        \u0022name\u0022: \u0022description\u0022,        \u0022type\u0022: \u0022Edm. String\u0022,        \u0022filterable\u0022: false,        \u0022searchable\u0022: true,        \u0022sortable\u0022: false,        \u0022facetable\u0022: false,        \u0022suggestions\u0022: true    }2. Create a document key field (\u0022key\u0022: true). For partitioned collections, the defaultdocument key is the Azure Cosmos DB _rid property, which Azure AI Searchautomatically renames to rid because field names can\u2019t start with an underscorecharacter.\n"
}