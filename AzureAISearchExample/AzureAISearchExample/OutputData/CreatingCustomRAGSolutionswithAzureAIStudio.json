{
  "Id": "416",
  "Title": "\u0022Creating Custom RAG Solutions with Azure AI Studio\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfsearch(search,                          filter=filter,                         query_type=QueryType.SEMANTIC,                          query_language=\u0022en-us\u0022,                          query_speller=\u0022lexicon\u0022,                          semantic_configuration_name=\u0022default\u0022,                          top=3)results = [doc[KB_FIELDS_SOURCEPAGE] \u002B \u0022: \u0022 \u002B doc[KB_FIELDS_CONTENT].replace(\u0022\\n\u0022, \u0022\u0022).\r\nreplace(\u0022\\r\u0022, \u0022\u0022) for doc in r]content = \u0022\\n\u0022.join(results)prompt = prompt_prefix.format(sources=content) \u002B prompt_history \u002B user_input \u002B turn_suffixcompletion = openai.Completion.create(    engine=AZURE_OPENAI_CHATGPT_DEPLOYMENT,     prompt=prompt,     temperature=0.7,     max_tokens=1024,    stop=[\u0022\u003C|im_end|\u003E\u0022, \u0022\u003C|im_start|\u003E\u0022])prompt_history \u002B= user_input \u002B turn_suffix \u002B completion.\r\nchoices[0].text \u002B \u0022\\n\u003C|im_end|\u003E\u0022 \u002B turn_prefixhistory.append(\u0022user: \u0022 \u002B user_input)history.append(\u0022assistant: \u0022 \u002B completion.choices[0].text)Use Azure AI Studio to create a search index.Use Azure OpenAI Studio and \u0022bring your own data\u0022 to experiment with promptson an existing search index in a playground.\r\nThis step helps you decide whatmodel to use, and shows you how well your existing index works in a RAG scenario.\u0022Chat with your data\u0022 solution accelerator, built by the Azure AI Search team,helps you create your own custom RAG solution.Enterprise chat app templates deploy Azure resources, code, and samplegrounding data using fictitious health plan documents for Contoso and Northwind. This end-to-end solution gives you an operational chat app in as little as 15minutes. Code for these templates is the azure-search-openai-demo featured inseveral presentations. The following links provide language-specific versions:.NETPythonJavaScriptJavaReview indexing concepts and strategies to determine how you want to ingest andrefresh data.\n"
}