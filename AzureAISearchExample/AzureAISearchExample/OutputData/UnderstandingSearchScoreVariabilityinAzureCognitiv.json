{
  "Id": "425",
  "Title": "\u0022Understanding Search Score Variability in Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfSearch scores convey general sense of relevance, reflecting the strength of matchrelative to other documents in the same result set. But scores aren\u0027t always consistentfrom one query to the next, so as you work with queries, you might notice smalldiscrepancies in how search documents are ordered. There are several explanations forwhy this might occur.\r\nCauseDescriptionDatavolatilityIndex content varies as you add, modify, or delete documents. Term frequencies willchange as index updates are processed over time, affecting the search scores ofmatching documents.MultiplereplicasFor services using multiple replicas, queries are issued against each replica in parallel.\r\nThe index statistics used to calculate a search score are calculated on a per-replicabasis, with results merged and ordered in the query response. Replicas are mostlymirrors of each other, but statistics can differ due to small differences in state. Forexample, one replica might have deleted documents contributing to their statistics,which were merged out of other replicas.\r\nTypically, differences in per-replica statisticsare more noticeable in smaller indexes. For more information about this condition, seeConcepts: search units, replicas, partitions, shards in the capacity planningdocumentation.IdenticalscoresIf multiple documents have the same score, any one of them might appear first.For scalability, Azure Cognitive Search distributes each index horizontally through asharding process, which means that portions of an index are physically separate.Scores in a text resultsScore variationScoring statistics and sticky sessionsBy default, the score of a document is calculated based on statistical properties of thedata within a shard. This approach is generally not a problem for a large corpus of data,and it provides better performance than having to calculate the score based oninformation across all shards. That said, using this performance optimization could causetwo very similar documents (or even identical documents) to end up with differentrelevance scores if they end up in different shards.\n"
}