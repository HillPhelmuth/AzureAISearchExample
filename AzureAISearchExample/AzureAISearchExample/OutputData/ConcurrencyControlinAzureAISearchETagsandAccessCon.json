{
  "Id": "640",
  "Title": "\u0022Concurrency Control in Azure AI Search: ETags and AccessConditions\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfObjects that use ETags, such asSynonymMap.ETag and SearchIndex.ETag, have an accessCondition object.Every time you update a resource, its ETag changes automatically. When you implementconcurrency management, all you\u0027re doing is putting a precondition on the updaterequest that requires the remote resource to have the same ETag as the copy of the\uEA80 TipConceptual code in a sample C# solution explains how concurrency controlworks in Azure AI Search.\r\nThe code creates conditions that invoke concurrencycontrol. Reading the code fragment below might be sufficient for most developers,but if you want to run it, edit appsettings.\r\njson to add the service name and anadmin api-key. Given a service URL of http://myservice.search.windows.net, theservice name is myservice.How it worksresource that you modified on the client. If a concurrent process has changed theremote resource already, the ETag will not match the precondition and the request willfail with HTTP 412.\r\nIf you\u0027re using the .NET SDK, this manifests as a CloudExceptionwhere the IsAccessConditionFailed() extension method returns true.The following code demonstrates accessCondition checks for key update operations:Fail an update if the resource no longer existsFail an update if the resource version changesC#\uFF17 NoteThere is only one mechanism for concurrency. It\u0027s always used regardless of whichAPI is used for resource updates.Use cases and sample codeSample code from DotNetETagsExplainer programclass Program{    // This sample shows how ETags work by performing conditional updates and deletes    // on an Azure AI Search index.    static void Main(string[] args)    {        IConfigurationBuilder builder = new ConfigurationBuilder().AddJsonFile(\u0022appsettings.json\u0022);        IConfigurationRoot configuration = builder.Build();        SearchServiceClient serviceClient = CreateSearchServiceClient(configuration);        Console.WriteLine(\u0022Deleting index...\n"
}