{
  "Id": "148",
  "Title": "\u0022Building a Search Function with Azure Functions and AI\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfModels;using Microsoft.Azure.Functions.Worker;using Microsoft.Azure.Functions.Worker.Http;using Microsoft.Extensions.Logging;using System.Net;using System.Text.Json;using System.Text.Json.Serialization;using WebSearch.Models;using SearchFilter = WebSearch.Models.SearchFilter;namespace WebSearch.Function{    public class Search    {        private static string searchApiKey = Environment.GetEnvironmentVariable(\u0022SearchApiKey\u0022, EnvironmentVariableTarget.Process);        private static string searchServiceName = Environment.GetEnvironmentVariable(\u0022SearchServiceName\u0022, EnvironmentVariableTarget.Process);        private static string searchIndexName = Environment.\r\nGetEnvironmentVariable(\u0022SearchIndexName\u0022, EnvironmentVariableTarget.Process) ?? \u0022good-books\u0022;        private readonly ILogger\u003CLookup\u003E _logger;        public Search(ILogger\u003CLookup\u003E logger)        {            _logger = logger;        }        [Function(\u0022search\u0022)]        public async Task\u003CHttpResponseData\u003E RunAsync(            [HttpTrigger(AuthorizationLevel.Anonymous, \u0022post\u0022)] HttpRequestData req,             FunctionContext executionContext)        {            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();            var data = JsonSerializer.\r\nDeserialize\u003CRequestBodySearch\u003E(requestBody);            // Azure AI Search             Uri serviceEndpoint = new($\u0022https://{searchServiceName}.search.windows.net/\u0022);            SearchClient searchClient = new(                serviceEndpoint,                searchIndexName,                new AzureKeyCredential(searchApiKey)            );            SearchOptions options = new()            {                Size = data.Size,                Skip = data.Skip,                IncludeTotalCount = true,                Filter = CreateFilterExpression(data.Filters)            };            options.Facets.Add(\u0022authors\u0022);            options.Facets. Add(\u0022language_code\u0022);            SearchResults\u003CSearchDocument\u003E searchResults = searchClient.Search\u003CSearchDocument\u003E(data.SearchText, options);            var facetOutput = new Dictionary\u003Cstring, IList\u003CFacetValue\u003E\u003E();            foreach (var facetResult in searchResults.Facets)            {                facetOutput[facetResult.Key] = facetResult.Value                           .Select(x =\u003E new FacetValue { value = x.Value.ToString(), count = x.Count })                           .ToList();            }            // Data to return             var output = new SearchOutput            {                Count = searchResults.\n"
}