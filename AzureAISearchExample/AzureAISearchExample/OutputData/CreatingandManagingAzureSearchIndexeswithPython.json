{
  "Id": "196",
  "Title": "\u0022Creating and Managing Azure Search Indexes with Python\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfcom/Azure-Samples/azure-search-sample-data/main/good-books/books.csv\u0022batch_size = 1000# Instantiate a clientclass CreateClient(object):    def __init__(self, endpoint, key, index_name):        self.endpoint = endpoint        self.index_name = index_name        self.key = key        self.credentials = AzureKeyCredential(key)    # Create a SearchClient    # Use this to upload docs to the Index    def create_search_client(self):        return SearchClient(            endpoint=self.endpoint,            index_name=self.index_name,            credential=self.\r\ncredentials,        )    # Create a SearchIndexClient    # This is used to create, manage, and delete an index    def create_admin_client(self):        return SearchIndexClient(endpoint=endpoint, credential=self.credentials)# Get Schema from File or URLdef get_schema_data(schema, url=False):    if not url:        with open(schema) as json_file:            schema_data = json.load(json_file)            return schema_data    else:        data_from_url = requests.get(schema)        schema_data = json.loads(data_from_url.\r\ncontent)        return schema_data# Create Search Index from the schema# If reading the schema from a URL, set url=Truedef create_schema_from_json_and_upload(schema, index_name, admin_client, url=False):\r\ncors_options = CorsOptions(allowed_origins=[\u0022*\u0022], max_age_in_seconds=60)    scoring_profiles = []    schema_data = get_schema_data(schema, url)    index = SearchIndex(        name=index_name,        fields=schema_data[\u0022fields\u0022],        scoring_profiles=scoring_profiles,        suggesters=schema_data[\u0022suggesters\u0022],        cors_options=cors_options,    )    try:        upload_schema = admin_client. create_index(index)        if upload_schema:            print(f\u0022Schema uploaded; Index created for {index_name}.\u0022)        else:            exit(0)    except:        print(\u0022Unexpected error:\u0022, sys.\n"
}