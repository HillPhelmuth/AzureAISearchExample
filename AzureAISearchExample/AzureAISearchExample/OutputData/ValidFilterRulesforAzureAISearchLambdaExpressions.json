{
  "Id": "1233",
  "Title": "\u0022Valid Filter Rules for Azure AI Search Lambda Expressions\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfismatch and search.ismatchscoring aren\u0027t supported insidelambda expressions. For more information, see Understanding OData collection filters inAzure AI Search.Second, referencing fields that aren\u0027t bound to the range variable (so-called freevariables) isn\u0027t allowed. For example, consider the following two equivalent OData filterexpressions:1.\r\nstores/any(s: s/amenities/any(a: a eq \u0027parking\u0027)) and details/margin gt 0.52. stores/any(s: s/amenities/any(a: a eq \u0027parking\u0027 and details/margin gt 0.5))The first expression will be allowed, while the second form will be rejected becausedetails/margin isn\u0027t bound to the range variable s.This rule also extends to expressions that have variables bound in an outer scope.\r\nSuchvariables are free with respect to the scope in which they appear. For example, the firstexpression is allowed, while the second equivalent expression isn\u0027t allowed becauses/name is free with respect to the scope of the range variable a:1. stores/any(s: s/amenities/any(a: a eq \u0027parking\u0027) and s/name ne \u0027Flagship\u0027)2.\r\nstores/any(s: s/amenities/any(a: a eq \u0027parking\u0027 and s/name ne \u0027Flagship\u0027))This limitation shouldn\u0027t be a problem in practice since it\u0027s always possible to constructfilters such that lambda expressions contain only bound variables.The following table summarizes the rules for constructing valid filters for each collectiondata type. Data typeFeatures allowed inlambda expressions withanyFeatures allowed inlambda expressionswith allCollection(Edm.ComplexType)Everything exceptsearch.ismatch andsearch.ismatchscoringSameCollection(Edm.String)Comparisons with eq orsearch.inCombining sub-expressionswith orComparisons with ne ornot search.\n"
}