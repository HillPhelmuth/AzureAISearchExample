{
  "Id": "45",
  "Title": "\u0022Configuring Semantic Search and Indexing in Azure AI Services\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfConfigurations.Add(new SemanticConfiguration        (            \u0022my-semantic-config\u0022,            new PrioritizedFields()            {                TitleField = new SemanticField { FieldName = \u0022HotelName\u0022 },                ContentFields = {                new SemanticField { FieldName = \u0022Description\u0022 },                new SemanticField { FieldName = \u0022Description_fr\u0022 }                },                KeywordFields = {                new SemanticField { FieldName = \u0022Tags\u0022 },                new SemanticField { FieldName = \u0022Category\u0022 }                }            })        );    definition.\r\nSemanticSettings = semanticSettings;The following code creates the index on your search service:C#Azure AI Search searches over content stored in the service. The code for uploadingdocuments is identical to the C# quickstart for full text search so we don\u0027t need toduplicate it here. You should have four hotels with names, addresses, anddescriptions.\r\nYour solution should have types for Hotels and Addresses.Here\u0027s a query that invokes semantic ranking, with search options for specifyingparameters:C#    adminClient.CreateOrUpdateIndex(definition);}// Create indexConsole.WriteLine(\u0022{0}\u0022, \u0022Creating index...\\n\u0022);CreateIndex(indexName, adminClient);SearchClient ingesterClient = adminClient.\r\nGetSearchClient(indexName);Load documentsSearch an index// Query 4Console.WriteLine(\u0022Query #3: Invoke semantic ranking\u0022);options = new SearchOptions(){    QueryType = Azure.Search.Documents.Models.SearchQueryType.Semantic,    SemanticConfigurationName = \u0022my-semantic-config\u0022,    QueryCaption = QueryCaptionType.Extractive,    QueryCaptionHighlightEnabled = true};options. Select.Add(\u0022HotelName\u0022);options.Select.Add(\u0022Category\u0022);options.Select.Add(\u0022Description\u0022);// response = srchclient.Search\u003CHotel\u003E(\u0022*\u0022, options);response = srchclient.Search\u003CHotel\u003E(\u0022what hotel has a good restaurant on site\u0022, options);WriteDocuments(response);For comparison, here are results from a query that uses the default BM25 ranking,based on term frequency and proximity.\n"
}