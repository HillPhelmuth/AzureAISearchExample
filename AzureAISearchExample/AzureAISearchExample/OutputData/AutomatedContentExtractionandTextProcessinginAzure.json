{
  "Id": "303",
  "Title": "\u0022Automated Content Extraction and Text Processing in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor a larger data source, you would set the value to greater than 0.Also notice the \u0022dataToExtract\u0022 is set to \u0022contentAndMetadata\u0022. This statement tells theindexer to automatically extract the content from different file formats as well asmetadata related to each file.When content is extracted, you can set imageAction to extract text from images found inthe data source.\r\nThe \u0022imageAction\u0022 set to \u0022generateNormalizedImages\u0022 configuration,combined with the OCR Skill and Text Merge Skill, tells the indexer to extract text fromthe images (for example, the word \u0022stop\u0022 from a traffic Stop sign), and embed it as partof the content field.\r\nThis behavior applies to both the images embedded in thedocuments (think of an image inside a PDF), as well as images found in the data source,for instance a JPG file.Once the indexer is defined, it runs automatically when you submit the request.Depending on which cognitive skills you defined, indexing can take longer than you// Create the indexer, map fields, and execute transformationsConsole.\r\nWriteLine(\u0022Creating the indexer and executing the pipeline...\u0022);SearchIndexer demoIndexer = CreateDemoIndexer(indexerClient, dataSource, skillset, demoIndex);\uEA80 TipCreating an indexer invokes the pipeline. If there are problems reaching the data,mapping inputs and outputs, or order of operations, they appear at this stage.\r\nExplore creating the indexer4 - Monitor indexingexpect. To find out whether the indexer is still running, use the GetStatus method.C#demoIndexerExecutionInfo represents the current status and execution history of anindexer.Warnings are common with some source file and skill combinations and do not alwaysindicate a problem. In this tutorial, the warnings are benign (for example, no text inputsfrom the JPEG files).Add the following lines to Main.C#private static void CheckIndexerOverallStatus(SearchIndexerClient indexerClient, SearchIndexer indexer){    try    {        var demoIndexerExecutionInfo = indexerClient.GetIndexerStatus(indexer.Name);        switch (demoIndexerExecutionInfo.Value.Status)        {            case IndexerStatus.Error:                ExitProgram(\u0022Indexer has error status. Check the Azure Portal to further understand the error.\u0022);                break;            case IndexerStatus.Running:                Console.\n"
}