{
  "Id": "1549",
  "Title": "\u0022Implementing Azure Cognitive Search Client with Python Async APIs\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfPython# Create a SearchClient that will authenticate through AAD in the China national cloud.import osfrom azure.identity import DefaultAzureCredential, AzureAuthorityHostsfrom azure.search.documents import SearchClientindex_name = \u0022hotels\u0022endpoint = os.environ[\u0022SEARCH_ENDPOINT\u0022]key = os.environ[\u0022SEARCH_API_KEY\u0022]credential = DefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_CHINA)search_client = SearchClient(endpoint, index_name, credential=credential, audience=\u0022https://search.azure.cn\u0022)Retrieving a specific document from your indexfrom azure.core.credentials import AzureKeyCredentialfrom azure.search.\r\ndocuments import SearchClientsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))result = search_client.get_document(key=\u002223\u0022)print(\u0022Details for hotel \u002723\u0027 are:\u0022)print(\u0022        Name: {}\u0022.format(result[\u0022hotelName\u0022]))print(\u0022      Rating: {}\u0022.format(result[\u0022rating\u0022]))print(\u0022    Category: {}\u0022.format(result[\u0022category\u0022]))This library includes a complete async API.\r\nTo use it, you must first install an asynctransport, such as aiohttp. See azure-core documentation for more information.PythonThe Azure Cognitive Search client will raise exceptions defined in Azure Core.This library uses the standard logging library for logging. Basic information aboutHTTP sessions (URLs, headers, etc. ) is logged at INFO level.Detailed DEBUG level logging, including request/response bodies and unredactedheaders, can be enabled on a client with the logging_enable keyword argument:PythonAsync APIsfrom azure.core.credentials import AzureKeyCredentialfrom azure.search.documents.aio import SearchClientsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))async with search_client:    results = await search_client.search(search_text=\u0022spa\u0022)    print(\u0022Hotels containing \u0027spa\u0027 in the name (or other fields):\u0022)    async for result in results:        print(\u0022    Name: {} (rating {})\u0022.\n"
}