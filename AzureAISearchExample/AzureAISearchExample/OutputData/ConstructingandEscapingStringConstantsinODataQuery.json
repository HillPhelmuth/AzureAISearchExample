{
  "Id": "1602",
  "Title": "\u0022Constructing and Escaping String Constants in OData Query Syntax\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIf you need to construct aquery with a string constant that might itself contain single quotes, you can escape theembedded quotes by doubling them.For example, a phrase with an unformatted apostrophe like \u0022Alice\u0027s car\u0022 would berepresented in OData as the string constant \u0027Alice\u0027\u0027s car\u0027.The following EBNF (Extended Backus-Naur Form) defines the grammar for most ofthe constants shown in the above table.\r\nThe grammar for geo-spatial types can befound in OData geo-spatial functions in Azure AI Search.Escaping special characters in string constants\uFF09 ImportantWhen constructing filters programmatically, it\u0027s important to remember to escapestring constants that come from user input. This is to mitigate the possibility ofinjection attacks, especially when using filters to implement security trimming.\r\nConstants syntaxconstant ::=    string_literal    | date_time_offset_literal    | integer_literal    | float_literal    | boolean_literal    | \u0027null\u0027string_literal ::= \u0022\u0027\u0022([^\u0027] | \u0022\u0027\u0027\u0022)*\u0022\u0027\u0022date_time_offset_literal ::= date_part\u0027T\u0027time_part time_zonedate_part ::= year\u0027-\u0027month\u0027-\u0027daytime_part ::= hour\u0027:\u0027minute(\u0027:\u0027second(\u0027.\r\n\u0027fractional_seconds)?)?\r\nzero_to_fifty_nine ::= [0-5]digitAn interactive syntax diagram is also available:digit ::= [0-9]year ::= digit digit digit digitmonth ::= \u00270\u0027[1-9] | \u00271\u0027[0-2]day ::= \u00270\u0027[1-9] | [1-2]digit | \u00273\u0027[0-1]hour ::= [0-1]digit | \u00272\u0027[0-3]minute : := zero_to_fifty_ninesecond ::= zero_to_fifty_ninefractional_seconds ::= integer_literaltime_zone ::= \u0027Z\u0027 | sign hour\u0027:\u0027minutesign ::= \u0027\u002B\u0027 | \u0027-\u0027/* In practice integer literals are limited in length to the precision ofthe corresponding EDM data type.\n*/integer_literal ::= digit\u002Bfloat_literal ::=    sign? whole_part fractional_part? exponent?    | \u0027NaN\u0027    | \u0027-INF\u0027    | \u0027INF\u0027whole_part ::= integer_literalfractional_part ::= \u0027.\n"
}