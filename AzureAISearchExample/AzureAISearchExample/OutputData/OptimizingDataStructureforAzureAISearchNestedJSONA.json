{
  "Id": "745",
  "Title": "\u0022Optimizing Data Structure for Azure AI Search: Nested JSON Approach\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIn our approach, a view provides thequery that returns 50 rows, one row per hotel, with associated room detail embeddedinto each row.One of the challenges in working with one-to-many relationships is that standardqueries built on joined tables return denormalized data, which doesn\u0027t work well in anAzure AI Search scenario. Consider the following example that joins hotels and rooms.\r\nSQLThe problem of denormalized dataSELECT * FROM Hotels$INNER JOIN Rooms$Results from this query return all of the Hotel fields, followed by all Room fields, withpreliminary hotel information repeating for each room value.While this query succeeds on the surface (providing all of the data in a flat row set), itfails in delivering the right document structure for the expected search experience.During indexing, Azure AI Search creates one search document for each row ingested. Ifyour search documents looked like the above results, you would have perceivedduplicates - seven separate documents for the Twin Dome hotel alone.\r\nA query on\u0022hotels in Florida\u0022 would return seven results for just the Twin Dome hotel, pushingother relevant hotels deep into the search results.To get the expected experience of one document per hotel, you should provide a rowsetat the right granularity, but with complete information. This article explains how.\r\nTo deliver the expected search experience, your data set should consist of one row foreach search document in Azure AI Search. In our example, we want one row for eachhotel, but we also want our users to be able to search on other room-related fields theycare about, such as the nightly rate, size and number of beds, or a view of the beach, allof which are part of a room detail. The solution is to capture the room detail as nested JSON, and then insert the JSONstructure into a field in a view, as shown in the second step.1. Assume you\u0027ve two joined tables, Hotels$ and Rooms$, that contain details for 50hotels and 750 rooms and are joined on the HotelID field. Individually, these tablescontain 50 hotels and 750 related rooms.\n"
}