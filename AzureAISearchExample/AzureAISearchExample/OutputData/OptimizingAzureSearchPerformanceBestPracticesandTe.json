{
  "Id": "1326",
  "Title": "\u0022Optimizing Azure Search Performance: Best Practices and Techniques\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAmount of data being returned. Retrieving a large amount content can makequeries slower. When structuring a query, return only those fields that you need torender the results page, and then retrieve remaining fields using the Lookup APIonce a user selects a match.Use of partial term searches. Partial term searches, such as prefix search, fuzzysearch, and regular expression search, are more computationally expensive thantypical keyword searches, as they require full index scans to produce results.Number of facets. Adding facets to queries requires aggregations for each query.Requesting a higher \u0022count\u0022 for a facet also requires extra work by the service.\r\nIngeneral, only add the facets that you plan to render in your app and avoidrequesting a high count for facets unless necessary.High skip values. Setting the $skip parameter to a high value (for example, in thethousands) increases search latency because the engine is retrieving and ranking alarger volume of documents for each request.\r\nFor performance reasons, it\u0027s best toavoid high $skip values and use other techniques instead, such as filtering, toretrieve large numbers of documents.Query designLimit high cardinality fields. A high cardinality field refers to a facetable orfilterable field that has a significant number of unique values, and as a result,consumes significant resources when computing results.\r\nFor example, setting aProduct ID or Description field as facetable and filterable would count as highcardinality because most of the values from document to document are unique.As a query uses increasingly complex filter criteria, the performance of the search querywill degrade. Consider the following example that demonstrates the use of filters to trimresults based on a user identity:JSONIn this case, the filter expressions are used to check whether a single field in eachdocument is equal to one of many possible values of a user identity. You\u0027re most likelyto find this pattern in applications that implement security trimming (checking a fieldcontaining one or more principal IDs against a list of principal IDs representing the userissuing the query).A more efficient way to execute filters that contain a large number of values is to usesearch.\n"
}