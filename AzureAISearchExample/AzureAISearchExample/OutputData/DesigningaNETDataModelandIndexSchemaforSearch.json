{
  "Id": "652",
  "Title": "\u0022Designing a .NET Data Model and Index Schema for Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfWriteLine();} SearchIndex index = new SearchIndex(indexName) {     Fields =         {             new SimpleField(\u0022hotelId\u0022, SearchFieldDataType.String) { IsKey = true, IsFilterable = true, IsSortable = true },             new SearchableField(\u0022hotelName\u0022) { IsFilterable = true, IsSortable = true },             new SearchableField(\u0022hotelCategory\u0022) { IsFilterable = true, IsSortable = true },             new SimpleField(\u0022baseRate\u0022, SearchFieldDataType.\r\nInt32) { IsFilterable = true, IsSortable = true },             new SimpleField(\u0022lastRenovationDate\u0022, Your data model in .NET and its corresponding index schema should support the searchexperience you\u0027d like to give to your end user. Each top level object in .\r\nNET, such as asearch document in a search index, corresponds to a search result you would present inyour user interface. For example, in a hotel search application your end users may wantto search by hotel name, features of the hotel, or the characteristics of a particular room.Within each class, a field is defined with a data type and attributes that determine howit\u0027s used.\r\nThe name of each public property in each class maps to a field with the samename in the index definition.Take a look at the following snippet that pulls several field definitions from the Hotelclass. Notice that Address and Rooms are C# types with their own class definitions (referto the sample code if you want to view them). Both are complex types. For moreinformation, see How to model complex types.C#SearchFieldDataType.DateTimeOffset) { IsFilterable = true, IsSortable = true }         } };Field definitionspublic partial class Hotel{    [SimpleField(IsKey = true, IsFilterable = true)]    public string HotelId { get; set; }    [SearchableField(IsSortable = true)]    public string HotelName { get; set; }    [SearchableField(AnalyzerName = LexicalAnalyzerName.\n"
}