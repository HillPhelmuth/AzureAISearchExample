{
  "Id": "1517",
  "Title": "\u0022Java Model Class for Azure Search Indexing and Querying\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf%n\u0022, id, name);}Use Java model class for search resultspublic class Hotel {    private String id;    private String name;    public String getId() {        return id;    }    public Hotel setId(String id) {        this.id = id;        return this;    }    public String getName() {        return name;    }    public Hotel setName(String name) {        this.\r\nname = name;        return this;    }}It is recommended, when you know the schema of the search index, to create a Javamodel class.The SearchOptions provide powerful control over the behavior of our queries.Let\u0027s search for the top 5 luxury hotels with a good rating.JavaYou can use the SearchIndexClient to create a search index.\r\nIndexes can also definesuggesters, lexical analyzers, and more.There are multiple ways of preparing search fields for a search index. For basic needs, weprovide a static helper method buildSearchFields in SearchIndexClient andSearchIndexAsyncClient, which can convert Java POJO class into List\u003CSearchField\u003E.\r\nThere are three annotations SimpleFieldProperty, SearchFieldProperty andFieldBuilderIgnore to configure the field of model class.Javafor (SearchResult searchResult : SEARCH_CLIENT.search(\u0022luxury\u0022)) {    Hotel doc = searchResult.getDocument(Hotel.class);    String id = doc.getId();    String name = doc.getName();    System.out. printf(\u0022This is hotelId %s, and this is hotel name %s.%n\u0022, id, name);}Search OptionsSearchOptions options = new SearchOptions()    .setFilter(\u0022rating ge 4\u0022)    .setOrderBy(\u0022rating desc\u0022)    .setTop(5);SearchPagedIterable searchResultsIterable = SEARCH_CLIENT.search(\u0022luxury\u0022, options, Context.NONE);// ...Creating an indexList\u003CSearchField\u003E searchFields = SearchIndexClient.\n"
}