{
  "Id": "37",
  "Title": "\u0022Indexing and Querying Documents in Azure Search Using C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf60,                Address = new Address()                {                    StreetAddress = \u00227400 San Pedro Ave\u0022,                    City = \u0022San Antonio\u0022,                    StateProvince = \u0022TX\u0022,                    PostalCode = \u002278216\u0022,                    Country = \u0022USA\u0022                }            })        );    try    {        IndexDocumentsResult result = searchClient.IndexDocuments(batch);    }    catch (Exception)    {        // If for some reason any documents are dropped during indexing, you can compensate by delaying andOnce you initialize the IndexDocumentsBatch object, you can send it to theindex by calling IndexDocuments on your SearchClient object.\r\n2. Add the following lines to Main(). Loading documents is done usingSearchClient, but the operation also requires admin rights on the service,which is typically associated with SearchIndexClient. One way to set up thisoperation is to get SearchClient through SearchIndexClient (adminClient inthis example).C#3.\r\nBecause this is a console app that runs all commands sequentially, add a 2-second wait time between indexing and queries.C#The 2-second delay compensates for indexing, which is asynchronous, so thatall documents can be indexed before the queries are executed. Coding in adelay is typically only necessary in demos, tests, and sample applications.\r\nYou can get query results as soon as the first document is indexed, but actualtesting of your index should wait until all documents are indexed.        // retrying. This simple demo just logs the failed document keys and continues.        Console.WriteLine(\u0022Failed to index some of the documents: {0}\u0022);    }} SearchClient ingesterClient = adminClient. GetSearchClient(indexName); // Load documents Console.WriteLine(\u0022{0}\u0022, \u0022Uploading documents...\\n\u0022); UploadDocuments(ingesterClient);// Wait 2 seconds for indexing to complete before starting queries (for demo and console-app purposes only)Console.WriteLine(\u0022Waiting for indexing...\\n\u0022);System.Threading.Thread.\n"
}