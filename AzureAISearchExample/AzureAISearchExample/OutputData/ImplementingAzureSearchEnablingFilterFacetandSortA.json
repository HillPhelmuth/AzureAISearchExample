{
  "Id": "31",
  "Title": "\u0022Implementing Azure Search: Enabling Filter, Facet, and Sort Attributes\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor more information, see theSearchableFieldAttribute.cs in source code.Whether you use the basic SearchField API or either one of the helpermodels, you must explicitly enable filter, facet, and sort attributes. Forexample, IsFilterable, IsSortable, and IsFacetable must be explicitly attributed,as shown in the sample above.3.\r\nAdd a second empty class definition to your project: Address.cs. Copy thefollowing code into the class.C#        public DateTimeOffset? LastRenovationDate { get; set; }        [SimpleField(IsFilterable = true, IsSortable = true, IsFacetable = true)]        public double? Rating { get; set; }        [SearchableField]        public Address Address { get; set; }    }}using Azure.\r\nSearch.Documents.Indexes; namespace AzureSearch.Quickstart {     public partial class Address     {         [SearchableField(IsFilterable = true)]4. Create two more classes: Hotel.Methods.cs and Address.Methods.cs forToString() overrides. These classes are used to render search results in theconsole output.\r\nThe contents of these classes aren\u0027t provided in this article,but you can copy the code from files in GitHub.5. In Program.cs, create a SearchIndex object, and then call the CreateIndexmethod to express the index in your search service. The index also includes aSearchSuggester to enable autocomplete on the specified fields. C#         public string StreetAddress { get; set; }         [SearchableField(IsFilterable = true, IsSortable = true, IsFacetable = true)]         public string City { get; set; }         [SearchableField(IsFilterable = true, IsSortable = true, IsFacetable = true)]         public string StateProvince { get; set; }         [SearchableField(IsFilterable = true, IsSortable = true, IsFacetable = true)]         public string PostalCode { get;\n"
}