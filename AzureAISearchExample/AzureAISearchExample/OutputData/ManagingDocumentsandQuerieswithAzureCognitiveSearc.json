{
  "Id": "658",
  "Title": "\u0022Managing Documents and Queries with Azure Cognitive Search in C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfSee this example for more context.Finally, the UploadDocuments method delays for two seconds. Indexing happensasynchronously in your search service, so the sample application needs to wait a shorttime to ensure that the documents are available for searching. Delays like this aretypically only necessary in demos, tests, and sample applications.The following code snippet sets up an instance of SearchClient using theGetSearchClient method of indexClient. The indexClient uses an admin API key on itsrequests, which is required for loading or refreshing documents.An alternate approach is to call SearchClient directly, passing in an admin API key onAzureKeyCredential.\r\nC#\uFF17 NoteIn this example, we are just uploading documents. If you wanted to merge changesinto existing documents or delete documents, you could create batches by callingIndexDocumentsAction.Merge, IndexDocumentsAction.MergeOrUpload, orIndexDocumentsAction.Delete instead. You can also mix different operations in asingle batch by calling IndexBatch.New, which takes a collection ofIndexDocumentsAction objects, each of which tells Azure Cognitive Search toperform a particular operation on a document. You can create eachIndexDocumentsAction with its own operation by calling the corresponding methodsuch as IndexDocumentsAction.Merge, IndexAction.Upload, and so on.\r\nCall UploadDocuments in Main()First, set up a SearchClient that reads the service endpoint and query API key fromappsettings.json:C#Second, define a method that sends a query request.Each time the method executes a query, it creates a new SearchOptions object. Thisobject is used to specify additional options for the query such as sorting, filtering,paging, and faceting. In this method, we\u0027re setting the Filter, Select, and OrderByproperty for different queries. For more information about the search query expressionsyntax, Simple query syntax. The next step is query execution. Running the search is done using theSearchClient.Search method. For each query, pass the search text to use as a string (or\u0022*\u0022 if there\u0027s no search text), plus the search options created earlier. We also specifyHotel as the type parameter for SearchClient.Search, which tells the SDK to deserializedocuments in the search results into objects of type Hotel.C#SearchClient searchClient = indexClient.GetSearchClient(indexName);Console.WriteLine(\u0022{0}\u0022, \u0022Uploading documents...\n"
}