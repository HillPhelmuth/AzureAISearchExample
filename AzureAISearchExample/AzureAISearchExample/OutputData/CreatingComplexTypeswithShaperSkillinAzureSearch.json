{
  "Id": "1737",
  "Title": "\u0022Creating Complex Types with Shaper Skill in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfShaperSkillConsider a scenario where you want to create a structure called analyzedText that hastwo members: text and sentiment, respectively. In an index, a multi-part searchable fieldis called a complex type and it\u0027s often created when source data has a correspondingcomplex structure that maps to it.\uFF17 NoteThis skill isn\u0027t bound to Cognitive Services.\r\nIt is non-billable and has no CognitiveServices key requirement.@odata.typeScenario 1: complex typesHowever, another approach for creating complex types is through the Shaper skill. Byincluding this skill in a skillset, the in-memory operations during skillset processing canoutput data shapes with nested structures, which can then be mapped to a complextype in your index.\r\nThe following example skill definition provides the member names as the input.JSONA skillset is invoked by an indexer, and an indexer requires an index. A complex fieldrepresentation in your index might look like the following example.JSON{   \u0022@odata.type\u0022: \u0022#Microsoft.Skills.Util.\r\nShaperSkill\u0022,   \u0022context\u0022: \u0022/document/content/phrases/*\u0022,   \u0022inputs\u0022: [     {       \u0022name\u0022: \u0022text\u0022,       \u0022source\u0022: \u0022/document/content/phrases/*\u0022     },     {       \u0022name\u0022: \u0022sentiment\u0022,       \u0022source\u0022: \u0022/document/content/phrases/*/sentiment\u0022     }   ],   \u0022outputs\u0022: [     {       \u0022name\u0022: \u0022output\u0022,      \u0022targetName\u0022: \u0022analyzedText\u0022     }   ] } Sample index\u0022name\u0022:\u0022my-index\u0022, \u0022fields\u0022:[    { \u0022name\u0022:\u0022myId\u0022, \u0022type\u0022:\u0022Edm. String\u0022, \u0022key\u0022:true, \u0022filterable\u0022:true  },    { \u0022name\u0022:\u0022analyzedText\u0022, \u0022type\u0022:\u0022Edm.ComplexType\u0022,       \u0022fields\u0022:[          {             \u0022name\u0022:\u0022text\u0022,             \u0022type\u0022:\u0022Edm.\n"
}