{
  "Id": "641",
  "Title": "\u0022Understanding ETags in Azure AI Search: Use Cases and Code\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIt\u0027s always used regardless of whichAPI is used for resource updates.Use cases and sample codeSample code from DotNetETagsExplainer programclass Program{    // This sample shows how ETags work by performing conditional updates and deletes    // on an Azure AI Search index.    static void Main(string[] args)    {        IConfigurationBuilder builder = new ConfigurationBuilder().AddJsonFile(\u0022appsettings.json\u0022);        IConfigurationRoot configuration = builder.Build();        SearchServiceClient serviceClient = CreateSearchServiceClient(configuration);        Console.WriteLine(\u0022Deleting index...\r\n\\n\u0022);        DeleteTestIndexIfExists(serviceClient);        // Every top-level resource in Azure AI Search has an associated ETag that keeps track of which version        // of the resource you\u0027re working on. When you first create a resource such as an index, its ETag is        // empty.        Index index = DefineTestIndex();        Console.\r\nWriteLine(            $\u0022Test index hasn\u0027t been created yet, so its ETag should be blank. ETag: \u0027{index.ETag}\u0027\u0022);        // Once the resource exists in Azure AI Search, its ETag will be populated. Make sure to use the object        // returned by the SearchServiceClient! Otherwise, you will still have the old object with the        // blank ETag.\r\nConsole.WriteLine(\u0022Creating index...\\n\u0022);        index = serviceClient.Indexes.Create(index);                Console.WriteLine($\u0022Test index created; Its ETag should be populated. ETag: \u0027{index.ETag}\u0027\u0022);        // ETags let you do some useful things you couldn\u0027t do otherwise. For example, by using an If-Match        // condition, we can update an index using CreateOrUpdate and be guaranteed that the update will only        // succeed if the index already exists.        index.Fields.Add(new Field(\u0022name\u0022, AnalyzerName.EnMicrosoft));        index =            serviceClient.Indexes.CreateOrUpdate(                index,                accessCondition: AccessCondition.\n"
}