{
  "Id": "945",
  "Title": "\u0022Query Shaping and Pagination in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfExample document:HTTPUsing queries to shape indexed data    {        \u0022userId\u0022: 10001,        \u0022contact\u0022: {            \u0022firstName\u0022: \u0022andy\u0022,            \u0022lastName\u0022: \u0022hoh\u0022        },        \u0022company\u0022: \u0022microsoft\u0022,        \u0022tags\u0022: [\u0022azure\u0022, \u0022cosmosdb\u0022, \u0022search\u0022]    }Filter query:SQLFlattening query:SQLProjection query:SQLArray flattening query:SQLQueries using the DISTINCT keyword or GROUP BY clause aren\u0027t supported.\r\nAzure AISearch relies on SQL query pagination to fully enumerate the results of the query.Neither the DISTINCT keyword or GROUP BY clauses are compatible with thecontinuation tokens used to paginate results.Examples of unsupported queries:SQLSELECT * FROM c WHERE c.company = \u0022microsoft\u0022 and c.\r\n_ts \u003E= @HighWaterMark ORDER BY c._tsSELECT c.id, c.userId, c.contact.firstName, c.contact.lastName, c.company, c._ts FROM c WHERE c._ts \u003E= @HighWaterMark ORDER BY c._tsSELECT VALUE { \u0022id\u0022:c.id, \u0022Name\u0022:c.contact.firstName, \u0022Company\u0022:c.company, \u0022_ts\u0022:c._ts } FROM c WHERE c.\r\n_ts \u003E= @HighWaterMark ORDER BY c._tsSELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts \u003E= @HighWaterMark ORDER BY c._tsUnsupported queries (DISTINCT and GROUP BY)SELECT DISTINCT c.id, c.userId, c._ts FROM c WHERE c._ts \u003E= @HighWaterMark ORDER BY c._tsSELECT DISTINCT VALUE c. name FROM c ORDER BY c.nameAlthough Azure Cosmos DB has a workaround to support SQL query pagination with theDISTINCT keyword by using the ORDER BY clause, it isn\u0027t compatible with Azure AISearch. The query will return a single JSON value, whereas Azure AI Search expects aJSON object.\nSQLIn a search index, add fields to accept the source JSON documents or the output of yourcustom query projection. Ensure that the search index schema is compatible with sourcedata. For content in Azure Cosmos DB, your search index schema should correspond tothe Azure Cosmos DB items in your data source.1.\n"
}