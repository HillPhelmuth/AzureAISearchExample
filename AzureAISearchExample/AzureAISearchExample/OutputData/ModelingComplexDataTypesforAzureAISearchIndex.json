{
  "Id": "747",
  "Title": "\u0022Modeling Complex Data Types for Azure AI Search Index\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf[City] [nvarchar](255) NULL,  [State] [nvarchar](255) NULL,  [ZipCode] [nvarchar](255) NULL,  [GeoCoordinates] [nvarchar](255) NULL) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]GOCREATE TABLE [dbo].\r\n[Rooms$](  [HotelID] [nchar](10) NULL,  [Description] [nvarchar](255) NULL,  [Description_fr] [nvarchar](255) NULL,  [Type] [nvarchar](255) NULL,  [BaseRate] [float] NULL,  [BedOptions] [nvarchar](255) NULL,  [SleepsCount] [float] NULL,  [SmokingAllowed] [float] NULL,  [Tags] [nvarchar](255) NULL) ON [PRIMARY]GOCREATE VIEW [dbo].\r\n[HotelRooms]ASSELECT *, (SELECT *         FROM dbo.Rooms$         WHERE dbo.Rooms$.HotelID = dbo.Hotels$.HotelID FOR JSON AUTO) AS RoomsFROM dbo.Hotels$GO3. Run SELECT * FROM dbo.HotelRooms to retrieve the row set. This query returns 50rows, one per hotel, with associated room information as a JSON collection.\r\nThis rowset is now ready for import into Azure AI Search.On the Azure AI Search side, create an index schema that models the one-to-manyrelationship using nested JSON. The result set you created in the previous sectiongenerally corresponds to the index schema provided below (we cut some fields forbrevity). \uFF17 NoteThis approach assumes that embedded JSON is under the maximum column sizelimits of SQL Server.Use a complex collection for the \u0022many\u0022 side ofa one-to-many relationshipThe following example is similar to the example in How to model complex data types.The Rooms structure, which has been the focus of this article, is in the fields collection ofan index named hotels.\n"
}