{
  "Id": "190",
  "Title": "\u0022Building a Dynamic Search Experience with Azure Search in JavaScript\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf./api\u0027;import BookDetailsTab from \u0022../components/BookDetail/DetailPage/booktab\u0022;import {  useQuery,} from \u0027@tanstack/react-query\u0027export default function Details() {  let { id } = useParams();  const [document, setDocument] = useState({});  const lookupRequest = () =\u003E request(\u0027/api/lookup?id=\u0027 \u002B id, \u0022GET\u0022).\r\nthen(response =\u003E {    const doc = response.document;    setDocument(doc);    return response  });  const fiveMinutes = 1000 * 60 * 5;    /* eslint-disable no-unused-vars */  const { data, isLoading, error } = useQuery({If your client app can use pregenerated content, this page is a good candidate forautogeneration because the content is static, pulled directly from the search index.\r\nIn this tutorial series, you learned how to create and load a search index in JavaScript,and you built a web app that provides a search experience that includes a search bar,faceted navigation and filters, suggestions, pagination, and document lookup.\r\nAs a next step, you can extend this sample in several directions:Add autocomplete for more typeahead.Add or modify facets and filters.Change the authentication and authorization model, using Azure Active Directoryinstead of key-based authentication.Change the indexing methodology. Instead of pushing JSON to a search index,preload a blob container with the good-books dataset and set up a blob indexer toingest the data. Knowing how to work with indexers gives you more options fordata ingestion and content enrichment during indexing. queryKey: [\u0022lookup\u0022, id],     queryFn: async() =\u003E  lookupRequest(),    enabled: id !== undefined,    staleTime: fiveMinutes, // time in milliseconds    cacheTime: fiveMinutes,    //refetchOnMount: false,    //refetchOnWindowFocus: false,    //refetchOnReconnect: false,  });  return (    \u003CContainer sx = {{      padding: 4    }}\u003E      { isLoading ?\n"
}