{
  "Id": "642",
  "Title": "\u0022Implementing Access Conditions in Azure Search Index Operations\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor example, by using an If-Match        // condition, we can update an index using CreateOrUpdate and be guaranteed that the update will only        // succeed if the index already exists.        index.Fields.Add(new Field(\u0022name\u0022, AnalyzerName.EnMicrosoft));        index =            serviceClient.Indexes.CreateOrUpdate(                index,                accessCondition: AccessCondition.\r\nGenerateIfExistsCondition());        Console.WriteLine(            $\u0022Test index updated; Its ETag should have changed since it was created. ETag: \u0027{index.ETag}\u0027\u0022);        // More importantly, ETags protect you from concurrent updates to the same resource. If another        // client tries to update the resource, it will fail as long as all clients are using the right        // access conditions.        Index indexForClient1 = index;        Index indexForClient2 = serviceClient.Indexes.Get(\u0022test\u0022);        Console.WriteLine(\u0022Simulating concurrent update. To start, both clients see the same ETag.\u0022);        Console.\r\nWriteLine($\u0022Client 1 ETag: \u0027{indexForClient1.ETag}\u0027 Client 2 ETag: \u0027{indexForClient2.ETag}\u0027\u0022);        // Client 1 successfully updates the index.        indexForClient1.Fields.Add(new Field(\u0022a\u0022, DataType.Int32));        indexForClient1 =            serviceClient.Indexes.CreateOrUpdate(                indexForClient1,                accessCondition: AccessCondition.\r\nIfNotChanged(indexForClient1));        Console.WriteLine($\u0022Test index updated by client 1; ETag: \u0027{indexForClient1.ETag}\u0027\u0022);        // Client 2 tries to update the index, but fails, thanks to the ETag check.        try        {            indexForClient2.Fields.Add(new Field(\u0022b\u0022, DataType. Boolean));            serviceClient.Indexes.CreateOrUpdate(                indexForClient2,                accessCondition: AccessCondition.IfNotChanged(indexForClient2));            Console.WriteLine(\u0022Whoops; This shouldn\u0027t happen\u0022);            Environment.Exit(1);        }        catch (CloudException e) when (e.IsAccessConditionFailed())        {            Console.WriteLine(\u0022Client 2 failed to update the index, as expected.\u0022);        }        // You can also use access conditions with Delete operations. For example, you can implement an        // atomic version of the DeleteTestIndexIfExists method from this sample like this:        Console.\n"
}