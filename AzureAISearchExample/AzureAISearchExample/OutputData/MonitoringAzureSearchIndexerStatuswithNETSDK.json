{
  "Id": "1349",
  "Title": "\u0022Monitoring Azure Search Indexer Status with .NET SDK\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf012Z\u0022,         \u0022errors\u0022:[],         \u0022itemsProcessed\u0022:11,         \u0022itemsFailed\u0022:0,         \u0022initialTrackingState\u0022:null,         \u0022finalTrackingState\u0022:null     },     \u0022executionHistory\u0022:[ {         \u0022status\u0022:\u0022success\u0022,          \u0022errorMessage\u0022:null,         \u0022startTime\u0022:\u00222018-11-26T03:37:18.853Z\u0022,         \u0022endTime\u0022:\u00222018-11-26T03:37:19.\r\n012Z\u0022,         \u0022errors\u0022:[], Execution history contains up to the 50 most recent runs, which are sorted in reversechronological order (most recent first).Note there are two different status values. The top level status is for the indexer itself.An indexer status of running means the indexer is set up correctly and available to run,but not that it\u0027s currently running.\r\nEach run of the indexer also has its own status that indicates whether that specificexecution is ongoing (running), or already completed with a success, transientFailure, orpersistentFailure status.When an indexer is reset to refresh its change tracking state, a separate executionhistory entry is added with a Reset status.For more information about status codes and indexer monitoring data, see Get IndexerStatus.\r\nUsing the Azure Cognitive Search .NET SDK, the following C# example writesinformation about an indexer\u0027s status and the results of its most recent (or ongoing) runto the console.C#        \u0022itemsProcessed\u0022:11,         \u0022itemsFailed\u0022:0,         \u0022initialTrackingState\u0022:null,         \u0022finalTrackingState\u0022:null    }] } Monitor using . NETstatic void CheckIndexerStatus(SearchIndexerClient indexerClient, SearchIndexer indexer) {     try     {         string indexerName = \u0022hotels-sql-idxr\u0022;         SearchIndexerStatus execInfo = indexerClient.GetIndexerStatus(indexerName);         Console.WriteLine(\u0022Indexer has run {0} times.\u0022, execInfo.ExecutionHistory.\n"
}