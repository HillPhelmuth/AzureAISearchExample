{
  "Id": "657",
  "Title": "\u0022Handling Document Indexing Errors in Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf},                    new Room ()                    {                        Description = \u0022Standard Room, 2 Double Beds (Waterfront View)\u0022,                        ...                    },                    new Room()                    {                        Description = \u0022Deluxe Room, 2 Double Beds (Cityside)\u0022,                        ...                    }                }            }        };    try    {        IndexDocumentsResult result = searchClient.\r\nIndexDocuments(batch);    }    catch (Exception)    {        // Sometimes when your Search service is under load, indexing will fail for some of the documents in        // the batch. Depending on your application, you can take compensating actions like delaying and        // retrying. For this simple demo, we just log the failed document keys and continue.\r\nConsole.WriteLine(\u0022Failed to index some of the documents: {0}\u0022);    }    Console.WriteLine(\u0022Waiting for documents to be indexed...\\n\u0022);    Thread.Sleep(2000);case by calling IndexDocumentsAction.Upload. The batch is then uploaded to the AzureCognitive Search index by the IndexDocuments method.\r\nThe third part of this method is a catch block that handles an important error case forindexing. If your search service fails to index some of the documents in the batch, aRequestFailedException is thrown. An exception can happen if you\u0027re indexingdocuments while your service is under heavy load. We strongly recommend explicitlyhandling this case in your code.\r\nYou can delay and then retry indexing the documentsthat failed, or you can log and continue like the sample does, or you can do somethingelse depending on your application\u0027s data consistency requirements. An alternative is touse SearchIndexingBufferedSender for intelligent batching, automatic flushing, andretries for failed indexing actions. See this example for more context.Finally, the UploadDocuments method delays for two seconds. Indexing happensasynchronously in your search service, so the sample application needs to wait a shorttime to ensure that the documents are available for searching. Delays like this aretypically only necessary in demos, tests, and sample applications.The following code snippet sets up an instance of SearchClient using theGetSearchClient method of indexClient. The indexClient uses an admin API key on itsrequests, which is required for loading or refreshing documents.An alternate approach is to call SearchClient directly, passing in an admin API key onAzureKeyCredential.\n"
}