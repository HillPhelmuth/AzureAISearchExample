{
  "Id": "1228",
  "Title": "\u0022Filtering Rules for Boolean and GeographyPoint Collections in Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAs such, it doesn\u2019t makemuch sense to allow combining such clauses that check the same range variable withand/or since that would always lead to tautologies or contradictions.Here are some examples of filters on Boolean collections that are allowed:flags/any(f: f)flags/all(f: f)flags/any(f: f eq true)flags/any(f: f ne true)flags/all(f: not f)flags/all(f: not (f eq true))Unlike string collections, Boolean collections have no limits on which operator can beused in which type of lambda expression.\r\nBoth eq and ne can be used in the body ofany or all.Expressions such as the following aren\u0027t allowed for Boolean collections:flags/any(f: f or not f)flags/any(f: f or f)flags/all(f: f and not f)flags/all(f: f and f eq true)Rules for filtering Boolean collectionsRules for filtering GeographyPoint collectionsValues of type Edm.\r\nGeographyPoint in a collection can\u2019t be compared directly to eachother. Instead, they must be used as parameters to the geo.distance andgeo.intersects functions. The geo.distance function in turn must be compared to adistance value using one of the comparison operators lt, le, gt, or ge. These rulesalso apply to non-collection Edm.GeographyPoint fields.Like string collections, Edm.GeographyPoint collections have some rules for how the geo-spatial functions can be used and combined in the different types of lambdaexpressions:Which comparison operators you can use with the geo. distance function dependson the type of lambda expression. For any, you can use only lt or le. For all,you can use only gt or ge. You can negate expressions involving geo.distance,but you\u0027ll have to change the comparison operator (geo.distance(...) lt xbecomes not (geo.distance(...) ge x) and geo.distance(...\n"
}