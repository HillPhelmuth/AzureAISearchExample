{
  "Id": "744",
  "Title": "\u0022Modeling Relational SQL Data for Azure AI Search Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor example, the following filter will return all hotels with at least one deluxe room andall non-smoking rooms:$filter=Rooms/any(room: room/Type eq \u0027Deluxe Room\u0027) and Rooms/all(room: notroom/SmokingAllowed)As with top-level simple fields, simple sub-fields of complex fields can only be includedin filters if they have the filterable attribute set to true in the index definition.\r\nFor moreinformation, see the Create Index API reference.Try the Hotels data set in the Import data wizard. You\u0027ll need the Azure Cosmos DBconnection information provided in the readme to access the data.With that information in hand, your first step in the wizard is to create a new AzureCosmos DB data source.\r\nFurther on in the wizard, when you get to the target indexpage, you\u0027ll see an index with complex types. Create and load this index, and thenexecute queries to understand the new structure.Next stepsQuickstart: portal wizard for import, indexing, and queriesHow to model relational SQL data forimport and indexing in Azure AI SearchArticle\u202211/15/2023Azure AI Search accepts a flat rowset as input to the indexing pipeline.\r\nIf your sourcedata originates from joined tables in a SQL Server relational database, this articleexplains how to construct the result set, and how to model a parent-child relationship inan Azure AI Search index.\r\nAs an illustration, we refer to a hypothetical hotels database, based on demo data.Assume the database consists of a Hotels$ table with 50 hotels, and a Rooms$ tablewith rooms of varying types, rates, and amenities, for a total of 750 rooms. There\u0027s aone-to-many relationship between the tables. In our approach, a view provides thequery that returns 50 rows, one row per hotel, with associated room detail embeddedinto each row.One of the challenges in working with one-to-many relationships is that standardqueries built on joined tables return denormalized data, which doesn\u0027t work well in anAzure AI Search scenario. Consider the following example that joins hotels and rooms.\n"
}