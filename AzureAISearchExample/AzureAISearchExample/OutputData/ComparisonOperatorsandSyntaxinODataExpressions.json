{
  "Id": "1619",
  "Title": "\u0022Comparison Operators and Syntax in OData Expressions\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfYou can use the following operators to compare a field to aconstant value:Equality operators:eq: Test whether a field is equal to a constant valuene: Test whether a field is not equal to a constant valueRange operators:gt: Test whether a field is greater than a constant valuelt: Test whether a field is less than a constant valuege: Test whether a field is greater than or equal to a constant valuele: Test whether a field is less than or equal to a constant valueYou can use the range operators in combination with the logical operators to testwhether a field is within a certain range of values.\r\nSee the examples later in this article.The following EBNF (Extended Backus-Naur Form) defines the grammar of an ODataexpression that uses the comparison operators.\uFF17 NoteIf you prefer, you can put the constant value on the left side of the operator andthe field name on the right side. For range operators, the meaning of thecomparison is reversed. For example, if the constant value is on the left, gt wouldtest whether the constant value is greater than the field.\r\nYou can also use thecomparison operators to compare the result of a function, such as geo.distance,with a value. For Boolean functions such as search.ismatch, comparing the result totrue or false is optional.SyntaxAn interactive syntax diagram is also available:There are two forms of comparison expressions. The only difference between them iswhether the constant appears on the left- or right-hand-side of the operator. Theexpression on the other side of the operator must be a variable or a function call. Avariable can be either a field name, or a range variable in the case of a lambdaexpression.The data types on both sides of a comparison operator must be compatible. Forexample, if the left side is a field of type Edm.DateTimeOffset, then the right side must bea date-time constant. Numeric data types are more flexible.\n"
}