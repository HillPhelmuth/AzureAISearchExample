{
  "Id": "1606",
  "Title": "\u0022Understanding Operator Precedence in Azure AI Search Filters\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfField paths or range variables of type Edm.Boolean. For example, if your index has aBoolean field called IsEnabled and you want to return all documents where thisfield is true, your filter expression can just be the name IsEnabled.Boolean expressions in parentheses. Using parentheses can help to explicitlydetermine the order of operations in a filter.\r\nFor more information on the defaultprecedence of the OData operators, see the next section.If you write a filter expression with no parentheses around its sub-expressions, Azure AISearch will evaluate it according to a set of operator precedence rules. These rules arebased on which operators are used to combine sub-expressions.\r\nThe following table listsgroups of operators in order from highest to lowest precedence:GroupOperator(s)Logical operatorsnotOperator precedence in filtersGroupOperator(s)Comparison operatorseq, ne, gt, lt, ge, leLogical operatorsandLogical operatorsorAn operator that is higher in the above table will \u0022bind more tightly\u0022 to its operandsthan other operators. For example, and is of higher precedence than or, andcomparison operators are of higher precedence than either of them, so the followingtwo expressions are equivalent:odata-filter-exprThe not operator has the highest precedence of all -- even higher than the comparisonoperators.\r\nThat\u0027s why if you try to write a filter like this:odata-filter-exprYou\u0027ll get this error message:textThis error happens because the operator is associated with just the Rating field, which isof type Edm.Int32, and not with the entire comparison expression. The fix is to put theoperand of not in parentheses:odata-filter-expr    Rating gt 0 and Rating lt 3 or Rating gt 7 and Rating lt 10    ((Rating gt 0) and (Rating lt 3)) or ((Rating gt 7) and (Rating lt 10))    not Rating gt 5    Invalid expression: A unary operator with an incompatible type was detected. Found operand type \u0027Edm.Int32\u0027 for operator kind \u0027Not\u0027.\n"
}