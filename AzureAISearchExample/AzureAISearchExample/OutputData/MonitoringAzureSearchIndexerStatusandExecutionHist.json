{
  "Id": "1350",
  "Title": "\u0022Monitoring Azure Search Indexer Status and Execution History\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfNETstatic void CheckIndexerStatus(SearchIndexerClient indexerClient, SearchIndexer indexer) {     try     {         string indexerName = \u0022hotels-sql-idxr\u0022;         SearchIndexerStatus execInfo = indexerClient.GetIndexerStatus(indexerName);         Console.WriteLine(\u0022Indexer has run {0} times.\u0022, execInfo.ExecutionHistory.\r\nCount);        Console.WriteLine(\u0022Indexer Status: \u0022 \u002B execInfo.Status.ToString());         IndexerExecutionResult result = execInfo.LastResult; The output in the console will look something like this:OutputNote there are two different status values. The top-level status is the status of theindexer itself.\r\nAn indexer status of Running means that the indexer is set up correctlyand available for execution, but not that it\u0027s currently executing.Each run of the indexer also has its own status for whether that specific execution isongoing (Running), or was already completed with a Success or TransientError status.When an indexer is reset to refresh its change tracking state, a separate history entry isadded with a Reset status.For more information about status codes and indexer monitoring information, see thefollowing API reference:        Console.WriteLine(\u0022Latest run\u0022);         Console.WriteLine(\u0022Run Status: {0}\u0022, result.Status.ToString());         Console.\r\nWriteLine(\u0022Total Documents: {0}, Failed: {1}\u0022, result.ItemCount, result.FailedItemCount);         TimeSpan elapsed = result.EndTime.Value - result.StartTime.Value;         Console.WriteLine(\u0022StartTime: {0:T}, EndTime: {1:T}, Elapsed: {2:t}\u0022, result.StartTime.Value, result.EndTime.Value, elapsed);         string errorMsg = (result. ErrorMessage == null) ? \u0022none\u0022 : result.ErrorMessage;         Console.WriteLine(\u0022ErrorMessage: {0}\u0022, errorMsg);         Console.WriteLine(\u0022 Document Errors: {0}, Warnings: {1}\\n\u0022, result.Errors.Count, result.Warnings.Count);     }     catch (Exception e)     {         // Handle exception     } } Indexer has run 18 times.\n"
}