{
  "Id": "643",
  "Title": "\u0022Implementing Optimistic Concurrency Design Pattern with Azure Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBoolean));            serviceClient.Indexes.CreateOrUpdate(                indexForClient2,                accessCondition: AccessCondition.IfNotChanged(indexForClient2));            Console.WriteLine(\u0022Whoops; This shouldn\u0027t happen\u0022);            Environment.Exit(1);        }        catch (CloudException e) when (e.IsAccessConditionFailed())        {            Console.WriteLine(\u0022Client 2 failed to update the index, as expected.\u0022);        }        // You can also use access conditions with Delete operations. For example, you can implement an        // atomic version of the DeleteTestIndexIfExists method from this sample like this:        Console.\r\nWriteLine(\u0022Deleting index...\\n\u0022);        serviceClient.Indexes.Delete(\u0022test\u0022, accessCondition: AccessCondition.GenerateIfExistsCondition());        // This is slightly better than using the Exists method since it makes only one round trip to        // Azure AI Search instead of potentially two. It also avoids an extra Delete request in cases where        // the resource is deleted concurrently, but this doesn\u0027t matter much since resource deletion in        // Azure AI Search is idempotent.        // And we\u0027re done! Bye!        Console.WriteLine(\u0022Complete.  Press any key to end application...\\n\u0022);        Console.\r\nReadKey();    }    private static SearchServiceClient CreateSearchServiceClient(IConfigurationRoot configuration)    {        string searchServiceName = configuration[\u0022SearchServiceName\u0022];        string adminApiKey = configuration[\u0022SearchServiceAdminApiKey\u0022];        SearchServiceClient serviceClient =            new SearchServiceClient(searchServiceName, new SearchCredentials(adminApiKey));        return serviceClient;    }    private static void DeleteTestIndexIfExists(SearchServiceClient serviceClient)    {        if (serviceClient.Indexes. Exists(\u0022test\u0022))        {A design pattern for implementing optimistic concurrency should include a loop thatretries the access condition check, a test for the access condition, and optionallyretrieves an updated resource before attempting to re-apply the changes.This code snippet illustrates the addition of a synonymMap to an index that alreadyexists.\n"
}