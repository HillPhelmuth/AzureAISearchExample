{
  "Id": "794",
  "Title": "\u0022Optimizing Azure Search Indexers and Index Schema for Efficiency\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIf the data source is a database, such as Azure SQL or Cosmos DB, enable changetracking. Azure Storage has built-in change tracking through the LastModifiedproperty on every blob, file, and table. The above links for the various data sourcesexplain which change tracking methods are supported by indexers.Indexers also require a search index. Recall that indexers pass data off to the searchengine for indexing. Just as indexers have properties that determine execution behavior,an index schema has properties that profoundly affect how strings are indexed (onlystrings are analyzed and tokenized).1. Start with Create a search index.2.\r\nSet up the fields collection and field attributes.Fields are the only receptors of external content. Depending on how the fields areattributed in the schema, the values for each field are analyzed, tokenized, orstored as verbatim strings for filters, fuzzy search, and typeahead queries.Indexers can automatically map source fields to target index fields when the namesand types are equivalent.\r\nIf a field can\u0027t be implicitly mapped, remember that youcan define an explicit field mapping that tells the indexer how to route the content.3. Review the analyzer assignments on each field. Analyzers can transform strings. Assuch, indexed strings might be different from what you passed in.\r\nYou can evaluatethe effects of analyzers using Analyze Text (REST). For more information aboutanalyzers, see Analyzers for text processing.During indexing, an indexer only checks field names and types. There\u0027s no validationstep that ensures incoming content is correct for the corresponding search field in theindex. Prepare an indexCreate an indexerWhen you\u0027re ready to create an indexer on a remote search service, you need a searchclient. A search client can be the Azure portal, Postman or another REST client, or codethat instantiates an indexer client. We recommend the Azure portal or REST APIs forearly development and proof-of-concept testing.\n"
}