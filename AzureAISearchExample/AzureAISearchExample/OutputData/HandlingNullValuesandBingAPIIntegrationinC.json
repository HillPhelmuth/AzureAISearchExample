{
  "Id": "1090",
  "Title": "\u0022Handling Null Values and Bing API Integration in C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfValues == null)             {                 return new BadRequestObjectResult(\u0022The request schema does not match expected schema. Could not find values array.\u0022);             }             // Calculate the response for each value.             foreach (var record in data.Values)             {                 if (record == null || record.RecordId == null) continue;                 OutputRecord responseRecord = new OutputRecord                 {                     RecordId = record.RecordId                 };                 try                 {                     responseRecord.Data = GetEntityMetadata(record.Data.Name).Result;                 }                 catch (Exception e)                 {                     // Something bad happened, log the issue.\r\nvar error = new OutputRecord.OutputRecordMessage                     {                         Message = e.Message                     };                     responseRecord.Errors = new List\u003COutputRecord.OutputRecordMessage\u003E                     {                         error                     };                 }                 finally                 {                     response.Values.Add(responseRecord);                 }             }             return (ActionResult)new OkObjectResult(response);         }         #endregion         #region Methods to call the Bing API         /// \u003Csummary\u003E         /// Gets metadata for a particular entity based on its name using Bing Entity Search         /// \u003C/summary\u003E         /// \u003Cparam name=\u0022entityName\u0022\u003EThe name of the entity to extract data for.\r\n\u003C/param\u003E         /// \u003Creturns\u003EAsynchronous task that returns entity data. \u003C/returns\u003E         private async static Task\u003COutputRecord.OutputRecordData\u003E GetEntityMetadata(string entityName)         {             var uri = bingApiEndpoint \u002B \u0022?q=\u0022 \u002B entityName \u002B \u0022\u0026mkt=en-us\u0026count=10\u0026offset=0\u0026safesearch=Moderate\u0022;             var result = new OutputRecord. OutputRecordData();             using (var client = new HttpClient())             using (var request = new HttpRequestMessage {                 Method = HttpMethod.Get,                 RequestUri = new Uri(uri)             })             {                 request.Headers.\n"
}