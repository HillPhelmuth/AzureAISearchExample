{
  "Id": "78",
  "Title": "\u0022Enhancing Azure Search with OCR, Semantic Ranking, and Vectorization\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfOptionally, you can crack binary images (for example, scanned document files) anduse OCR to recognize text.3. Optionally, you can add semantic ranking to rerank results at the end of queryexecution, promoting the most semantically relevant matches to the top.4. Specify a run time schedule for the indexer.Enrich and vectorize your data5. Select Next: Create and Review to continue.\r\nThis step creates the following objects:Data source connection to your blob container.Index with vector fields, vectorizers, vector profiles, vector algorithms. You aren\u0027tprompted to design or modify the default index during the wizard workflow.Indexes conform to the 2023-10-01-Preview version.Skillset with Text Split skill for chunking and AzureOpenAIEmbeddingModel forvectorization.\r\nIndexer with field mappings and output field mappings (if applicable).If you get errors, review permissions first. You need Cognitive Services OpenAI User onAzure OpenAI and Storage Blob Data Reader on Azure Storage. Your blobs must beunstructured (chunked data is pulled from the blob\u0027s \u0022content\u0022 property).\r\nSearch explorer accepts text strings as input and then vectorizes the text for vectorquery execution.1. Select your index.2. Make sure the API version is 2023-10-01-preview.3. Select JSON view so that you can enter text for your vector query in the text vectorquery parameter.4. Select Search. Run the wizardCheck resultsYou should see 84 documents, where each document is a chunk of the original PDF. Thetitle field shows which PDF the chunk comes from.The index definition isn\u0027t configurable so you can\u0027t filter by \u0022title\u0022. To work around thislimitation, you could define an index manually, making \u0022title\u0022 filterable to get all of thechunks for a single document.\n"
}