{
  "Id": "1603",
  "Title": "\u0022Understanding OData Expressions in Azure AI Search: A Comprehensive Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf:= zero_to_fifty_ninesecond ::= zero_to_fifty_ninefractional_seconds ::= integer_literaltime_zone ::= \u0027Z\u0027 | sign hour\u0027:\u0027minutesign ::= \u0027\u002B\u0027 | \u0027-\u0027/* In practice integer literals are limited in length to the precision ofthe corresponding EDM data type.\r\n*/integer_literal ::= digit\u002Bfloat_literal ::=    sign? whole_part fractional_part? exponent?    | \u0027NaN\u0027    | \u0027-INF\u0027    | \u0027INF\u0027whole_part ::= integer_literalfractional_part ::= \u0027.\r\n\u0027integer_literalexponent ::= \u0027e\u0027 sign? integer_literalboolean_literal ::= \u0027true\u0027 | \u0027false\u0027OData syntax diagram for Azure AI Search\uFF17 NoteSee OData expression syntax reference for Azure AI Search for the completeEBNF.Field paths and constants are the most basic part of an OData expression, but they\u0027realready full expressions themselves. In fact, the $select parameter in Azure AI Search isnothing but a comma-separated list of field paths, and $orderby isn\u0027t much morecomplicated than $select. If you happen to have a field of type Edm.\r\nBoolean in yourindex, you can even write a filter that is nothing but the path of that field. The constantstrue and false are likewise valid filters.However, most of the time you\u0027ll need more complex expressions that refer to morethan one field and constant. These expressions are built in different ways depending onthe parameter.\r\nThe following EBNF (Extended Backus-Naur Form) defines the grammar for the $filter,$orderby, and $select parameters. These are built up from simpler expressions that referto field paths and constants:An interactive syntax diagram is also available:The $orderby and $select parameters are both comma-separated lists of simplerexpressions. The $filter parameter is a Boolean expression that is composed of simplersubexpressions. These subexpressions are combined using logical operators such asBuilding expressions from field paths andconstantsfilter_expression ::= boolean_expressionorder_by_expression ::= order_by_clause(\u0027,\u0027 order_by_clause)*select_expression ::= \u0027*\u0027 | field_path(\u0027,\u0027 field_path)*OData syntax diagram for Azure AI Search\uFF17 NoteSee OData expression syntax reference for Azure AI Search for the completeEBNF.Next stepsand, or, and not, comparison operators such as eq, lt, gt, and so on, and collectionoperators such as any and all.\n"
}