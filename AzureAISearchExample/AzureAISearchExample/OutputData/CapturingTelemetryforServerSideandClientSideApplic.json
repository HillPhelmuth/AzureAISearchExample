{
  "Id": "1354",
  "Title": "\u0022Capturing Telemetry for Server-Side and Client-Side Applications\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfServer-side telemetry captures metrics at the application layer, for example inapplications running as a web service in the cloud, or as an on-premises app on acorporate network. Server-side telemetry captures search and click events, the positionof a document in results, and query information, but your data collection will be scopedto whatever information is available at that layer.\r\nOn the client, you might have additional code that manipulates query inputs, addsnavigation, or includes context (for example, queries initiated from a home page versusa product page). If this describes your solution, you might opt for client-sideinstrumentation so that your telemetry reflects the additional detail.\r\nHow this additionaldetail is collected goes beyond the scope of this pattern, but you can review ApplicationInsights for web pages for more direction.Use C#2 - Add instrumentationStep 1: Create a telemetry clientFor C#, the InstrumentationKey should be defined in your application configuration,such as appsettings.json if your project is ASP.NET. Refer back to the registrationinstructions if you are unsure of the key location.C#Use JavaScriptTo create an object that sends events to Application Insights by using the JavaScript(Web) SDK Loader Script, see Microsoft Azure Monitor Application Insights JavaScriptSDK.\r\nTo correlate search requests with clicks, it\u0027s necessary to have a correlation ID thatrelates these two distinct events. Azure Cognitive Search provides you with a search IDwhen you request it with an HTTP header.Having the search ID allows correlation of the metrics emitted by Azure CognitiveSearch for the request itself, with the custom metrics you are logging in ApplicationInsights.Use C# (newer v11 SDK)The latest SDK requires the use of an Http Pipeline to set the header as detailed in thissample. C#private static TelemetryClient _telemetryClient; // Add a constructor that accepts a telemetry client: public HomeController(TelemetryClient telemetry) {     _telemetryClient = telemetry;} Step 2: Request a Search ID for correlation// Create a custom policy to add the correct headers public class SearchIdPipelinePolicy : HttpPipelineSynchronousPolicy {     public override void OnSendingRequest(HttpMessage message)     {         message.\n"
}