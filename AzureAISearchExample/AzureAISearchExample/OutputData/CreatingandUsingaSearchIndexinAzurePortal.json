{
  "Id": "169",
  "Title": "\u0022Creating and Using a Search Index in Azure Portal\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfok) {    console.log(\u0060book list fetched\u0060);    const fileData = await response.text();    console.log(\u0060book list data received\u0060);    // convert CSV to JSON    const dataObj = Papa.parse(fileData, {      header: true,      encoding: \u0027utf8\u0027,      skipEmptyLines: true    });    console.\r\nlog(\u0060book list data parsed\u0060);    // Insert JSON into Search Index    await insertData(dataObj.data);    console.log(\u0060book list data inserted\u0060);  } else {    console.log(\u0060Couldn\\t download data\u0060);  }};// Create Search Indexasync function createIndex() {  SEARCH_INDEX_SCHEMA.name = SEARCH_INDEX_NAME;  const result = await clientIndex.\r\ncreateIndex(SEARCH_INDEX_SCHEMA);}await createIndex();console.log(\u0027index created\u0027);await bulkInsert();console.log(\u0027data inserted into index\u0027);Bash1. Continue using the integrated terminal in Visual Studio for the project directory\u0027ssubdirectory, search-website-functions-v4/bulk-insert, to run thebulk_insert_books.\r\njs script:JavaScript2. As the code runs, the console displays progress.3. When the upload is complete, the last statement printed to the console is \u0022done\u0022.Once the upload completes, the search index is ready to use. Review your new index inAzure portal.1. In Azure portal, find the search service you created in the previous step.2. On the left, select Indexes, and then select the good-books index.3. By default, the index opens in the Search explorer tab. Select Search to returndocuments from the index.npm install Run the bulk import script for Searchnpm startReview the new search index\uF80AUse the following git command in the Visual Studio Code integrated terminal at thebulk-insert directory, to roll back the changes.\n"
}