{
  "Id": "603",
  "Title": "\u0022Optimizing Azure Search Indexes for Storage and Performance\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfOtherwise, you could use REST and Postman tocreate the index and push the data. The push model requires data to be in theform of JSON documents, where fields in the document correspond to fields in theindex.Collect information about the index, such as size. Features and attributes have animpact on storage.\r\nFor example, adding suggesters (search-as-you-type queries)will increase storage requirements.Using the same data set, you might try creating multiple versions of an index, withdifferent attributes on each field, to see how storage requirements vary. For moreinformation, see \u0022Storage implications\u0022 in Create a basic index.\r\nWith a rough estimate in hand, you might double that amount to budget for twoindexes (development and production) and then choose your tier accordingly.Dedicated resources can accommodate larger sampling and processing times for morerealistic estimates of index quantity, size, and query volumes during development. Somecustomers jump right in with a billable tier and then re-evaluate as the developmentproject matures.\r\n1. Review service limits at each tier to determine whether lower tiers can support thenumber of indexes you need. Across the Basic, S1, and S2 tiers, index limits are 15,50, and 200, respectively. The Storage Optimized tier has a limit of 10 indexesbecause it\u0027s designed to support a low number of very large indexes.2. Create a service at a billable tier:Start low, at Basic or S1, if you\u0027re not sure about the projected load.Estimate with the Free tierEstimate with a billable tierStart high, at S2 or even S3, if testing includes large-scale indexing and queryloads.Start with Storage Optimized, at L1 or L2, if you\u0027re indexing a large amount ofdata and query load is relatively low, as with an internal business application.\n"
}