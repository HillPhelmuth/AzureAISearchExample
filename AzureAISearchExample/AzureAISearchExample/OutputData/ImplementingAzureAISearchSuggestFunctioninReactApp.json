{
  "Id": "153",
  "Title": "\u0022Implementing Azure AI Search Suggest Function in React App\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfProcess);        private static string searchIndexName = Environment.GetEnvironmentVariable(\u0022SearchIndexName\u0022, EnvironmentVariableTarget.Process) ?? \u0022good-books\u0022;        private readonly ILogger\u003CLookup\u003E _logger;        public Suggest(ILogger\u003CLookup\u003E logger)        {            _logger = logger;        }        [Function(\u0022suggest\u0022)]        public async Task\u003CHttpResponseData\u003E RunAsync(            [HttpTrigger(AuthorizationLevel.Anonymous, \u0022post\u0022)] HttpRequestData req,             FunctionContext executionContext)        {            // Get Document Id            string requestBody = await new StreamReader(req.\r\nBody).ReadToEndAsync();            var data = JsonSerializer.Deserialize\u003CRequestBodySuggest\u003E(requestBody);            // Azure AI Search             Uri serviceEndpoint = new($\u0022https://{searchServiceName}.search.windows.net/\u0022);            SearchClient searchClient = new(                serviceEndpoint,                searchIndexName,                new AzureKeyCredential(searchApiKey)            );The Suggest function API is called in the React app at\\client\\src\\components\\SearchBar\\SearchBar.\r\njs as part of component initialization:JavaScript            SuggestOptions options = new()            {                Size = data.Size            };            var suggesterResponse = await searchClient.SuggestAsync\u003CBookModel\u003E(data.SearchText, data. SuggesterName, options);                        // Data to return            var searchSuggestions = new Dictionary\u003Cstring, List\u003CSearchSuggestion\u003CBookModel\u003E\u003E\u003E            {                [\u0022suggestions\u0022] = suggesterResponse.Value.Results.ToList()            };            var response = req.CreateResponse(HttpStatusCode.Found);            // Serialize data            var serializer = new JsonObjectSerializer(                new JsonSerializerOptions(JsonSerializerDefaults.Web));            await response.WriteAsJsonAsync(searchSuggestions, serializer);                        return response;        }    }}Client: Suggestions from the catalogimport React, {useState, useEffect} from \u0027react\u0027;import axios from \u0027axios\u0027;import Suggestions from \u0027.\n"
}