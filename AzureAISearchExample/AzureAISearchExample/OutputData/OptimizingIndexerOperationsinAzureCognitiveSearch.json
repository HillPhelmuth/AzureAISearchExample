{
  "Id": "805",
  "Title": "\u0022Optimizing Indexer Operations in Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFinding all of the documents in the document keys listrequires cracking each document to locate and match on the key, and this can takea while if the data set is large. If a blob container contains hundreds of blobs, andthe docs you want to reset are at the end, the indexer won\u0027t find the matchingblobs until all of the others have been checked first.\r\n3. After the documents are reprocessed, run Get Indexer Status again. The indexerreturns to the indexingAllDocs mode and will process any new or updateddocuments on the next run.Reset APIs are used to inform the scope of the next indexer run. For actual processing,you\u0027ll need to invoke an on-demand indexer run or allow a scheduled job to completethe work. After the run is finished, the indexer returns to normal processing, whetherthat is on a schedule or on-demand processing.After you reset and rerun indexer jobs, you can monitor status from the search service,or obtain detailed information through resource logging.\r\nIndexer operations (REST)Monitor search indexer statusCollect and analyze log dataSchedule an indexerNext stepsSchedule an indexer in Azure CognitiveSearchArticle\u202212/08/2022Indexers can be configured to run on a schedule when you set the \u0022schedule\u0022 property.Some situations where indexer scheduling is useful include:Source data is changing over time, and you want the indexer to automaticallyprocess the difference.Source data is very large, and you need a recurring schedule to index all of thecontent.An index is populated from multiple sources, using multiple indexers, and youwant to stagger the jobs to reduce conflicts. When indexing can\u0027t complete within the typical 2-hour processing window, you canschedule the indexer to run on a 2-hour cadence to work through a large volume ofdata. As long as your data source supports change detection logic, indexers canautomatically pick up where they left off on each run.\n"
}