{
  "Id": "434",
  "Title": "\u0022Understanding and Utilizing Cosine Similarity in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfWhenever results are ranked, @search.score property contains the value used to orderthe results.Search methodParameterScoring metricRangevector search@search.scoreCosine0.333 - 1.00If you\u0027re using the cosine metric, it\u0027s important to note that the calculated@search.score isn\u0027t the cosine value between the query vector and the documentvectors.\r\nInstead, Azure AI Search applies transformations such that the score function ismonotonically decreasing, meaning score values will always decrease in value as thesimilarity becomes worse. This transformation ensures that search scores are usable forranking purposes.Similarity metrics used to measure nearnessScores in a vector search resultsThere are some nuances with similarity scores:Cosine similarity is defined as the cosine of the angle between two vectors.Cosine distance is defined as 1 - cosine_similarity.To create a monotonically decreasing function, the @search.score is defined as 1 / (1 \u002Bcosine_distance).\r\nDevelopers who need a cosine value instead of the synthetic value can use a formula toconvert the search score back to cosine distance:C#Having the original cosine value can be useful in custom solutions that set up thresholdsto trim results of low quality results.A vector query specifies the k parameter, which determines how many nearestneighbors of the query vector should be found in vector space and returned in theresults. If k is larger than the number of documents in the index, then the number ofdocuments determines the upper limit of what can be returned.The search engine always returns k number of matches, as long as there are enoughdocuments in the index. If you\u0027re familiar with full text search, you know to expect zeroresults if the index doesn\u0027t contain a term or phrase. However, in vector search, similarityis relative to the input query vector, not absolute. It\u0027s possible to get positive results fora nonsensical or off-topic query. Less relevant results have a worse similarity score, butthey\u0027re still the \u0022nearest\u0022 vectors if there isn\u0027t anything closer. As such, a response withno meaningful results can still return k results, but each result\u0027s similarity score wouldbe low. A hybrid approach that includes full text search can mitigate this problem.\n"
}