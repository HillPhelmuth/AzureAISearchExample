{
  "Id": "531",
  "Title": "\u0022Defining Index Projections for Azure Search Service\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfEachmapping consists of:name: The name of the field in the search index that the data should be indexedinto,source: The enrichment annotation path that the data should be pulled from.Each mapping can also recursively define data with an optional sourceContext andinputs field, similar to the knowledge store or Shaper Skill. These parameters allow youto shape data to be indexed into fields of type Edm.ComplexType in the search index.The index defined in the targetIndexName parameter has the following requirements:Must already have been created on the search service before the skillset containingthe index projections definition is created.\r\nMust contain a field with the name defined in the parentKeyFieldName parameter.This field must be of type Edm.String, can\u0027t be the key field, and must havefilterable set to true.The key field must have searchable set to true and be defined with the keywordanalyzer.Must have fields defined for each of the names defined in mappings, none of whichcan be the key field.Here\u0027s an example payload for an index projections definition that you might use toproject individual pages output by the Split skill as their own documents in the searchindex.\r\nJSON\u0022indexProjections\u0022: {    \u0022selectors\u0022: [        {            \u0022targetIndexName\u0022: \u0022myTargetIndex\u0022,            \u0022parentKeyFieldName\u0022: \u0022ParentKey\u0022,            \u0022sourceContext\u0022: \u0022/document/pages/*\u0022,            \u0022mappings\u0022: [                {                    \u0022name\u0022: \u0022chunk\u0022,                    \u0022source\u0022: \u0022/document/pages/*\u0022                }            ]Because index projections effectively generate \u0022child\u0022 documents for each \u0022parent\u0022document that runs through a skillset, you also have the following choices as to how tohandle the indexing of the \u0022parent\u0022 documents. To keep parent and child documents in separate indexes, you would just ensurethat the targetIndexName for your indexer definition is different from thetargetIndexName defined in your index projection selector.\n"
}