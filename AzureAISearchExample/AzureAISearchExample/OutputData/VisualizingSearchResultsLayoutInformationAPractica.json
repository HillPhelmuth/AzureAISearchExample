{
  "Id": "1064",
  "Title": "\u0022Visualizing Search Results Layout Information: A Practical Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf5,        \u0022inputs\u0022: [         {             \u0022name\u0022: \u0022text\u0022, \u0022source\u0022: \u0022/document/merged_text\u0022         }       ],       \u0022outputs\u0022: [         {             \u0022name\u0022: \u0022persons\u0022, \u0022targetName\u0022: \u0022people\u0022         }       ]     }   ] } Now that you have a merged_text field, you could map it as a searchable field in yourindexer definition.\r\nAll of the content of your files, including the text of the images, willbe searchable.Another common scenario is visualizing search results layout information. For example,you might want to highlight where a piece of text was found in an image as part of yoursearch results.Since the OCR step is performed on the normalized images, the layout coordinates arein the normalized image space.\r\nWhen displaying the normalized image, the presence ofcoordinates is generally not a problem, but in some situations you might want to displaythe original image. In this case, convert each of coordinate points in the layout to theoriginal image coordinate system.As a helper, if you need to transform normalized coordinates to the original coordinatespace, you could use the following algorithm:C#Scenario: Visualize bounding boxes/// \u003Csummary\u003E ///  Converts a point in the normalized coordinate space to the original coordinate space. ///  This method assumes the rotation angles are multiples of 90 degrees.\r\n/// \u003C/summary\u003E public static Point GetOriginalCoordinates(Point normalized,                             int originalWidth,                             int originalHeight,                             int width,                             int height,                             double rotationFromOriginal) {     Point original = new Point();     double angle = rotationFromOriginal % 360;     if (angle == 0 )     {         original. X = normalized.X;         original.Y = normalized.Y;     } else if (angle == 90)     {         original.X = normalized.Y;         original.Y = (width - normalized.X);     } else if (angle == 180)     {         original.X = (width -  normalized.\n"
}