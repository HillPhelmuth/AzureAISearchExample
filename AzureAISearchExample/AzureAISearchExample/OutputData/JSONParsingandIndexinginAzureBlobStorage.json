{
  "Id": "834",
  "Title": "\u0022JSON Parsing and Indexing in Azure Blob Storage\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfIf the JSON is structured, the search documentcan reflect that structure, with individual elements represented as individual fields. Forexample, assume you have the following JSON document in Azure Blob Storage:HTTPThe blob indexer parses the JSON document into a single search document, loading anindex by matching \u0022text\u0022, \u0022datePublished\u0022, and \u0022tags\u0022 from the source against identicallynamed and typed target index fields.\r\nGiven an index with \u0022text\u0022, \u0022datePublished, and\u0022tags\u0022 fields, the blob indexer can infer the correct mapping without a field mappingpresent in the request.Although the default behavior is one search document per JSON blob, setting the \u0027json\u0027parsing mode changes the internal field mappings for content, promoting fields insidecontent to actual fields in the search index.\r\nAn example indexer definition for the jsonparsing mode might look like this:HTTPIndex single JSON documents (one per blob){     \u0022article\u0022 : {         \u0022text\u0022 : \u0022A hopefully useful article explaining how to parse JSON blobs\u0022,         \u0022datePublished\u0022 : \u00222020-04-13\u0022,         \u0022tags\u0022 : [ \u0022search\u0022, \u0022storage\u0022, \u0022howto\u0022 ]         } } POST https://[service name].\r\nsearch.windows.net/indexers?api-version=2020-06-30 Content-Type: application/json api-key: [admin key] {     \u0022name\u0022 : \u0022my-json-indexer\u0022,     \u0022dataSourceName\u0022 : \u0022my-blob-datasource\u0022,     \u0022targetIndexName\u0022 : \u0022my-target-index\u0022,     \u0022parameters\u0022 : { \u0022configuration\u0022 : { \u0022parsingMode\u0022 : \u0022json\u0022 } } } The hotel JSON document data set on GitHub is helpful for testing JSON parsing,where each blob represents a structured JSON file. You can upload the data files to BlobStorage and use the Import data wizard to quickly evaluate how this content is parsedinto individual search documents.\nThe data set consists of five blobs, each containing a hotel document with an addresscollection and a rooms collection. The blob indexer detects both collections and reflectsthe structure of the input documents in the index schema.Alternatively, you can use the JSON array option.\n"
}