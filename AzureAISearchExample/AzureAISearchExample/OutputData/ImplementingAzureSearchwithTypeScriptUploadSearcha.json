{
  "Id": "1529",
  "Title": "\u0022Implementing Azure Search with TypeScript: Upload, Search, and Query\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfuploadDocuments([    // JSON objects matching the shape of the client\u0027s index    {},    {},    {},  ]);  for (const result of uploadResult.results) {    console.log(\u0060Uploaded ${result.key}; succeeded? ${result.succeeded}\u0060);  }}main();Perform a search on documentsconst { SearchClient, AzureKeyCredential } = require(\u0022@azure/search-documents\u0022);const client = new SearchClient(\u0022\u003Cendpoint\u003E\u0022, \u0022\u003CindexName\u003E\u0022, new AzureKeyCredential(\u0022\u003CapiKey\u003E\u0022));async function main() {  const searchResults = await client.search(\u0022wifi -luxury\u0022);  for await (const result of searchResults.\r\nresults) {    console.log(result);  }}main();const { SearchClient, AzureKeyCredential } = require(\u0022@azure/search-documents\u0022);const client = new SearchClient(\u0022\u003Cendpoint\u003E\u0022, \u0022\u003CindexName\u003E\u0022, new AzureKeyCredential(\u0022\u003CapiKey\u003E\u0022));async function main() {  const searchResults = await client.\r\nsearch(\u0027Category:budget AND \u0022recently renovated\u0022^3\u0027, {In TypeScript, SearchClient takes a generic parameter that is the model shape of yourindex documents. This allows you to perform strongly typed lookup of fields returned inresults. TypeScript is also able to check for fields returned when specifying a selectparameter.ts    queryType: \u0022full\u0022,    searchMode: \u0022all\u0022,  });  for await (const result of searchResults.\r\nresults) {    console.\r\nlog(result);  }}main();Querying with TypeScriptimport { SearchClient, AzureKeyCredential, SelectFields } from \u0022@azure/search-documents\u0022;// An example schema for documents in the indexinterface Hotel {  hotelId?: string;  hotelName?: string | null;  description?: string | null;  descriptionVector?: Array\u003Cnumber\u003E | null;  parkingIncluded? : boolean | null;  lastRenovationDate?: Date | null;  rating?: number | null;  rooms?: Array\u003C{    beds?: number | null;    description?: string | null;  } | null\u003E;}const client = new SearchClient\u003CHotel\u003E(  \u0022\u003Cendpoint\u003E\u0022,  \u0022\u003CindexName\u003E\u0022,  new AzureKeyCredential(\u0022\u003CapiKey\u003E\u0022));async function main() {  const searchResults = await client.\n"
}