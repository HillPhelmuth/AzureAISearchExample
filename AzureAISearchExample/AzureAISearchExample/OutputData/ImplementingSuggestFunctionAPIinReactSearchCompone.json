{
  "Id": "214",
  "Title": "\u0022Implementing Suggest Function API in React Search Component\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfPOST] )def main(req: func.HttpRequest) -\u003E func.HttpResponse:    # variables sent in bodyThe Suggest function API is called in the React app atclient\\src\\components\\SearchBar\\SearchBar.js as part of component initialization:JavaScript    req_body = req.get_json()    q = req_body.get(\u0022q\u0022)    top = req_body.get(\u0022top\u0022) or 5    suggester = req_body.\r\nget(\u0022suggester\u0022) or \u0022sg\u0022    if q:        logging.info(\u0022/Suggest q = %s\u0022, q)        suggestions = search_client.suggest(search_text=q, suggester_name=suggester, top=top)        # format the React app expects        full_response = {}        full_response[\u0022suggestions\u0022] = suggestions        logging.debug(suggestions)        return func.HttpResponse(            body=json.\r\ndumps(full_response), mimetype=\u0022application/json\u0022, status_code=200        )    else:        return func.HttpResponse(\u0022No query param found.\u0022, status_code=200)Client: Suggestions from the catalogimport React, {useState, useEffect} from \u0027react\u0027;import axios from \u0027axios\u0027;import Suggestions from \u0027./Suggestions/Suggestions\u0027;import \u0022./SearchBar.\r\ncss\u0022;export default function SearchBar(props) {    let [q, setQ] = useState(\u0022\u0022);    let [suggestions, setSuggestions] = useState([]);    let [showSuggestions, setShowSuggestions] = useState(false);    const onSearchHandler = () =\u003E {        props.postSearchHandler(q);        setShowSuggestions(false);    }    const suggestionClickHandler = (s) =\u003E {        document.getElementById(\u0022search-box\u0022).value = s;        setShowSuggestions(false);        props. postSearchHandler(s);        }    const onEnterButton = (event) =\u003E {        if (event.keyCode === 13) {            onSearchHandler();        }    }    const onChangeHandler = () =\u003E {        var searchTerm = document.getElementById(\u0022search-box\u0022).value;        setShowSuggestions(true);        setQ(searchTerm);        // use this prop if you want to make the search more reactive        if (props.\n"
}