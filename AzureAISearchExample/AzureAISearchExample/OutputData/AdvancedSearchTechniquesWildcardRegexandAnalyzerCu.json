{
  "Id": "1271",
  "Title": "\u0022Advanced Search Techniques: Wildcard, Regex, and Analyzer Customization\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfWildcard with infix and suffix matching places the * and ? operators inside or atthe beginning of a term, and requires regular expression syntax (where theexpression is enclosed with forward slashes). For example, the query string(search=/.*numeric.*/) returns results on \u0022alphanumeric\u0022 and \u0022alphanumerical\u0022 assuffix and infix matches.\r\nFor regular expression, wildcard, and fuzzy search, analyzers aren\u0027t used at query time.For these query forms, which the parser detects by the presence of operators anddelimiters, the query string is passed to the engine without lexical analysis. For thesequery forms, the analyzer specified on the field is ignored.When you need to search on fragments or patterns or special characters, you canoverride the default analyzer with a custom analyzer that operates under simplertokenization rules, retaining the entire string in the index.The approach looks like this:1.\r\nDefine a second field to store an intact version of the string (assuming you wantanalyzed and non-analyzed text at query time)\uFF17 NoteWhen a partial query string includes characters, such as slashes in a URL fragment,you might need to add escape characters. In JSON, a forward slash / is escapedwith a backward slash \\. As such, search=/.*microsoft.com\\/azure\\/.*/ is thesyntax for the URL fragment \u0022microsoft.\r\ncom/azure/\u0022.Solving partial/pattern search problems2. Evaluate and choose among the various analyzers that emit tokens at the rightlevel of granularity3. Assign the analyzer to the field4. Build and test the indexAnalyzers determine how terms are tokenized in an index. Since analyzers are assignedon a per-field basis, you can create fields in your index to optimize for differentscenarios. For example, you might define \u0022featureCode\u0022 and \u0022featureCodeRegex\u0022 tosupport regular full text search on the first, and advanced pattern matching on thesecond. The analyzers assigned to each field determine how the contents of each fieldare tokenized in the index.JSON\uEA80 TipEvaluating analyzers is an iterative process that requires frequent index rebuilds.\n"
}