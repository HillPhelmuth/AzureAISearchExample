{
  "Id": "1220",
  "Title": "\u0022Understanding Correlated and Uncorrelated Search in Azure AI\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfFor example, the document below with Id of 1 would matchthe query:JSONCorrelated versus uncorrelated search    Rooms/any(room: room/Type eq \u0027Deluxe Room\u0027 and room/BaseRate lt 100)    Rooms/Type:deluxe AND Rooms/Description:\u0022city view\u0022{  \u0022value\u0022: [    {      \u0022Id\u0022: \u00221\u0022,      \u0022Rooms\u0022: [        { \u0022Type\u0022: \u0022deluxe\u0022, \u0022Description\u0022: \u0022Large garden view suite\u0022 },        { \u0022Type\u0022:\r\n\u0022standard\u0022, \u0022Description\u0022: \u0022Standard city view room\u0022 }      ]    },    {      \u0022Id\u0022: \u00222\u0022,      \u0022Rooms\u0022: [        { \u0022Type\u0022: \u0022deluxe\u0022, \u0022Description\u0022: \u0022Courtyard motel room\u0022 }      ]    }  ]}The reason is that Rooms/Type refers to all the analyzed terms of the Rooms/Type field inthe entire document, and similarly for Rooms/Description, as shown in the tables below.\r\nHow Rooms/Type is stored for full-text search:Term in Rooms/TypeDocument IDsdeluxe1, 2standard1How Rooms/Description is stored for full-text search:\r\nTerm in Rooms/DescriptionDocument IDscourtyard2city1garden1large1motel2room1, 2standard1suite1view1So unlike the filter above, which basically says \u0022match documents where a room hasType equal to \u0027Deluxe Room\u0027 and that same room has BaseRate less than 100\u0022, thesearch query says \u0022match documents where Rooms/Type has the term \u0022deluxe\u0022 andRooms/Description has the phrase \u0022city view\u0022. There\u0027s no concept of individual roomswhose fields can be correlated in the latter case.You may have noticed that there are far fewer restrictions on lambda expressions overcomplex collections than there are for simple collections like Collection(Edm.\nInt32),Collection(Edm.GeographyPoint), and so on. This is because Azure AI Search storescomplex collections as actual collections of sub-documents, while simple collectionsaren\u0027t stored as collections at all.Inverted indexes and collectionsFor example, consider a filterable string collection field like seasons in an index for anonline retailer.\n"
}