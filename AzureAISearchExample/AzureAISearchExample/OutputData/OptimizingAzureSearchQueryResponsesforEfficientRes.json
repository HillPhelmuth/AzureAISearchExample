{
  "Id": "1161",
  "Title": "\u0022Optimizing Azure Search Query Responses for Efficient Results Retrieval\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBecause it\u0027s seldom practicalto return unbounded results, you should specify a maximum for the response:\u0022k\u0022: n results for vector-only queries\uFF17 NoteVectorizers are used during indexing and querying. If you don\u0027t need data chunkingand vectorization in the index, you can skip steps like creating an indexer, skillset,and data source.\r\nIn this scenario, the vectorizer is used only at query time toconvert a text string to an embedding.Configure a query responseFields in a response\uFF17 NoteVectors aren\u0027t designed for readability, so avoid returning them in the response.Instead, choose non-vector fields that are representative of the search document.\r\nFor example, if the query targets a \u0022descriptionVector\u0022 field, return an equivalenttext field if you have one (\u0022description\u0022) in the response.Number of results\u0022top\u0022: n results for hybrid queries that include a \u0022search\u0022 parameterBoth \u0022k\u0022 and \u0022top\u0022 are optional. Unspecified, the default number of results in a responseis 50.\r\nYou can set \u0022top\u0022 and \u0022skip\u0022 to page through more results or change the default.Ranking of results is computed by either:The similarity metric specified in the index vectorSearch section for a vector-onlyquery. Valid values are cosine , euclidean, and dotProduct.Reciprocal Rank Fusion (RRF) if there are multiple sets of search results. Azure OpenAI embedding models use cosine similarity, so if you\u0027re using Azure OpenAIembedding models, cosine is the recommended metric. Other supported rankingmetrics include euclidean and dotProduct.Multiple sets are created if the query targets multiple vector fields, or if the query is ahybrid of vector and full text search, with or without semantic ranking. Within vectorsearch, a vector query can only target one internal vector index. So for multiple vectorfields and multiple vector queries, the search engine generates multiple queries thattarget the respective vector indexes of each field. Output is a set of ranked results foreach query, which are fused using RRF.\n"
}