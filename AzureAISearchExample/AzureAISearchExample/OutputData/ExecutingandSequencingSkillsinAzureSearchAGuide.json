{
  "Id": "501",
  "Title": "\u0022Executing and Sequencing Skills in Azure Search: A Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfSkill contextContextInputShape ofInputSkillInvocation/document/countries/*/document/countries/*/states/*/zipcodes/*A list of all ZIPcodes in thecountry/regionOnce percountry/region/document/countries/*/states/*/document/countries/*/states/*/zipcodes/*A list of ZIPcodes in thestateOnce percombinationofcountry/regionand stateSkills can execute independently and in parallel, or sequentially if you feed the output of one skill intoanother skill.\r\nThe following example demonstrates two built-in skills that execute in sequence:Skill #1 is a Text Split skill that accepts the contents of the \u0022reviews_text\u0022 source field as input,and splits that content into \u0022pages\u0022 of 5000 characters as output. Splitting large text intosmaller chunks can produce better outcomes for skills like sentiment detection.\r\nSkill #2 is a Sentiment Detection skill accepts \u0022pages\u0022 as input, and produces a new field called\u0022Sentiment\u0022 as output that contains the results of sentiment analysis.Notice how the output of the first skill (\u0022pages\u0022) is used in sentiment analysis, where\u0022/document/reviews_text/pages/*\u0022 is both the context and input. For more information about pathformulation, see How to reference annotations.JSONSkill dependencies{    \u0022skills\u0022: [        {            \u0022@odata.type\u0022: \u0022#Microsoft.Skills.Text.\r\nSplitSkill\u0022,            \u0022name\u0022: \u0022#1\u0022,            \u0022description\u0022: null,            \u0022context\u0022: \u0022/document/reviews_text\u0022,            \u0022defaultLanguageCode\u0022: \u0022en\u0022,            \u0022textSplitMode\u0022: \u0022pages\u0022,            \u0022maximumPageLength\u0022: 5000,            \u0022inputs\u0022: [                {                    \u0022name\u0022: \u0022text\u0022,                    \u0022source\u0022: \u0022/document/reviews_text\u0022                }            ],            \u0022outputs\u0022: [                {                    \u0022name\u0022: \u0022textItems\u0022,                    \u0022targetName\u0022: \u0022pages\u0022                }            ]        },        {An enriched document is a temporary, tree-like data structure created during skillset execution thatcollects all of the changes introduced through skills.\nCollectively, enrichments are represented as ahierarchy of addressable nodes.\n"
}