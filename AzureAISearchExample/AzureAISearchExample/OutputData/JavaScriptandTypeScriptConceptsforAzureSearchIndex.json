{
  "Id": "1527",
  "Title": "\u0022JavaScript and TypeScript Concepts for Azure Search Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfGeographyPoint is converted to a GeographyPoint type exported by the clientlibrary.Special values of the number type (NaN, Infinity, -Infinity) are serialized as strings inthe REST API, but are converted back to number by the client library.Note: Data types are converted based on value, not the field type in the index schema.\r\nThis means that if you have an ISO8601 Date string (e.g. \u00222020-03-06T18:48:27.896Z\u0022) asthe value of a field, it will be converted to a Date regardless of how you stored it in yourschema.TypeScript/JavaScript specific conceptsDocumentsPaginationDocument field encodingThe following examples demonstrate the basics - please check out our samples formuch more.\r\nCreating an indexRetrieving a specific document from your indexAdding documents to your indexPerform a search on documentsQuerying with TypeScriptQuerying with OData filtersQuerying with facetsJavaScriptExamplesCreate an Indexconst { SearchIndexClient, AzureKeyCredential } = require(\u0022@azure/search-documents\u0022);const client = new SearchIndexClient(\u0022\u003Cendpoint\u003E\u0022, new AzureKeyCredential(\u0022\u003CapiKey\u003E\u0022));async function main() {  const result = await client.\r\ncreateIndex({    name: \u0022example-index\u0022,    fields: [      {        type: \u0022Edm.String\u0022,        name: \u0022id\u0022,        key: true,      },      {        type: \u0022Edm.\r\nDouble\u0022,        name: \u0022awesomenessLevel\u0022,        sortable: true,        filterable: true,        facetable: true,      },      {        type: \u0022Edm.String\u0022,        name: \u0022description\u0022,        searchable: true,      },      {        type: \u0022Edm. ComplexType\u0022,        name: \u0022details\u0022,        fields: [          {A specific document can be retrieved by its primary key value:JavaScriptYou can upload multiple documents into index inside a batch:JavaScript            type: \u0022Collection(Edm.String)\u0022,            name: \u0022tags\u0022,            searchable: true,          },        ],      },      {        type: \u0022Edm.Int32\u0022,        name: \u0022hiddenWeight\u0022,        hidden: true,      },    ],  });  console.\n"
}