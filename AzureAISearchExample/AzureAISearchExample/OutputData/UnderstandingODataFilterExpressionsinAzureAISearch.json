{
  "Id": "1631",
  "Title": "\u0022Understanding OData Filter Expressions in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfscore and rating, and then in ascendingorder by distance from the given coordinates so that between two hotels with identicalratings, the closest one is listed first:odata-filter-exprFilters in Azure AI SearchOData expression language overview for Azure AI SearchFilter examples    geo.distance(location, geography\u0027POINT(-122.131577 47.\r\n678581)\u0027) le 10    geo.intersects(location, geography\u0027POLYGON((-122.031577 47.578581, -122.031577 47.678581, -122.131577 47.678581, -122.031577 47.578581))\u0027)Order-by examples    rating desc,geo.distance(location, geography\u0027POINT(-122.131577 47.678581)\u0027) asc    search.score() desc,rating desc,geo.distance(location, geography\u0027POINT(-122.\r\n131577 47.678581)\u0027) ascNext stepsOData expression syntax reference for Azure AI SearchSearch Documents (Azure AI Search REST API)OData logical operators in Azure AISearch - and, or, notArticle\u202211/15/2023OData filter expressions in Azure AI Search are Boolean expressions that evaluate totrue or false.\r\nYou can write a complex filter by writing a series of simpler filters andcomposing them using the logical operators from Boolean algebra:and: A binary operator that evaluates to true if both its left and right sub-expressions evaluate to true.or: A binary operator that evaluates to true if either one of its left or right sub-expressions evaluates to true. not: A unary operator that evaluates to true if its sub-expression evaluates tofalse, and vice-versa.These, together with the collection operators any and all, allow you to construct filtersthat can express very complex search criteria.The following EBNF (Extended Backus-Naur Form) defines the grammar of an ODataexpression that uses the logical operators.\n"
}