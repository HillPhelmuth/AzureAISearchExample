{
  "Id": "231",
  "Title": "\u0022Optimizing Azure AI Search Indexing with .NET SDK\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfnet\u0022,  \u0022SearchServiceAdminApiKey\u0022: \u0022\u0022,  \u0022SearchIndexName\u0022: \u0022optimize-indexing\u0022}3 - Explore the codeIndexes data asynchronouslyUsing multiple threads to increase indexing speedsUsing an exponential backoff retry strategy to retry failed itemsBefore running the program, take a minute to study the code and the index definitionsfor this sample. The relevant code is in several files:Hotel.cs and Address.\r\ncs contains the schema that defines the indexDataGenerator.cs contains a simple class to make it easy to create large amountsof hotel dataExponentialBackoff.cs contains code to optimize the indexing process asdescribed belowProgram.cs contains functions that create and delete the Azure AI Search index,indexes batches of data, and tests different batch sizesThis sample program uses the .NET SDK to define and create an Azure AI Search index. Ittakes advantage of the FieldBuilder class to generate an index structure from a C#data model class.The data model is defined by the Hotel class, which also contains references to theAddress class.\r\nThe FieldBuilder drills down through multiple class definitions to generatea complex data structure for the index. Metadata tags are used to define the attributesof each field, such as whether it\u0027s searchable or sortable.The following snippets from the Hotel.cs file show how a single field, and a reference toanother data model class, can be specified.\r\nC#In the Program.cs file, the index is defined with a name and a field collection generatedby the FieldBuilder.Build(typeof(Hotel)) method, and then created as follows:C#Creating the index. . .[SearchableField(IsSortable = true)]public string HotelName { get; set; }. . .public Address Address { get; set; }. . .A simple class is implemented in the DataGenerator. cs file to generate data for testing.The sole purpose of this class is to make it easy to generate a large number ofdocuments with a unique ID for indexing.To get a list of 100,000 hotels with unique IDs, you\u0027d run the following lines of code:C#There are two sizes of hotels available for testing in this sample: small and large.The schema of your index can have a significant impact on indexing speeds. Because ofthis impact, it makes sense to convert this class to generate data matching yourintended index schema after you run through this tutorial.\n"
}