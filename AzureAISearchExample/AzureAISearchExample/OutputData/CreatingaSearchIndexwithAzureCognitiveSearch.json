{
  "Id": "956",
  "Title": "\u0022Creating a Search Index with Azure Cognitive Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfsearch.windows.net/indexes?api-version=2020-06-30 Content-Type: application/json api-key: [Search service admin key] {     \u0022name\u0022: \u0022mysearchindex\u0022,     \u0022fields\u0022: [{         \u0022name\u0022: \u0022doc_id\u0022,         \u0022type\u0022: \u0022Edm.String\u0022,         \u0022key\u0022: true,         \u0022retrievable\u0022: true,         \u0022searchable\u0022: false     }, {         \u0022name\u0022: \u0022description\u0022,         \u0022type\u0022: \u0022Edm.\r\nString\u0022,         \u0022filterable\u0022: false,         \u0022searchable\u0022: true,         \u0022sortable\u0022: false,         \u0022facetable\u0022: false,         \u0022suggestions\u0022: true     }] } 2. Create a document key field (\u0022key\u0022: true). For a search index based on a MongoDBcollection, the document key can be \u0022doc_id\u0022, \u0022rid\u0022, or some other string field thatcontains unique values.\r\nAs long as field names and data types are the same onboth sides, no field mappings are required.\u0022doc_id\u0022 represents \u0022_id\u0022 for the object identifier. If you specify a field of\u0022doc_id\u0022 in the index, the indexer populates it with the values of the objectidentifier.\u0022rid\u0022 is a system property in Azure Cosmos DB.\r\nIf you specify a field of \u0022rid\u0022 inthe index, the indexer populates it with the base64-encoded value of the \u0022rid\u0022property.For any other field, your search field should have the same name as definedin the collection.3. Create additional fields for more searchable content. See Create an index fordetails.JSON data typeCognitive Search field typesBoolEdm. Boolean, Edm.StringNumbers that look like integersEdm.Int32, Edm.Int64,Edm.StringNumbers that look like floating-pointsEdm.Double, Edm.StringStringEdm.StringArrays of primitive types such as [\u0022a\u0022, \u0022b\u0022, \u0022c\u0022]Collection(Edm.String)Strings that look like datesEdm.DateTimeOffset,Edm.StringGeoJSON objects such as { \u0022type\u0022: \u0022Point\u0022, \u0022coordinates\u0022: [long,lat] }Edm.\n"
}