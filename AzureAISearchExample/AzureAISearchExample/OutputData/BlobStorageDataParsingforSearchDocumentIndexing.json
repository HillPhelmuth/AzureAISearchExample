{
  "Id": "835",
  "Title": "\u0022Blob Storage Data Parsing for Search Document Indexing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfYou can upload the data files to BlobStorage and use the Import data wizard to quickly evaluate how this content is parsedinto individual search documents.\r\nThe data set consists of five blobs, each containing a hotel document with an addresscollection and a rooms collection. The blob indexer detects both collections and reflectsthe structure of the input documents in the index schema.Alternatively, you can use the JSON array option.\r\nThis option is useful when blobscontain an array of well-formed JSON objects, and you want each element to become aseparate search document. Using jsonArrays, the following JSON blob produces threeseparate documents, each with \u0022id\u0022 and \u0022text\u0022 fields.textThe \u0022parameters\u0022 property on the indexer contains parsing mode values. For a JSONarray, the indexer definition should look similar to the following example.\r\nHTTP\uFF17 NoteAs with all indexers, if fields do not clearly match, you should expect to explicitlyspecify individual field mappings unless you are using the implicit fields mappingsavailable for blob content and metadata, as described in basic blob indexerconfiguration.\r\njson example (single hotel JSON files)Parse JSON arrays[     { \u0022id\u0022 : \u00221\u0022, \u0022text\u0022 : \u0022example 1\u0022 },     { \u0022id\u0022 : \u00222\u0022, \u0022text\u0022 : \u0022example 2\u0022 },     { \u0022id\u0022 : \u00223\u0022, \u0022text\u0022 : \u0022example 3\u0022 } ] POST https://[service name].search.windows.net/indexers?api-version=2020-06-30 Content-Type: application/json api-key: [admin key] The clinical trials JSON data set on GitHub is helpful for testing JSON array parsing. You can upload the data files to Blob storage and use the Import data wizard to quicklyevaluate how this content is parsed into individual search documents.The data set consists of eight blobs, each containing a JSON array of entities, for a totalof 100 entities. The entities vary as to which fields are populated, but the end result isone search document per entity, from all arrays, in all blobs.For JSON arrays having nested elements, you can specify a \u0022documentRoot\u0022 to indicatea multi-level structure.\n"
}