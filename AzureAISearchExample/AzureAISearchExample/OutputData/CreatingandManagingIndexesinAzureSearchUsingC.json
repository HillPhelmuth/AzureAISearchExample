{
  "Id": "651",
  "Title": "\u0022Creating and Managing Indexes in Azure Search Using C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfYou can find moreinformation about the SearchIndex object and its constituent parts in the SearchIndexproperties list, as well as in the REST API reference.Main creates a new \u0022hotels\u0022 index by calling the above method:C#Create an indexprivate static void CreateIndex(string indexName, SearchIndexClient indexClient){    FieldBuilder fieldBuilder = new FieldBuilder();    var searchFields = fieldBuilder.\r\nBuild(typeof(Hotel));    var definition = new SearchIndex(indexName, searchFields);    indexClient.CreateOrUpdateIndex(definition);}\uFF17 NoteYou can always create the list of Field objects directly instead of usingFieldBuilder if needed. For example, you may not want to use a model class oryou may need to use an existing model class that you don\u0027t want to modify byadding attributes.\r\nCall CreateIndex in Main()The DotNetHowTo sample uses model classes for the Hotel, Address, and Roomdata structures. Hotel references Address, a single level complex type (a multi-partfield), and Room (a collection of multi-part fields).\r\nYou can use these types to create and load the index, and to structure the responsefrom a query:C#An alternative approach is to add fields to an index directly. The following exampleshows just a few fields.C#Console.WriteLine(\u0022{0}\u0022, \u0022Creating index...\\n\u0022);CreateIndex(indexName, indexClient);Use a model class for data representation// Use-case: \u003CHotel\u003E in a field definitionFieldBuilder fieldBuilder = new FieldBuilder();var searchFields = fieldBuilder.\r\nBuild(typeof(Hotel));// Use-case: \u003CHotel\u003E in a responseprivate static void WriteDocuments(SearchResults\u003CHotel\u003E searchResults){    foreach (SearchResult\u003CHotel\u003E result in searchResults.GetResults())    {        Console.WriteLine(result.Document);    }    Console. WriteLine();} SearchIndex index = new SearchIndex(indexName) {     Fields =         {             new SimpleField(\u0022hotelId\u0022, SearchFieldDataType.String) { IsKey = true, IsFilterable = true, IsSortable = true },             new SearchableField(\u0022hotelName\u0022) { IsFilterable = true, IsSortable = true },             new SearchableField(\u0022hotelCategory\u0022) { IsFilterable = true, IsSortable = true },             new SimpleField(\u0022baseRate\u0022, SearchFieldDataType.\n"
}