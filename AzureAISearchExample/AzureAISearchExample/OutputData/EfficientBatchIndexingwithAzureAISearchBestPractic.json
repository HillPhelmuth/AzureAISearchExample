{
  "Id": "235",
  "Title": "\u0022Efficient Batch Indexing with Azure AI Search: Best Practices\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfSerialize(data);    bf.Serialize(ms, json);    Array = ms.ToArray();    // converting from bytes to megabytes    double sizeInMb = (double)Array.Length / 1000000;    return sizeInMb;}await TestBatchSizesAsync(searchClient, numTries: 3);Identify which batch size is most efficient and then use that batch size in the next step ofthe tutorial.\r\nYou may see a plateau in MB/s across different batch sizes.Now that we\u0027ve identified the batch size we intend to use, the next step is to begin toindex the data. To index data efficiently, this sample:Uses multiple threads/workers.Implements an exponential backoff retry strategy.To take full advantage of Azure AI Search\u0027s indexing speeds, you\u0027ll likely need to usemultiple threads to send batch indexing requests concurrently to the service.Several of the key considerations mentioned above impact the optimal number ofthreads. You can modify this sample and test with different thread counts to determinethe optimal thread count for your scenario.\r\nHowever, as long as you have severalthreads running concurrently, you should be able to take advantage of most of theefficiency gains.As you ramp up the requests hitting the search service, you may encounter HTTP statuscodes indicating the request didn\u0027t fully succeed.\r\nDuring indexing, two common HTTPstatus codes are:5 - Index dataUse multiple threads/workers503 Service Unavailable - This error means that the system is under heavy loadand your request can\u0027t be processed at this time.207 Multi-Status - This error means that some documents succeeded, but at leastone failed.If a failure happens, requests should be retried using an exponential backoff retrystrategy. Azure AI Search\u0027s .NET SDK automatically retries 503s and other failed requests butyou\u0027ll need to implement your own logic to retry 207s. Open-source tools such asPolly can also be used to implement a retry strategy.In this sample, we implement our own exponential backoff retry strategy. To implementthis strategy, we start by defining some variables including the maxRetryAttempts andthe initial delay for a failed request:C#The results of the indexing operation are stored in the variable IndexDocumentResultresult. This variable is important because it allows you to check if any documents in thebatch failed as shown below.\n"
}