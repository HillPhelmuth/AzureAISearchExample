{
  "Id": "184",
  "Title": "\u0022Implementing Azure Search with Material UI and Azure Functions\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfcurrentPage - 1} // zero-based control from material ui      onPageChange={handleChangePage}      rowsPerPage={props.resultsPerPage}      rowsPerPageOptions={[props.resultsPerPage]} // don\u0027t display b/c there is a single value      showFirstButton={true}      showLastButton={true}      labelDisplayedRows={({ from, to, count }) =\u003E        \u0060${props.currentPage} of ${Math.round(          props.\r\nresultCount / props.resultsPerPage        )} pages\u0060      }    /\u003E  );}Azure Function: Suggestions from the catalogconst { app } = require(\u0027@azure/functions\u0027);const { SearchClient, AzureKeyCredential } = require(\u0022@azure/search-documents\u0022);const { CONFIG } = require(\u0022../lib/config\u0022);// Create a SearchClient to send queriesconst client = new SearchClient(    \u0060https://\u0060 \u002B CONFIG.\r\nSearchServiceName \u002B \u0060.search.windows.net/\u0060,    CONFIG.SearchIndexName,    new AzureKeyCredential(CONFIG.SearchApiQueryKey));app.http(\u0027suggest\u0027, {    methods: [\u0027POST\u0027],    authLevel: \u0027anonymous\u0027,    handler: async (request, context) =\u003E {        context.log(\u0060Suggester request for url \u0022${request.url}\u0022\u0060);        try {            const body = await request.\r\njson();            console.log(\u0060suggest body ${body}\u0060);            let q = body.q;            console.log(\u0060suggest q ${q}\u0060)            const top = body.top;            console.log(\u0060suggest top ${top}\u0060)            const suggester = body.suggester;            console.log(\u0060suggest suggester ${suggester}\u0060)            if(!body || !q || !top || !suggester){                console. log(\u0060No suggester found in body\u0060)                return {                    status: 404,                    body: \u0022No suggester found\u0022                }            }            // Let\u0027s get the top 5 suggestions for that search term            const suggestions = await client.suggest(q, suggester, { top: parseInt(top) });            //const suggestions = await client.autocomplete(q, suggester, {top: parseInt(top)});            context.log(suggestions);            return {                headers: {                    \u0022Content-type\u0022: \u0022application/json\u0022                },                jsonBody: {                     suggestions: suggestions.\n"
}