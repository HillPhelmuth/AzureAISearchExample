{
  "Id": "653",
  "Title": "\u0022Defining Complex Field Types and SearchField Models in C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfBoth are complex types. For moreinformation, see How to model complex types.C#SearchFieldDataType.DateTimeOffset) { IsFilterable = true, IsSortable = true }         } };Field definitionspublic partial class Hotel{    [SimpleField(IsKey = true, IsFilterable = true)]    public string HotelId { get; set; }    [SearchableField(IsSortable = true)]    public string HotelName { get; set; }    [SearchableField(AnalyzerName = LexicalAnalyzerName.\r\nValues.EnLucene)]    public string Description { get; set; }    [SearchableField(IsFilterable = true, IsSortable = true, IsFacetable = true)]    public string Category { get; set; }    [JsonIgnore]    public bool? SmokingAllowed =\u003E (Rooms != null) ? Array.\r\nExists(Rooms, element =\u003E element.SmokingAllowed == true) : (bool?)null;    [SearchableField]    public Address Address { get; set; }    public Room[] Rooms { get; set; }When defining fields, you can use the base SearchField class, or you can use derivativehelper models that serve as \u0022templates\u0022, with pre-configured properties.Exactly one field in your index must serve as the document key (IsKey = true).\r\nIt mustbe a string, and it must uniquely identify each document. It\u0027s also required to haveIsHidden = true, which means it can\u0027t be visible in search results.Field typeDescription and usageSearchFieldBase class, with most properties set to null, excepting Name which is required,and AnalyzerName which defaults to standard Lucene. SimpleFieldHelper model. Can be any data type, is always non-searchable (it\u0027s ignored forfull text search queries), and is retrievable (it\u0027s not hidden). Other attributes areoff by default, but can be enabled. You might use a SimpleField for documentIDs or fields used only in filters, facets, or scoring profiles.\n"
}