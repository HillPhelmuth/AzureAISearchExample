{
  "Id": "1222",
  "Title": "\u0022Efficient Filtering and Boolean Expressions in Azure AI Search\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf\u00223\u0022,      \u0022name\u0022: \u0022Parka\u0022,      \u0022seasons\u0022: [\u0022winter\u0022]    }  ]}odata-filter-expris equivalent to:odata-filter-exprand each of the two any sub-expressions can be efficiently executed using the invertedindex.\r\nAlso, thanks to the negation law of quantifiers, this expression:odata-filter-expris equivalent to:odata-filter-exprwhich is why it\u0027s possible to use all with ne and and.A wider variety of expressions are allowed when filtering on collections of data typesthat support the lt, gt, le, and ge operators, such as Collection(Edm.Int32) forexample.\r\nSpecifically, you can use and as well as or in any, as long as the underlyingcomparison expressions are combined into range comparisons using and, which are    seasons/any(s: s eq \u0027winter\u0027 or s eq \u0027fall\u0027)    seasons/any(s: s eq \u0027winter\u0027) or seasons/any(s: s eq \u0027fall\u0027)    seasons/all(s:\r\ns ne \u0027winter\u0027 and s ne \u0027fall\u0027)    not seasons/any(s: s eq \u0027winter\u0027 or s eq \u0027fall\u0027)\uFF17 NoteAlthough the details are beyond the scope of this document, these same principlesextend to distance and intersection tests for collections of geo-spatial points aswell.\r\nThis is why, in any:geo.intersects cannot be negatedgeo.distance must be compared using lt or leexpressions must be combined with or, not andThe converse rules apply for all.then further combined using or. This structure of Boolean expressions is calledDisjunctive Normal Form (DNF), otherwise known as \u0022ORs of ANDs\u0022. Conversely,lambda expressions for all for these data types must be in Conjunctive Normal Form(CNF), otherwise known as \u0022ANDs of ORs\u0022. Azure AI Search allows such rangecomparisons because it can execute them using inverted indexes efficiently, just like itcan do fast term lookup for strings.\n"
}