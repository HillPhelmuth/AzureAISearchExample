{
  "Id": "187",
  "Title": "\u0022Creating a Search Component with Autocomplete in React\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdflabel !== undefined \u0026\u0026      option.label !== null    );  }  return (    \u003CStyledContainer onSubmit={onFormSubmit}\u003E      \u003CStyledAutoComplete        key=\u0022autocomplete\u0022        freeSolo // accepts both entered text or selected suggestion        autoSelect // text in box selected        autoFocus=\u0022autoFocus\u0022        filterOptions={(x) =\u003E x}        options={suggestions}        value={q}        noOptionsText=\u0022What are you looking for?\u0022        onChange={          (e, value, reason) =\u003E setQ(value?.\r\nlabel || \u0022\u0022)        }        onInputChange={(e, newValue, reason) =\u003E {          if (newValue) {            setQ(newValue);          }        }}        getOptionLabel={(option) =\u003E hasLabelValue(option) ? option.label : q}        // set key to force re-render when q changes        renderOption={(props, option) =\u003E {          return hasLabelValue(option) ? (            \u003Cli {.\r\n..props} key={option.id}\u003E              {option.label}            \u003C/li\u003E          ) :  (            \u003Cli {...props} key={q}\u003E              {q}            \u003C/li\u003E          )        }}        renderInput={(params) =\u003E (          \u003CTextField            {... params}            variant=\u0022outlined\u0022            label=\u0022What are you looking for?\u0022            onKeyDown={(e) =\u003E {              if (e.code.toLowerCase() === \u0022enter\u0022 \u0026\u0026 e.target.value) {                onFormSubmit(e.target.value);              }            }}          /\u003E        )}      /\u003E      \u003CStyledButton        key=\u0022styledbutton\u0022        variant=\u0022contained\u0022        onClick={onFormSubmit}      \u003E        Search      \u003C/StyledButton\u003E    \u003C/StyledContainer\u003E  );}This React component uses the @mui/material/Autocomplete component to provide asearch textbox, which also supports displaying suggestions (using the renderInputfunction).\n"
}