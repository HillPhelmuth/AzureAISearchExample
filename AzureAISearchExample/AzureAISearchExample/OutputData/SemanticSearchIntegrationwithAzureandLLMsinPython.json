{
  "Id": "415",
  "Title": "\u0022Semantic Search Integration with Azure and LLMs in Python\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfsearch_client.search(query_text,                                  filter=filter,                                  top=top,                                  vector=query_vector,                                  top_k=50 if query_vector else None,                                  vector_fields=\u0022embedding\u0022 if query_vector else None)if use_semantic_captions:    results = [doc[self.sourcepage_field] \u002B \u0022: \u0022 \u002B nonewlines(\u0022 . \u0022.join([c.text for c in doc[\u0027@search.captions\u0027]])) async for doc in r]else:    results = [doc[self.sourcepage_field] \u002B \u0022: \u0022 \u002B nonewlines(doc[self.content_field]) async for doc in r]content = \u0022\\n\u0022.\r\njoin(results)Integration code and LLMsPython# Execute this cell multiple times updating user_input to accumulate chat historyuser_input = \u0022Does my plan cover annual eye exams?\u0022# Exclude category, to simulate scenarios where there\u0027s a set of docs you can\u0027t seeexclude_category = Noneif len(history) \u003E 0:    completion = openai.\r\nCompletion.create(        engine=AZURE_OPENAI_GPT_DEPLOYMENT,        prompt=summary_prompt_template.format(summary=\u0022\\n\u0022.join(history), question=user_input),        temperature=0.7,        max_tokens=32,        stop=[\u0022\\n\u0022])    search = completion.choices[0].\r\ntextelse:    search = user_input# Alternatively simply use search_client.search(q, top=3) if not using semantic rankingprint(\u0022Searching:\u0022, search)print(\u0022-------------------\u0022)filter = \u0022category ne \u0027{}\u0027\u0022.format(exclude_category.replace(\u0022\u0027\u0022, \u0022\u0027\u0027\u0022)) if exclude_category else Noner = search_client. search(search,                          filter=filter,                         query_type=QueryType.SEMANTIC,                          query_language=\u0022en-us\u0022,                          query_speller=\u0022lexicon\u0022,                          semantic_configuration_name=\u0022default\u0022,                          top=3)results = [doc[KB_FIELDS_SOURCEPAGE] \u002B \u0022: \u0022 \u002B doc[KB_FIELDS_CONTENT].replace(\u0022\\n\u0022, \u0022\u0022).\n"
}