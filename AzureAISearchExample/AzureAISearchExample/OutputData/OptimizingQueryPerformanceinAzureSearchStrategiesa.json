{
  "Id": "1327",
  "Title": "\u0022Optimizing Query Performance in Azure Search: Strategies and Considerations\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfYou\u0027re most likelyto find this pattern in applications that implement security trimming (checking a fieldcontaining one or more principal IDs against a list of principal IDs representing the userissuing the query).A more efficient way to execute filters that contain a large number of values is to usesearch.\r\nin function, as shown in this example:JSONWhen query performance is slowing down in general, adding more replicas frequentlysolves the issue. But what if the problem is a single query that takes too long tocomplete? In this scenario, adding replicas won\u0027t help, but more partitions might. Apartition splits data across extra computing resources. Two partitions split data in half, athird partition splits it into thirds, and so forth.\r\nOne positive side-effect of adding partitions is that slower queries sometimes performfaster due to parallel computing. We\u0027ve noted parallelization on low selectivity queries,such as queries that match many documents, or facets providing counts over a largeTip: Use search functions instead overloading filtercriteria$filter= userid eq 123 or userid eq 234 or userid eq 345 or userid eq 456 or userid eq 567 search.\r\nin(userid, \u0027123,234,345,456,567\u0027, \u0027,\u0027) Tip: Add partitions for slow individual queriesnumber of documents. Since significant computation is required to score the relevancyof the documents, or to count the numbers of documents, adding extra partitions helpsqueries complete faster.\r\nTo add partitions, use Azure portal, PowerShell, Azure CLI, or a management SDK.A service is overburdened when queries take too long or when the service startsdropping requests. If this happens, you can address the problem by upgrading theservice or by adding capacity.The tier of your search service and the number of replicas/partitions also have a largeimpact on performance. Each progressively higher tier provides faster CPUs and morememory, both of which have a positive impact on performance.The Standard S1 search tier is often where customers start. A common pattern for S1services is that indexes grow over time, which requires more partitions. More partitionslead to slower response times, so more replicas are added to handle the query load.\n"
}