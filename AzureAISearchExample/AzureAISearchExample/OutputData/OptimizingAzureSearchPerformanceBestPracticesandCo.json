{
  "Id": "1325",
  "Title": "\u0022Optimizing Azure Search Performance: Best Practices and Considerations\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfCreates a larger surface that each query has to cover. All fields marked assearchable are scanned in a full text search.Increases operational costs due to extra storage. Filtering and sorting requiresadditional space for storing original (non-analyzed) strings. Avoid setting filterableor sortable on fields that don\u0027t need it.In many cases, over attribution limits the capabilities of the field. For example, if afield is facetable, filterable, and searchable, you can only store 16 KB of text withina field, whereas a searchable field can hold up to 16 MB of text.\r\nComplex data types are useful when data has a complicated nested structure, such asthe parent-child elements found in JSON documents. The downside of complex types is\uFF17 NoteOnly unnecessary attribution should be avoided. Filters and facets are oftenessential to the search experience, and in cases where filters are used, youfrequently need sorting so that you can order the results (filters by themselvesreturn in an unordered set).Tip: Consider alternatives to complex typesthe extra storage requirements and additional resources required to index the content,in comparison to non-complex data types.\r\nIn some cases, you can avoid these tradeoffs by mapping a complex data structure to asimpler field type, such as a Collection. Alternatively, you might opt for flattening a fieldhierarchy into individual root-level fields.Query composition and complexity are one of the most important factors forperformance, and query optimization can drastically improve performance.\r\nWhendesigning queries, think about the following points:Number of searchable fields. Each additional searchable field results in more workfor the search service. You can limit the fields being searched at query time usingthe \u0022searchFields\u0022 parameter. It\u0027s best to specify only the fields that you care aboutto improve performance. Amount of data being returned. Retrieving a large amount content can makequeries slower. When structuring a query, return only those fields that you need torender the results page, and then retrieve remaining fields using the Lookup APIonce a user selects a match.Use of partial term searches. Partial term searches, such as prefix search, fuzzysearch, and regular expression search, are more computationally expensive thantypical keyword searches, as they require full index scans to produce results.Number of facets. Adding facets to queries requires aggregations for each query.Requesting a higher \u0022count\u0022 for a facet also requires extra work by the service.\n"
}