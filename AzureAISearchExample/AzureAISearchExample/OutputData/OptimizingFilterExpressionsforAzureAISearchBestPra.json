{
  "Id": "1607",
  "Title": "\u0022Optimizing Filter Expressions for Azure AI Search: Best Practices\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfThe fix is to put theoperand of not in parentheses:odata-filter-expr    Rating gt 0 and Rating lt 3 or Rating gt 7 and Rating lt 10    ((Rating gt 0) and (Rating lt 3)) or ((Rating gt 7) and (Rating lt 10))    not Rating gt 5    Invalid expression: A unary operator with an incompatible type was detected. Found operand type \u0027Edm.Int32\u0027 for operator kind \u0027Not\u0027.\r\nnot (Rating gt 5)Filter size limitationsThere are limits to the size and complexity of filter expressions that you can send toAzure AI Search. The limits are based roughly on the number of clauses in your filterexpression. A good guideline is that if you have hundreds of clauses, you are at risk ofexceeding the limit.\r\nWe recommend designing your application in such a way that itdoesn\u0027t generate filters of unbounded size.Find all hotels with at least one room with a base rate less than $200 that are rated at orabove 4:odata-filter-exprFind all hotels other than \u0022Sea View Motel\u0022 that have been renovated since 2010:odata-filter-exprFind all hotels that were renovated in 2010 or later.\r\nThe datetime literal includes timezone information for Pacific Standard Time:odata-filter-exprFind all hotels that have parking included and where all rooms are non-smoking:odata-filter-expr- OR -\uEA80 TipUsing the search.in function instead of long disjunctions of equality comparisonscan help avoid the filter clause limit, since a function call counts as a single clause.Examples    $filter=Rooms/any(room: room/BaseRate lt 200. 0) and Rating ge 4    $filter=HotelName ne \u0027Sea View Motel\u0027 and LastRenovationDate ge 2010-01-01T00:00:00Z    $filter=LastRenovationDate ge 2010-01-01T00:00:00-08:00    $filter=ParkingIncluded and Rooms/all(room:\n"
}