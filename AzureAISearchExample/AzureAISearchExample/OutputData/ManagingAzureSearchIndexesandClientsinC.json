{
  "Id": "649",
  "Title": "\u0022Managing Azure Search Indexes and Clients in C#\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfC#private static SearchIndexClient CreateSearchIndexClient(IConfigurationRoot configuration){    string searchServiceEndPoint = configuration[\u0022SearchServiceEndPoint\u0022];    string adminApiKey = configuration[\u0022SearchServiceAdminApiKey\u0022];    SearchIndexClient indexClient = new SearchIndexClient(new Uri(searchServiceEndPoint), new AzureKeyCredential(adminApiKey));    return indexClient;}string indexName = configuration[\u0022SearchIndexName\u0022];private static SearchClient CreateSearchClientForQueries(string indexName, IConfigurationRoot configuration){    string searchServiceEndPoint = configuration[\u0022SearchServiceEndPoint\u0022];\r\nstring queryApiKey = configuration[\u0022SearchServiceQueryApiKey\u0022];    SearchClient searchClient = new SearchClient(new Uri(searchServiceEndPoint), indexName, new AzureKeyCredential(queryApiKey));    return searchClient;}\uFF17 NoteIf you provide an invalid key for the import operation (for example, a query keywhere an admin key was required), the SearchClient will throw a CloudExceptionIn the early stages of development, you might want to include a DeleteIndex statementto delete a work-in-progress index so that you can recreate it with an updateddefinition.\r\nSample code for Azure Cognitive Search often includes a deletion step so thatyou can rerun the sample.\r\nThe following line calls DeleteIndexIfExists:C#This method uses the given SearchIndexClient to check if the index exists, and if so,deletes it:C#with the error message \u0022Forbidden\u0022 the first time you call an operation method onit. If this happens to you, double-check the API key.Deleting the indexConsole.WriteLine(\u0022{0}\u0022, \u0022Deleting index... \\n\u0022);DeleteIndexIfExists(indexName, indexClient);private static void DeleteIndexIfExists(string indexName, SearchIndexClient indexClient){    try    {        if (indexClient.GetIndex(indexName) != null)        {            indexClient.DeleteIndex(indexName);        }    }    catch (RequestFailedException e) when (e.Status == 404)    {        // Throw an exception if the index name isn\u0027t found        Console.\n"
}