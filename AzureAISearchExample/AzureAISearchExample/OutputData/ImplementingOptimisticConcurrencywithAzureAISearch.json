{
  "Id": "644",
  "Title": "\u0022Implementing Optimistic Concurrency with Azure AI Search: A Design Pattern\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfExists(\u0022test\u0022))        {A design pattern for implementing optimistic concurrency should include a loop thatretries the access condition check, a test for the access condition, and optionallyretrieves an updated resource before attempting to re-apply the changes.This code snippet illustrates the addition of a synonymMap to an index that alreadyexists.\r\nThis code is from the Synonym C# example for Azure AI Search.The snippet gets the \u0022hotels\u0022 index, checks the object version on an update operation,throws an exception if the condition fails, and then retries the operation (up to threetimes), starting with index retrieval from the server to get the latest version.C#            serviceClient.Indexes.\r\nDelete(\u0022test\u0022);        }    }    private static Index DefineTestIndex() =\u003E        new Index()        {            Name = \u0022test\u0022,            Fields = new[] { new Field(\u0022id\u0022, DataType.String) { IsKey = true } }        };    }}Design patternprivate static void EnableSynonymsInHotelsIndexSafely(SearchServiceClient serviceClient){    int MaxNumTries = 3;    for (int i = 0; i \u003C MaxNumTries; \u002B\u002Bi)    {        try        {            Index index = serviceClient.\r\nIndexes.Get(\u0022hotels\u0022);            index = AddSynonymMapsToFields(index);            // The IfNotChanged condition ensures that the index is updated only if the ETags match.            serviceClient.Indexes.CreateOrUpdate(index, accessCondition: AccessCondition. IfNotChanged(index));            Console.WriteLine(\u0022Updated the index successfully.\\n\u0022);            break;        }Try modifying other samples to exercise ETags or AccessCondition objects.search-dotnet-getting-started on GitHub. This repository includes the\u0022DotNetEtagsExplainer\u0022 project.azure-search-dotnet-samples on GitHub contains additional C# samples.\n"
}