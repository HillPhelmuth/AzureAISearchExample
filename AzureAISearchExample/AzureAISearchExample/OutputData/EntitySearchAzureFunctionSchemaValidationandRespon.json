{
  "Id": "1089",
  "Title": "\u0022EntitySearch Azure Function: Schema Validation and Response Processing\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf}             }             public class ContractualRule             {                 public string _type { get; set; }                 public License License { get; set; }                 public string LicenseNotice { get; set; }                 public string Text { get; set; }                 public string Url { get; set; }             }             public ContractualRule[] ContractualRules { get;\r\nset; }             public string Description { get; set; }             public string Name { get; set; }             public EntityPresentationinfo EntityPresentationInfo { get; set; }         }         #endregion         #region The Azure Function definition         [FunctionName(\u0022EntitySearch\u0022)]         public static async Task\u003CIActionResult\u003E Run(             [HttpTrigger(AuthorizationLevel.\r\nFunction, \u0022post\u0022, Route = null)] HttpRequest req,             ILogger log)         {             log.LogInformation(\u0022Entity Search function: C# HTTP trigger function processed a request.\u0022);             var response = new WebApiResponse             {                 Values = new List\u003COutputRecord\u003E()             };             string requestBody = new StreamReader(req.Body).ReadToEnd();             var data = JsonConvert.DeserializeObject\u003CWebApiRequest\u003E(requestBody);             // Do some schema validation             if (data == null)             {                 return new BadRequestObjectResult(\u0022The request schema does not match expected schema.\u0022);             }             if (data. Values == null)             {                 return new BadRequestObjectResult(\u0022The request schema does not match expected schema. Could not find values array.\u0022);             }             // Calculate the response for each value.             foreach (var record in data.Values)             {                 if (record == null || record.RecordId == null) continue;                 OutputRecord responseRecord = new OutputRecord                 {                     RecordId = record.RecordId                 };                 try                 {                     responseRecord.Data = GetEntityMetadata(record.Data.Name).Result;                 }                 catch (Exception e)                 {                     // Something bad happened, log the issue.\n"
}