{
  "Id": "1620",
  "Title": "\u0022Comparing Data Types in Azure AI Search: Rules and Limitations\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfAvariable can be either a field name, or a range variable in the case of a lambdaexpression.The data types on both sides of a comparison operator must be compatible. Forexample, if the left side is a field of type Edm.DateTimeOffset, then the right side must bea date-time constant. Numeric data types are more flexible.\r\nYou can compare variablesand functions of any numeric type with constants of any other numeric type, with a fewlimitations, as described in the following table.Variable orfunction typeConstant valuetypeLimitationsEdm.DoubleEdm.DoubleComparison is subject to special rules for NaNEdm.DoubleEdm.Int64Constant is converted to Edm.\r\nDouble, resulting in a lossof precision for values of large magnitudeEdm.DoubleEdm.Int32n/aEdm.Int64Edm.DoubleComparisons to NaN, -INF, or INF are not allowedcomparison_expression ::=    variable_or_function comparison_operator constant |    constant comparison_operator variable_or_functionvariable_or_function ::= variable | function_callcomparison_operator ::= \u0027gt\u0027 | \u0027lt\u0027 | \u0027ge\u0027 | \u0027le\u0027 | \u0027eq\u0027 | \u0027ne\u0027OData syntax diagram for Azure AI Search\uFF17 NoteSee OData expression syntax reference for Azure AI Search for the completeEBNF.\r\nData types for comparisonsVariable orfunction typeConstant valuetypeLimitationsEdm.Int64Edm.Int64n/aEdm.Int64Edm. Int32Constant is converted to Edm.Int64 before comparisonEdm.Int32Edm.DoubleComparisons to NaN, -INF, or INF are not allowedEdm.Int32Edm.Int64n/aEdm.Int32Edm.Int32n/aFor comparisons that are not allowed, such as comparing a field of type Edm.Int64 toNaN, the Azure AI Search REST API will return an \u0022HTTP 400: Bad Request\u0022 error.When using comparison operators, it\u0027s important to remember that all non-collectionfields in Azure AI Search can potentially be null.\n"
}