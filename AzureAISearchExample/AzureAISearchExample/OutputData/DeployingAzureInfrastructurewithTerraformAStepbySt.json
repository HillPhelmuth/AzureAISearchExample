{
  "Id": "130",
  "Title": "\u0022Deploying Azure Infrastructure with Terraform: A Step-by-Step Guide\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdfOnce you verify the changes, you apply the execution plan to deploy theinfrastructure.In this article, you learn how to:Install and configure Terraform1. Create a directory in which to test and run the sample Terraform code and make itthe current directory.2. Create a file named main.\r\ntf and insert the following code:Create a random pet name for the Azure resource group name using random_pet\uFF02Create an Azure resource group using azurerm_resource_group\uFF02Create a random string using random_string\uFF02Create an Azure AI Search service using azurerm_search_service\uFF02PrerequisitesImplement the Terraform code\uFF17 NoteSee more articles and sample code showing how to use Terraform to manageAzure resourcesTerraform3.\r\nCreate a file named outputs.tf and insert the following code:Terraform4. Create a file named providers.tf and insert the following code:Terraformresource \u0022random_pet\u0022 \u0022rg_name\u0022 {  prefix = var.resource_group_name_prefix}resource \u0022azurerm_resource_group\u0022 \u0022rg\u0022 {  name     = random_pet.rg_name.id  location = var.\r\nresource_group_location}resource \u0022random_string\u0022 \u0022azurerm_search_service_name\u0022 {  length  = 25  upper   = false  numeric = false  special = false}resource \u0022azurerm_search_service\u0022 \u0022search\u0022 {  name                = random_string.azurerm_search_service_name.result  resource_group_name = azurerm_resource_group.rg.name  location            = azurerm_resource_group.rg. location  sku                 = var.sku  replica_count       = var.replica_count  partition_count     = var.partition_count}output \u0022resource_group_name\u0022 {  value = azurerm_resource_group.rg.name}output \u0022azurerm_search_service_name\u0022 {  value = azurerm_search_service.search.name}terraform {  required_version = \u0022\u003E=1.\n"
}