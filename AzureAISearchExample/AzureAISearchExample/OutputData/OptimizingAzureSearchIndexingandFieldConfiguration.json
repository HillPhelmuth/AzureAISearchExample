{
  "Id": "686",
  "Title": "\u0022Optimizing Azure Search Indexing and Field Configuration Best Practices\u0022",
  "Text": "C:\\Users\\adamh\\Downloads\\azure-search.pdf3. Identify a document key. A document key is an index requirement. It\u0027s a singlestring field and it\u0027s populated from a source data field that contains unique values.For example, if you\u0027re indexing from Blob Storage, the metadata storage path isoften used as the document key because it uniquely identifies each blob in thecontainer.\r\n4. Identify the fields in your data source that contribute searchable content in theindex. Searchable content includes short or long strings that are queried using thefull text search engine. If the content is verbose (small phrases or bigger chunks),experiment with different analyzers to see how the text is tokenized.Field attribute assignments determine both search behaviors and the physicalrepresentation of your index on the search service. Determining how fields shouldbe specified is an iterative process for many customers. To speed up iterations,start with sample data so that you can drop and rebuild easily.5.\r\nIdentify which source fields can be used as filters. Numeric content and short textfields, particularly those with repeating values, are good choices. When workingwith filters, remember:Filterable fields can optionally be used in faceted navigation.Filterable fields are returned in arbitrary order, so consider making themsortable as well.Schema checklist6. Determine whether to use the default analyzer (\u0022analyzer\u0022: null) or a differentanalyzer. Analyzers are used to tokenize text fields during indexing and queryexecution. If strings are descriptive and semantically rich, or if you have translatedstrings, consider overriding the default with a language analyzer. When you\u0027re ready to create the index, use a search client that can send the request.You can use the Azure portal or REST APIs for early development and proof-of-concepttesting.During development, plan on frequent rebuilds. Because physical structures are createdin the service, dropping and re-creating indexes is necessary for many modifications.You might consider working with a subset of your data to make rebuilds go faster.Index design through the portal enforces requirements and schema rules forspecific data types, such as disallowing full text search capabilities on numericfields.1. Sign in to the Azure portal.2.\n"
}